
F401_sineGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000936c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  08009520  08009520  0000a520  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f98  08009f98  0000b868  2**0
                  CONTENTS
  4 .ARM          00000008  08009f98  08009f98  0000af98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fa0  08009fa0  0000b868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fa0  08009fa0  0000afa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fa4  08009fa4  0000afa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000868  20000000  08009fa8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000868  0800a810  0000b868  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  20000be8  0800a810  0000bbe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b868  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d031  00000000  00000000  0000b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e91  00000000  00000000  000188c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0001a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bc  00000000  00000000  0001b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018302  00000000  00000000  0001bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d175  00000000  00000000  00033e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099cc9  00000000  00000000  00040ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000dacbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004544  00000000  00000000  000dad44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000df288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000868 	.word	0x20000868
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094f4 	.word	0x080094f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000086c 	.word	0x2000086c
 80001dc:	080094f4 	.word	0x080094f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <aiInit>:
  AI_ALIGNED(8) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];
  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;

/* USER CODE END 0 */
int aiInit(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b090      	sub	sp, #64	@ 0x40
 8000ff8:	af00      	add	r7, sp, #0

	/* Create and initialize the c-model */
	const ai_handle acts[] = {activations};
 8000ffa:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <aiInit+0xd8>)
 8000ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c

	ai_network_params ai_params = {
	    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000ffe:	f002 fb03 	bl	8003608 <ai_sine_model_data_weights_get>
 8001002:	4602      	mov	r2, r0
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fac9 	bl	80035a0 <ai_sine_model_data_weights_buffer_get>
	    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	492e      	ldr	r1, [pc, #184]	@ (80010cc <aiInit+0xd8>)
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fa8f 	bl	8003538 <ai_sine_model_data_activations_buffer_get>
	  };

	// Create instance of neural network
	ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 800101a:	2100      	movs	r1, #0
 800101c:	482c      	ldr	r0, [pc, #176]	@ (80010d0 <aiInit+0xdc>)
 800101e:	f002 f9f5 	bl	800340c <ai_sine_model_create>
 8001022:	4603      	mov	r3, r0
 8001024:	4a2b      	ldr	r2, [pc, #172]	@ (80010d4 <aiInit+0xe0>)
 8001026:	6013      	str	r3, [r2, #0]
	if (ai_err.type != AI_ERROR_NONE)
 8001028:	4b2a      	ldr	r3, [pc, #168]	@ (80010d4 <aiInit+0xe0>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d010      	beq.n	8001052 <aiInit+0x5e>
	  {
	    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001030:	4929      	ldr	r1, [pc, #164]	@ (80010d8 <aiInit+0xe4>)
 8001032:	482a      	ldr	r0, [pc, #168]	@ (80010dc <aiInit+0xe8>)
 8001034:	f004 fec2 	bl	8005dbc <siprintf>
 8001038:	4603      	mov	r3, r0
 800103a:	4a29      	ldr	r2, [pc, #164]	@ (80010e0 <aiInit+0xec>)
 800103c:	6013      	str	r3, [r2, #0]
	    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800103e:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <aiInit+0xec>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29a      	uxth	r2, r3
 8001044:	2364      	movs	r3, #100	@ 0x64
 8001046:	4925      	ldr	r1, [pc, #148]	@ (80010dc <aiInit+0xe8>)
 8001048:	4826      	ldr	r0, [pc, #152]	@ (80010e4 <aiInit+0xf0>)
 800104a:	f001 fd37 	bl	8002abc <HAL_UART_Transmit>
	    while(1);
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <aiInit+0x5a>
	  }
	// Initialize neural network
	if (!ai_sine_model_init(sine_model, &ai_params))
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <aiInit+0xdc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	1d3a      	adds	r2, r7, #4
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fa20 	bl	80034a0 <ai_sine_model_init>
 8001060:	4603      	mov	r3, r0
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d010      	beq.n	800108e <aiInit+0x9a>
	  {
	    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 800106c:	491e      	ldr	r1, [pc, #120]	@ (80010e8 <aiInit+0xf4>)
 800106e:	481b      	ldr	r0, [pc, #108]	@ (80010dc <aiInit+0xe8>)
 8001070:	f004 fea4 	bl	8005dbc <siprintf>
 8001074:	4603      	mov	r3, r0
 8001076:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <aiInit+0xec>)
 8001078:	6013      	str	r3, [r2, #0]
	    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <aiInit+0xec>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b29a      	uxth	r2, r3
 8001080:	2364      	movs	r3, #100	@ 0x64
 8001082:	4916      	ldr	r1, [pc, #88]	@ (80010dc <aiInit+0xe8>)
 8001084:	4817      	ldr	r0, [pc, #92]	@ (80010e4 <aiInit+0xf0>)
 8001086:	f001 fd19 	bl	8002abc <HAL_UART_Transmit>
	    while(1);
 800108a:	bf00      	nop
 800108c:	e7fd      	b.n	800108a <aiInit+0x96>
	  }

	/* Retrieve pointers to the model's input/output tensors */
	ai_input = ai_sine_model_inputs_get(sine_model, NULL);
 800108e:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <aiInit+0xdc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f002 f9cf 	bl	8003438 <ai_sine_model_inputs_get>
 800109a:	4603      	mov	r3, r0
 800109c:	4a13      	ldr	r2, [pc, #76]	@ (80010ec <aiInit+0xf8>)
 800109e:	6013      	str	r3, [r2, #0]
	ai_output = ai_sine_model_outputs_get(sine_model, NULL);
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <aiInit+0xdc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 f9e0 	bl	800346c <ai_sine_model_outputs_get>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <aiInit+0xfc>)
 80010b0:	6013      	str	r3, [r2, #0]

	/* Set the @ of the input/output buffers when not allocated in the activations buffer */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <aiInit+0xf8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a0f      	ldr	r2, [pc, #60]	@ (80010f4 <aiInit+0x100>)
 80010b8:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <aiInit+0xfc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a0e      	ldr	r2, [pc, #56]	@ (80010f8 <aiInit+0x104>)
 80010c0:	605a      	str	r2, [r3, #4]

#ifdef USE_AI_REPORT
  ai_network_get_report(network, &report);
#endif

	return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3740      	adds	r7, #64	@ 0x40
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000978 	.word	0x20000978
 80010d0:	20000a04 	.word	0x20000a04
 80010d4:	2000095c 	.word	0x2000095c
 80010d8:	08009520 	.word	0x08009520
 80010dc:	20000924 	.word	0x20000924
 80010e0:	20000958 	.word	0x20000958
 80010e4:	200008d4 	.word	0x200008d4
 80010e8:	08009548 	.word	0x08009548
 80010ec:	2000091c 	.word	0x2000091c
 80010f0:	20000920 	.word	0x20000920
 80010f4:	200009f8 	.word	0x200009f8
 80010f8:	20000a00 	.word	0x20000a00
 80010fc:	00000000 	.word	0x00000000

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  // Set working memory and get weights/biases from model
  // Set pointers wrapper structs to our data buffers

  ai_input[0].size = 1;
 8001106:	4b66      	ldr	r3, [pc, #408]	@ (80012a0 <main+0x1a0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2201      	movs	r2, #1
 800110c:	611a      	str	r2, [r3, #16]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800110e:	4b64      	ldr	r3, [pc, #400]	@ (80012a0 <main+0x1a0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a64      	ldr	r2, [pc, #400]	@ (80012a4 <main+0x1a4>)
 8001114:	605a      	str	r2, [r3, #4]
  ai_output[0].size = 1;
 8001116:	4b64      	ldr	r3, [pc, #400]	@ (80012a8 <main+0x1a8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2201      	movs	r2, #1
 800111c:	611a      	str	r2, [r3, #16]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800111e:	4b62      	ldr	r3, [pc, #392]	@ (80012a8 <main+0x1a8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a62      	ldr	r2, [pc, #392]	@ (80012ac <main+0x1ac>)
 8001124:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001126:	f000 fb75 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112a:	f000 f8dd 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112e:	f000 f9a7 	bl	8001480 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001132:	f000 f97b 	bl	800142c <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001136:	f000 f955 	bl	80013e4 <MX_TIM10_Init>
  MX_CRC_Init();
 800113a:	f000 f93f 	bl	80013bc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_TIM_Base_Start(&htim10);
 800113e:	485c      	ldr	r0, [pc, #368]	@ (80012b0 <main+0x1b0>)
 8001140:	f001 fb86 	bl	8002850 <HAL_TIM_Base_Start>
  printf(buf);
 8001144:	485b      	ldr	r0, [pc, #364]	@ (80012b4 <main+0x1b4>)
 8001146:	f004 fe27 	bl	8005d98 <iprintf>
  printf(buf_len);
 800114a:	4b5b      	ldr	r3, [pc, #364]	@ (80012b8 <main+0x1b8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f004 fe22 	bl	8005d98 <iprintf>
  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8001154:	4959      	ldr	r1, [pc, #356]	@ (80012bc <main+0x1bc>)
 8001156:	4857      	ldr	r0, [pc, #348]	@ (80012b4 <main+0x1b4>)
 8001158:	f004 fe30 	bl	8005dbc <siprintf>
 800115c:	4603      	mov	r3, r0
 800115e:	4a56      	ldr	r2, [pc, #344]	@ (80012b8 <main+0x1b8>)
 8001160:	6013      	str	r3, [r2, #0]
  printf(buf_len);
 8001162:	4b55      	ldr	r3, [pc, #340]	@ (80012b8 <main+0x1b8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fe16 	bl	8005d98 <iprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800116c:	4b52      	ldr	r3, [pc, #328]	@ (80012b8 <main+0x1b8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b29a      	uxth	r2, r3
 8001172:	2364      	movs	r3, #100	@ 0x64
 8001174:	494f      	ldr	r1, [pc, #316]	@ (80012b4 <main+0x1b4>)
 8001176:	4852      	ldr	r0, [pc, #328]	@ (80012c0 <main+0x1c0>)
 8001178:	f001 fca0 	bl	8002abc <HAL_UART_Transmit>

  aiInit();
 800117c:	f7ff ff3a 	bl	8000ff4 <aiInit>
  while (1)
  {
    /* USER CODE END WHILE */
    // Fill input buffer (use test value)

      for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	e025      	b.n	80011d2 <main+0xd2>
      {
        a = (input*3.14159265358979323846)/180;
 8001186:	4b4f      	ldr	r3, [pc, #316]	@ (80012c4 <main+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9e4 	bl	8000558 <__aeabi_f2d>
 8001190:	a341      	add	r3, pc, #260	@ (adr r3, 8001298 <main+0x198>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa37 	bl	8000608 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b48      	ldr	r3, [pc, #288]	@ (80012c8 <main+0x1c8>)
 80011a8:	f7ff fb58 	bl	800085c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fd20 	bl	8000bf8 <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a44      	ldr	r2, [pc, #272]	@ (80012cc <main+0x1cc>)
 80011bc:	6013      	str	r3, [r2, #0]
	((ai_float *)in_data)[i] = a;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4a38      	ldr	r2, [pc, #224]	@ (80012a4 <main+0x1a4>)
 80011c4:	4413      	add	r3, r2
 80011c6:	4a41      	ldr	r2, [pc, #260]	@ (80012cc <main+0x1cc>)
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	601a      	str	r2, [r3, #0]
      for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3301      	adds	r3, #1
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0d6      	beq.n	8001186 <main+0x86>
      }
      input++;
 80011d8:	4b3a      	ldr	r3, [pc, #232]	@ (80012c4 <main+0x1c4>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e6:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <main+0x1c4>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]

      // Get current timestamp
      timestamp = htim10.Instance->CNT;
 80011ec:	4b30      	ldr	r3, [pc, #192]	@ (80012b0 <main+0x1b0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f2:	4a37      	ldr	r2, [pc, #220]	@ (80012d0 <main+0x1d0>)
 80011f4:	6013      	str	r3, [r2, #0]

      // Perform inference
      nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 80011f6:	4b37      	ldr	r3, [pc, #220]	@ (80012d4 <main+0x1d4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a29      	ldr	r2, [pc, #164]	@ (80012a0 <main+0x1a0>)
 80011fc:	6811      	ldr	r1, [r2, #0]
 80011fe:	4a2a      	ldr	r2, [pc, #168]	@ (80012a8 <main+0x1a8>)
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f002 f988 	bl	8003518 <ai_sine_model_run>
 8001208:	4603      	mov	r3, r0
 800120a:	4a33      	ldr	r2, [pc, #204]	@ (80012d8 <main+0x1d8>)
 800120c:	6013      	str	r3, [r2, #0]
      if (nbatch != 1)
 800120e:	4b32      	ldr	r3, [pc, #200]	@ (80012d8 <main+0x1d8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d00e      	beq.n	8001234 <main+0x134>
	{
	  buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8001216:	4931      	ldr	r1, [pc, #196]	@ (80012dc <main+0x1dc>)
 8001218:	4826      	ldr	r0, [pc, #152]	@ (80012b4 <main+0x1b4>)
 800121a:	f004 fdcf 	bl	8005dbc <siprintf>
 800121e:	4603      	mov	r3, r0
 8001220:	4a25      	ldr	r2, [pc, #148]	@ (80012b8 <main+0x1b8>)
 8001222:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001224:	4b24      	ldr	r3, [pc, #144]	@ (80012b8 <main+0x1b8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29a      	uxth	r2, r3
 800122a:	2364      	movs	r3, #100	@ 0x64
 800122c:	4921      	ldr	r1, [pc, #132]	@ (80012b4 <main+0x1b4>)
 800122e:	4824      	ldr	r0, [pc, #144]	@ (80012c0 <main+0x1c0>)
 8001230:	f001 fc44 	bl	8002abc <HAL_UART_Transmit>
        }

      // Read output (predicted y) of neural network
      y_val = ((float *)out_data)[0];
 8001234:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <main+0x1ac>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a29      	ldr	r2, [pc, #164]	@ (80012e0 <main+0x1e0>)
 800123a:	6013      	str	r3, [r2, #0]

        // Print output of neural network along with inference time (microseconds)
      buf_len = sprintf(buf,
 800123c:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <main+0x1cc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f989 	bl	8000558 <__aeabi_f2d>
 8001246:	4604      	mov	r4, r0
 8001248:	460d      	mov	r5, r1
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <main+0x1e0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f982 	bl	8000558 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
                        "Input: %f | Output: %f | Duration: %lu\r\n",
			a,
			y_val,
			htim10.Instance->CNT - timestamp);
 8001258:	4915      	ldr	r1, [pc, #84]	@ (80012b0 <main+0x1b0>)
 800125a:	6809      	ldr	r1, [r1, #0]
 800125c:	6a48      	ldr	r0, [r1, #36]	@ 0x24
      buf_len = sprintf(buf,
 800125e:	491c      	ldr	r1, [pc, #112]	@ (80012d0 <main+0x1d0>)
 8001260:	6809      	ldr	r1, [r1, #0]
 8001262:	1a41      	subs	r1, r0, r1
 8001264:	9102      	str	r1, [sp, #8]
 8001266:	e9cd 2300 	strd	r2, r3, [sp]
 800126a:	4622      	mov	r2, r4
 800126c:	462b      	mov	r3, r5
 800126e:	491d      	ldr	r1, [pc, #116]	@ (80012e4 <main+0x1e4>)
 8001270:	4810      	ldr	r0, [pc, #64]	@ (80012b4 <main+0x1b4>)
 8001272:	f004 fda3 	bl	8005dbc <siprintf>
 8001276:	4603      	mov	r3, r0
 8001278:	4a0f      	ldr	r2, [pc, #60]	@ (80012b8 <main+0x1b8>)
 800127a:	6013      	str	r3, [r2, #0]
      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <main+0x1b8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	b29a      	uxth	r2, r3
 8001282:	2364      	movs	r3, #100	@ 0x64
 8001284:	490b      	ldr	r1, [pc, #44]	@ (80012b4 <main+0x1b4>)
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <main+0x1c0>)
 8001288:	f001 fc18 	bl	8002abc <HAL_UART_Transmit>

          // Wait before doing it again
      HAL_Delay(500);
 800128c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001290:	f000 fb32 	bl	80018f8 <HAL_Delay>
      for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001294:	e774      	b.n	8001180 <main+0x80>
 8001296:	bf00      	nop
 8001298:	54442d18 	.word	0x54442d18
 800129c:	400921fb 	.word	0x400921fb
 80012a0:	2000091c 	.word	0x2000091c
 80012a4:	200009f8 	.word	0x200009f8
 80012a8:	20000920 	.word	0x20000920
 80012ac:	20000a00 	.word	0x20000a00
 80012b0:	2000088c 	.word	0x2000088c
 80012b4:	20000924 	.word	0x20000924
 80012b8:	20000958 	.word	0x20000958
 80012bc:	0800956c 	.word	0x0800956c
 80012c0:	200008d4 	.word	0x200008d4
 80012c4:	2000096c 	.word	0x2000096c
 80012c8:	40668000 	.word	0x40668000
 80012cc:	20000970 	.word	0x20000970
 80012d0:	20000964 	.word	0x20000964
 80012d4:	20000a04 	.word	0x20000a04
 80012d8:	20000960 	.word	0x20000960
 80012dc:	08009588 	.word	0x08009588
 80012e0:	20000968 	.word	0x20000968
 80012e4:	080095ac 	.word	0x080095ac

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	@ 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	@ 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fdc3 	bl	8005e82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b28      	ldr	r3, [pc, #160]	@ (80013b4 <SystemClock_Config+0xcc>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	4a27      	ldr	r2, [pc, #156]	@ (80013b4 <SystemClock_Config+0xcc>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	@ 0x40
 800131c:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <SystemClock_Config+0xcc>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <SystemClock_Config+0xd0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001334:	4a20      	ldr	r2, [pc, #128]	@ (80013b8 <SystemClock_Config+0xd0>)
 8001336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <SystemClock_Config+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001350:	2310      	movs	r3, #16
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001354:	2302      	movs	r3, #2
 8001356:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001358:	2300      	movs	r3, #0
 800135a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800135c:	2308      	movs	r3, #8
 800135e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001360:	2350      	movs	r3, #80	@ 0x50
 8001362:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001364:	2302      	movs	r3, #2
 8001366:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001368:	2307      	movs	r3, #7
 800136a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fd85 	bl	8001e80 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800137c:	f000 f8ee 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2102      	movs	r1, #2
 800139c:	4618      	mov	r0, r3
 800139e:	f000 ffe7 	bl	8002370 <HAL_RCC_ClockConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013a8:	f000 f8d8 	bl	800155c <Error_Handler>
  }
}
 80013ac:	bf00      	nop
 80013ae:	3750      	adds	r7, #80	@ 0x50
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_CRC_Init+0x20>)
 80013c2:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <MX_CRC_Init+0x24>)
 80013c4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_CRC_Init+0x20>)
 80013c8:	f000 fb9f 	bl	8001b0a <HAL_CRC_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80013d2:	f000 f8c3 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000884 	.word	0x20000884
 80013e0:	40023000 	.word	0x40023000

080013e4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_TIM10_Init+0x40>)
 80013ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001428 <MX_TIM10_Init+0x44>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 80-1;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <MX_TIM10_Init+0x40>)
 80013f0:	224f      	movs	r2, #79	@ 0x4f
 80013f2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <MX_TIM10_Init+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <MX_TIM10_Init+0x40>)
 80013fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001400:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <MX_TIM10_Init+0x40>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_TIM10_Init+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	@ (8001424 <MX_TIM10_Init+0x40>)
 8001410:	f001 f9ce 	bl	80027b0 <HAL_TIM_Base_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800141a:	f000 f89f 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000088c 	.word	0x2000088c
 8001428:	40014400 	.word	0x40014400

0800142c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001430:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	@ (800147c <MX_USART2_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_USART2_UART_Init+0x4c>)
 8001464:	f001 fada 	bl	8002a1c <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f000 f875 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200008d4 	.word	0x200008d4
 800147c:	40004400 	.word	0x40004400

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <MX_GPIO_Init+0xd0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a2c      	ldr	r2, [pc, #176]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a25      	ldr	r2, [pc, #148]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <MX_GPIO_Init+0xd0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2120      	movs	r1, #32
 800150a:	4812      	ldr	r0, [pc, #72]	@ (8001554 <MX_GPIO_Init+0xd4>)
 800150c:	f000 fc9e 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001516:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800151a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	480c      	ldr	r0, [pc, #48]	@ (8001558 <MX_GPIO_Init+0xd8>)
 8001528:	f000 fb0c 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800152c:	2320      	movs	r3, #32
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4804      	ldr	r0, [pc, #16]	@ (8001554 <MX_GPIO_Init+0xd4>)
 8001544:	f000 fafe 	bl	8001b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020800 	.word	0x40020800

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <Error_Handler+0x8>

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a08      	ldr	r2, [pc, #32]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015a6:	2007      	movs	r0, #7
 80015a8:	f000 fa7c 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <HAL_CRC_MspInit+0x3c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10d      	bne.n	80015e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_CRC_MspInit+0x40>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a09      	ldr	r2, [pc, #36]	@ (80015f8 <HAL_CRC_MspInit+0x40>)
 80015d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <HAL_CRC_MspInit+0x40>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40023000 	.word	0x40023000
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0b      	ldr	r2, [pc, #44]	@ (8001638 <HAL_TIM_Base_MspInit+0x3c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d10d      	bne.n	800162a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <HAL_TIM_Base_MspInit+0x40>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	4a09      	ldr	r2, [pc, #36]	@ (800163c <HAL_TIM_Base_MspInit+0x40>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800161c:	6453      	str	r3, [r2, #68]	@ 0x44
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <HAL_TIM_Base_MspInit+0x40>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40014400 	.word	0x40014400
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	@ (80016c4 <HAL_UART_MspInit+0x84>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12b      	bne.n	80016ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <HAL_UART_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <HAL_UART_MspInit+0x88>)
 800166c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001670:	6413      	str	r3, [r2, #64]	@ 0x40
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_UART_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_UART_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a10      	ldr	r2, [pc, #64]	@ (80016c8 <HAL_UART_MspInit+0x88>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_UART_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800169a:	230c      	movs	r3, #12
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016aa:	2307      	movs	r3, #7
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <HAL_UART_MspInit+0x8c>)
 80016b6:	f000 fa45 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	@ 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40004400 	.word	0x40004400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001726:	f000 f8c7 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	@ (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f004 fbf2 	bl	8005f48 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20018000 	.word	0x20018000
 8001790:	00000800 	.word	0x00000800
 8001794:	20000a08 	.word	0x20000a08
 8001798:	20000be8 	.word	0x20000be8

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017c4:	f7ff ffea 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ca:	490d      	ldr	r1, [pc, #52]	@ (8001800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e0:	4c0a      	ldr	r4, [pc, #40]	@ (800180c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f004 fbb1 	bl	8005f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff fc85 	bl	8001100 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	20000868 	.word	0x20000868
  ldr r2, =_sidata
 8001804:	08009fa8 	.word	0x08009fa8
  ldr r2, =_sbss
 8001808:	20000868 	.word	0x20000868
  ldr r4, =_ebss
 800180c:	20000be8 	.word	0x20000be8

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f931 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fe8e 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f93b 	bl	8001af2 <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001894:	f000 f911 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	@ (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000008 	.word	0x20000008
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000a0c 	.word	0x20000a0c

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000a0c 	.word	0x20000a0c

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	@ (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	@ 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff47 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff5c 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff8e 	bl	80019f8 <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5d 	bl	80019a4 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffb0 	bl	8001a60 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e00e      	b.n	8001b3a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	795b      	ldrb	r3, [r3, #5]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fd43 	bl	80015b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e159      	b.n	8001e14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8148 	bne.w	8001e0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d005      	beq.n	8001b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d017      	beq.n	8001c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80a2 	beq.w	8001e0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b57      	ldr	r3, [pc, #348]	@ (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	4a56      	ldr	r2, [pc, #344]	@ (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cda:	4b54      	ldr	r3, [pc, #336]	@ (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce6:	4a52      	ldr	r2, [pc, #328]	@ (8001e30 <HAL_GPIO_Init+0x2ec>)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a49      	ldr	r2, [pc, #292]	@ (8001e34 <HAL_GPIO_Init+0x2f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x202>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a48      	ldr	r2, [pc, #288]	@ (8001e38 <HAL_GPIO_Init+0x2f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x1fe>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a47      	ldr	r2, [pc, #284]	@ (8001e3c <HAL_GPIO_Init+0x2f8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x1fa>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a46      	ldr	r2, [pc, #280]	@ (8001e40 <HAL_GPIO_Init+0x2fc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x1f6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a45      	ldr	r2, [pc, #276]	@ (8001e44 <HAL_GPIO_Init+0x300>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x1f2>
 8001d32:	2304      	movs	r3, #4
 8001d34:	e008      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d36:	2307      	movs	r3, #7
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e004      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x204>
 8001d46:	2300      	movs	r3, #0
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	f002 0203 	and.w	r2, r2, #3
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	4093      	lsls	r3, r2
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d58:	4935      	ldr	r1, [pc, #212]	@ (8001e30 <HAL_GPIO_Init+0x2ec>)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d66:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d90:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db4:	4a24      	ldr	r2, [pc, #144]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dba:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dde:	4a1a      	ldr	r2, [pc, #104]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de4:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e08:	4a0f      	ldr	r2, [pc, #60]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3301      	adds	r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b0f      	cmp	r3, #15
 8001e18:	f67f aea2 	bls.w	8001b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40013800 	.word	0x40013800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020400 	.word	0x40020400
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020c00 	.word	0x40020c00
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40013c00 	.word	0x40013c00

08001e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e68:	e003      	b.n	8001e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e267      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d075      	beq.n	8001f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9e:	4b88      	ldr	r3, [pc, #544]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b85      	ldr	r3, [pc, #532]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4b82      	ldr	r3, [pc, #520]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d05b      	beq.n	8001f88 <HAL_RCC_OscConfig+0x108>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d157      	bne.n	8001f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e242      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x74>
 8001ee6:	4b76      	ldr	r3, [pc, #472]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a75      	ldr	r2, [pc, #468]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b70      	ldr	r3, [pc, #448]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6f      	ldr	r2, [pc, #444]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6c      	ldr	r2, [pc, #432]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001f18:	4b69      	ldr	r3, [pc, #420]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a68      	ldr	r2, [pc, #416]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b66      	ldr	r3, [pc, #408]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a65      	ldr	r2, [pc, #404]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fcd2 	bl	80018e0 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fcce 	bl	80018e0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	@ 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e207      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b5b      	ldr	r3, [pc, #364]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xc0>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fcbe 	bl	80018e0 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fcba 	bl	80018e0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1f3      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b51      	ldr	r3, [pc, #324]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0xe8>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f96:	4b4a      	ldr	r3, [pc, #296]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b47      	ldr	r3, [pc, #284]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b44      	ldr	r3, [pc, #272]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b41      	ldr	r3, [pc, #260]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1c7      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4937      	ldr	r1, [pc, #220]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b34      	ldr	r3, [pc, #208]	@ (80020c4 <HAL_RCC_OscConfig+0x244>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fc73 	bl	80018e0 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff fc6f 	bl	80018e0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a8      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b2b      	ldr	r3, [pc, #172]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b28      	ldr	r3, [pc, #160]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4925      	ldr	r1, [pc, #148]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b24      	ldr	r3, [pc, #144]	@ (80020c4 <HAL_RCC_OscConfig+0x244>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fc52 	bl	80018e0 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff fc4e 	bl	80018e0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e187      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d036      	beq.n	80020d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_RCC_OscConfig+0x248>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fc32 	bl	80018e0 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff fc2e 	bl	80018e0 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e167      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <HAL_RCC_OscConfig+0x240>)
 8002094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x200>
 800209e:	e01b      	b.n	80020d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_RCC_OscConfig+0x248>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fc1b 	bl	80018e0 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	e00e      	b.n	80020cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ae:	f7ff fc17 	bl	80018e0 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d907      	bls.n	80020cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e150      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	42470000 	.word	0x42470000
 80020c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b88      	ldr	r3, [pc, #544]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ea      	bne.n	80020ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8097 	beq.w	8002214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b81      	ldr	r3, [pc, #516]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10f      	bne.n	8002116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b7d      	ldr	r3, [pc, #500]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	4a7c      	ldr	r2, [pc, #496]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	@ 0x40
 8002106:	4b7a      	ldr	r3, [pc, #488]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b77      	ldr	r3, [pc, #476]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b74      	ldr	r3, [pc, #464]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a73      	ldr	r2, [pc, #460]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7ff fbd7 	bl	80018e0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7ff fbd3 	bl	80018e0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e10c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b6a      	ldr	r3, [pc, #424]	@ (80022f4 <HAL_RCC_OscConfig+0x474>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x2ea>
 800215c:	4b64      	ldr	r3, [pc, #400]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002160:	4a63      	ldr	r2, [pc, #396]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	@ 0x70
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x30c>
 8002172:	4b5f      	ldr	r3, [pc, #380]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	4a5e      	ldr	r2, [pc, #376]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6713      	str	r3, [r2, #112]	@ 0x70
 800217e:	4b5c      	ldr	r3, [pc, #368]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	4a5b      	ldr	r2, [pc, #364]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	@ 0x70
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0x324>
 800218c:	4b58      	ldr	r3, [pc, #352]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002190:	4a57      	ldr	r2, [pc, #348]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6713      	str	r3, [r2, #112]	@ 0x70
 8002198:	4b55      	ldr	r3, [pc, #340]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219c:	4a54      	ldr	r2, [pc, #336]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 0304 	bic.w	r3, r3, #4
 80021a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff fb98 	bl	80018e0 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7ff fb94 	bl	80018e0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0cb      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	4b49      	ldr	r3, [pc, #292]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0ee      	beq.n	80021b4 <HAL_RCC_OscConfig+0x334>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7ff fb82 	bl	80018e0 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7ff fb7e 	bl	80018e0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0b5      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f6:	4b3e      	ldr	r3, [pc, #248]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ee      	bne.n	80021e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	4a38      	ldr	r2, [pc, #224]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002212:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a1 	beq.w	8002360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221e:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b08      	cmp	r3, #8
 8002228:	d05c      	beq.n	80022e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d141      	bne.n	80022b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_RCC_OscConfig+0x478>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fb52 	bl	80018e0 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff fb4e 	bl	80018e0 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e087      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	041b      	lsls	r3, r3, #16
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	491b      	ldr	r1, [pc, #108]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_RCC_OscConfig+0x478>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff fb27 	bl	80018e0 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff fb23 	bl	80018e0 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e05c      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x416>
 80022b4:	e054      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <HAL_RCC_OscConfig+0x478>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fb10 	bl	80018e0 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff fb0c 	bl	80018e0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e045      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x444>
 80022e2:	e03d      	b.n	8002360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e038      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <HAL_RCC_OscConfig+0x4ec>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d028      	beq.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d121      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d11a      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	4293      	cmp	r3, r2
 8002336:	d111      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0cc      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b68      	ldr	r3, [pc, #416]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d90c      	bls.n	80023ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b65      	ldr	r3, [pc, #404]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d044      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d119      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3b      	ldr	r3, [pc, #236]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e067      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b37      	ldr	r3, [pc, #220]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4934      	ldr	r1, [pc, #208]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7ff fa3e 	bl	80018e0 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7ff fa3a 	bl	80018e0 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d20c      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f99e 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	08009608 	.word	0x08009608
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002540:	b094      	sub	sp, #80	@ 0x50
 8002542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	647b      	str	r3, [r7, #68]	@ 0x44
 8002548:	2300      	movs	r3, #0
 800254a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800254c:	2300      	movs	r3, #0
 800254e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002554:	4b79      	ldr	r3, [pc, #484]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d00d      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x40>
 8002560:	2b08      	cmp	r3, #8
 8002562:	f200 80e1 	bhi.w	8002728 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x34>
 800256a:	2b04      	cmp	r3, #4
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x3a>
 800256e:	e0db      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b73      	ldr	r3, [pc, #460]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x204>)
 8002572:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002574:	e0db      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002576:	4b73      	ldr	r3, [pc, #460]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x208>)
 8002578:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800257a:	e0d8      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4b6f      	ldr	r3, [pc, #444]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002584:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002586:	4b6d      	ldr	r3, [pc, #436]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d063      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b6a      	ldr	r3, [pc, #424]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	2200      	movs	r2, #0
 800259a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800259c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800259e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025a6:	2300      	movs	r3, #0
 80025a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025ae:	4622      	mov	r2, r4
 80025b0:	462b      	mov	r3, r5
 80025b2:	f04f 0000 	mov.w	r0, #0
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	0159      	lsls	r1, r3, #5
 80025bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c0:	0150      	lsls	r0, r2, #5
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4621      	mov	r1, r4
 80025c8:	1a51      	subs	r1, r2, r1
 80025ca:	6139      	str	r1, [r7, #16]
 80025cc:	4629      	mov	r1, r5
 80025ce:	eb63 0301 	sbc.w	r3, r3, r1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025e0:	4659      	mov	r1, fp
 80025e2:	018b      	lsls	r3, r1, #6
 80025e4:	4651      	mov	r1, sl
 80025e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ea:	4651      	mov	r1, sl
 80025ec:	018a      	lsls	r2, r1, #6
 80025ee:	4651      	mov	r1, sl
 80025f0:	ebb2 0801 	subs.w	r8, r2, r1
 80025f4:	4659      	mov	r1, fp
 80025f6:	eb63 0901 	sbc.w	r9, r3, r1
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800260a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800260e:	4690      	mov	r8, r2
 8002610:	4699      	mov	r9, r3
 8002612:	4623      	mov	r3, r4
 8002614:	eb18 0303 	adds.w	r3, r8, r3
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	462b      	mov	r3, r5
 800261c:	eb49 0303 	adc.w	r3, r9, r3
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800262e:	4629      	mov	r1, r5
 8002630:	024b      	lsls	r3, r1, #9
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002638:	4621      	mov	r1, r4
 800263a:	024a      	lsls	r2, r1, #9
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002642:	2200      	movs	r2, #0
 8002644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800264c:	f7fe fb24 	bl	8000c98 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002658:	e058      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265a:	4b38      	ldr	r3, [pc, #224]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	2200      	movs	r2, #0
 8002662:	4618      	mov	r0, r3
 8002664:	4611      	mov	r1, r2
 8002666:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002670:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002674:	4642      	mov	r2, r8
 8002676:	464b      	mov	r3, r9
 8002678:	f04f 0000 	mov.w	r0, #0
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	0159      	lsls	r1, r3, #5
 8002682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002686:	0150      	lsls	r0, r2, #5
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4641      	mov	r1, r8
 800268e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002692:	4649      	mov	r1, r9
 8002694:	eb63 0b01 	sbc.w	fp, r3, r1
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026ac:	ebb2 040a 	subs.w	r4, r2, sl
 80026b0:	eb63 050b 	sbc.w	r5, r3, fp
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	00eb      	lsls	r3, r5, #3
 80026be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c2:	00e2      	lsls	r2, r4, #3
 80026c4:	4614      	mov	r4, r2
 80026c6:	461d      	mov	r5, r3
 80026c8:	4643      	mov	r3, r8
 80026ca:	18e3      	adds	r3, r4, r3
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	464b      	mov	r3, r9
 80026d0:	eb45 0303 	adc.w	r3, r5, r3
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e2:	4629      	mov	r1, r5
 80026e4:	028b      	lsls	r3, r1, #10
 80026e6:	4621      	mov	r1, r4
 80026e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ec:	4621      	mov	r1, r4
 80026ee:	028a      	lsls	r2, r1, #10
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026f6:	2200      	movs	r2, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	61fa      	str	r2, [r7, #28]
 80026fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002700:	f7fe faca 	bl	8000c98 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <HAL_RCC_GetSysClockFreq+0x200>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800271c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800271e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x204>)
 800272a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002730:	4618      	mov	r0, r3
 8002732:	3750      	adds	r7, #80	@ 0x50
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	00f42400 	.word	0x00f42400
 8002744:	007a1200 	.word	0x007a1200

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff0 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	08009618 	.word	0x08009618

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800278c:	f7ff ffdc 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0b5b      	lsrs	r3, r3, #13
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	@ (80027ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	08009618 	.word	0x08009618

080027b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e041      	b.n	8002846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe ff10 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f000 f888 	bl	8002904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d001      	beq.n	8002868 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e03c      	b.n	80028e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1e      	ldr	r2, [pc, #120]	@ (80028f0 <HAL_TIM_Base_Start+0xa0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d018      	beq.n	80028ac <HAL_TIM_Base_Start+0x5c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002882:	d013      	beq.n	80028ac <HAL_TIM_Base_Start+0x5c>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1a      	ldr	r2, [pc, #104]	@ (80028f4 <HAL_TIM_Base_Start+0xa4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00e      	beq.n	80028ac <HAL_TIM_Base_Start+0x5c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a19      	ldr	r2, [pc, #100]	@ (80028f8 <HAL_TIM_Base_Start+0xa8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d009      	beq.n	80028ac <HAL_TIM_Base_Start+0x5c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a17      	ldr	r2, [pc, #92]	@ (80028fc <HAL_TIM_Base_Start+0xac>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_TIM_Base_Start+0x5c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a16      	ldr	r2, [pc, #88]	@ (8002900 <HAL_TIM_Base_Start+0xb0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d111      	bne.n	80028d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d010      	beq.n	80028e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ce:	e007      	b.n	80028e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40000c00 	.word	0x40000c00
 8002900:	40014000 	.word	0x40014000

08002904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a3a      	ldr	r2, [pc, #232]	@ (8002a00 <TIM_Base_SetConfig+0xfc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00f      	beq.n	800293c <TIM_Base_SetConfig+0x38>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002922:	d00b      	beq.n	800293c <TIM_Base_SetConfig+0x38>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a37      	ldr	r2, [pc, #220]	@ (8002a04 <TIM_Base_SetConfig+0x100>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d007      	beq.n	800293c <TIM_Base_SetConfig+0x38>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a36      	ldr	r2, [pc, #216]	@ (8002a08 <TIM_Base_SetConfig+0x104>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d003      	beq.n	800293c <TIM_Base_SetConfig+0x38>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a35      	ldr	r2, [pc, #212]	@ (8002a0c <TIM_Base_SetConfig+0x108>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d108      	bne.n	800294e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a2b      	ldr	r2, [pc, #172]	@ (8002a00 <TIM_Base_SetConfig+0xfc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01b      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800295c:	d017      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <TIM_Base_SetConfig+0x100>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a27      	ldr	r2, [pc, #156]	@ (8002a08 <TIM_Base_SetConfig+0x104>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00f      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a26      	ldr	r2, [pc, #152]	@ (8002a0c <TIM_Base_SetConfig+0x108>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00b      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a25      	ldr	r2, [pc, #148]	@ (8002a10 <TIM_Base_SetConfig+0x10c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a24      	ldr	r2, [pc, #144]	@ (8002a14 <TIM_Base_SetConfig+0x110>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a23      	ldr	r2, [pc, #140]	@ (8002a18 <TIM_Base_SetConfig+0x114>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d108      	bne.n	80029a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a00 <TIM_Base_SetConfig+0xfc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d103      	bne.n	80029d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f023 0201 	bic.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	611a      	str	r2, [r3, #16]
  }
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40000800 	.word	0x40000800
 8002a0c:	40000c00 	.word	0x40000c00
 8002a10:	40014000 	.word	0x40014000
 8002a14:	40014400 	.word	0x40014400
 8002a18:	40014800 	.word	0x40014800

08002a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e042      	b.n	8002ab4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fdfc 	bl	8001640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	@ 0x24
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f973 	bl	8002d4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d175      	bne.n	8002bc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_UART_Transmit+0x2c>
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e06e      	b.n	8002bca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2221      	movs	r2, #33	@ 0x21
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002afa:	f7fe fef1 	bl	80018e0 <HAL_GetTick>
 8002afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	88fa      	ldrh	r2, [r7, #6]
 8002b04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	88fa      	ldrh	r2, [r7, #6]
 8002b0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b14:	d108      	bne.n	8002b28 <HAL_UART_Transmit+0x6c>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d104      	bne.n	8002b28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	e003      	b.n	8002b30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b30:	e02e      	b.n	8002b90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2180      	movs	r1, #128	@ 0x80
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f848 	bl	8002bd2 <UART_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e03a      	b.n	8002bca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10b      	bne.n	8002b72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	e007      	b.n	8002b82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1cb      	bne.n	8002b32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2140      	movs	r1, #64	@ 0x40
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f814 	bl	8002bd2 <UART_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e006      	b.n	8002bca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e000      	b.n	8002bca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be2:	e03b      	b.n	8002c5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bea:	d037      	beq.n	8002c5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bec:	f7fe fe78 	bl	80018e0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	6a3a      	ldr	r2, [r7, #32]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d302      	bcc.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e03a      	b.n	8002c7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d023      	beq.n	8002c5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b80      	cmp	r3, #128	@ 0x80
 8002c18:	d020      	beq.n	8002c5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b40      	cmp	r3, #64	@ 0x40
 8002c1e:	d01d      	beq.n	8002c5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d116      	bne.n	8002c5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f81d 	bl	8002c84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e00f      	b.n	8002c7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4013      	ands	r3, r2
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d0b4      	beq.n	8002be4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b095      	sub	sp, #84	@ 0x54
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c96:	e853 3f00 	ldrex	r3, [r3]
 8002c9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cac:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cb4:	e841 2300 	strex	r3, r2, [r1]
 8002cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e5      	bne.n	8002c8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3314      	adds	r3, #20
 8002cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ce0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce8:	e841 2300 	strex	r3, r2, [r1]
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d119      	bne.n	8002d30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 0310 	bic.w	r3, r3, #16
 8002d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d1c:	61ba      	str	r2, [r7, #24]
 8002d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6979      	ldr	r1, [r7, #20]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d3e:	bf00      	nop
 8002d40:	3754      	adds	r7, #84	@ 0x54
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d50:	b0c0      	sub	sp, #256	@ 0x100
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d68:	68d9      	ldr	r1, [r3, #12]
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	ea40 0301 	orr.w	r3, r0, r1
 8002d74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002da4:	f021 010c 	bic.w	r1, r1, #12
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002db2:	430b      	orrs	r3, r1
 8002db4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc6:	6999      	ldr	r1, [r3, #24]
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	ea40 0301 	orr.w	r3, r0, r1
 8002dd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b8f      	ldr	r3, [pc, #572]	@ (8003018 <UART_SetConfig+0x2cc>)
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d005      	beq.n	8002dec <UART_SetConfig+0xa0>
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b8d      	ldr	r3, [pc, #564]	@ (800301c <UART_SetConfig+0x2d0>)
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d104      	bne.n	8002df6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dec:	f7ff fccc 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 8002df0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002df4:	e003      	b.n	8002dfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002df6:	f7ff fcb3 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 8002dfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e08:	f040 810c 	bne.w	8003024 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e1e:	4622      	mov	r2, r4
 8002e20:	462b      	mov	r3, r5
 8002e22:	1891      	adds	r1, r2, r2
 8002e24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e26:	415b      	adcs	r3, r3
 8002e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e2e:	4621      	mov	r1, r4
 8002e30:	eb12 0801 	adds.w	r8, r2, r1
 8002e34:	4629      	mov	r1, r5
 8002e36:	eb43 0901 	adc.w	r9, r3, r1
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e4e:	4690      	mov	r8, r2
 8002e50:	4699      	mov	r9, r3
 8002e52:	4623      	mov	r3, r4
 8002e54:	eb18 0303 	adds.w	r3, r8, r3
 8002e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e5c:	462b      	mov	r3, r5
 8002e5e:	eb49 0303 	adc.w	r3, r9, r3
 8002e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	18db      	adds	r3, r3, r3
 8002e7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e80:	4613      	mov	r3, r2
 8002e82:	eb42 0303 	adc.w	r3, r2, r3
 8002e86:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e90:	f7fd ff02 	bl	8000c98 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4b61      	ldr	r3, [pc, #388]	@ (8003020 <UART_SetConfig+0x2d4>)
 8002e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	011c      	lsls	r4, r3, #4
 8002ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002eac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002eb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002eb4:	4642      	mov	r2, r8
 8002eb6:	464b      	mov	r3, r9
 8002eb8:	1891      	adds	r1, r2, r2
 8002eba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ebc:	415b      	adcs	r3, r3
 8002ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ec0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	eb12 0a01 	adds.w	sl, r2, r1
 8002eca:	4649      	mov	r1, r9
 8002ecc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002edc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee4:	4692      	mov	sl, r2
 8002ee6:	469b      	mov	fp, r3
 8002ee8:	4643      	mov	r3, r8
 8002eea:	eb1a 0303 	adds.w	r3, sl, r3
 8002eee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f10:	460b      	mov	r3, r1
 8002f12:	18db      	adds	r3, r3, r3
 8002f14:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f16:	4613      	mov	r3, r2
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f26:	f7fd feb7 	bl	8000c98 <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4b3b      	ldr	r3, [pc, #236]	@ (8003020 <UART_SetConfig+0x2d4>)
 8002f32:	fba3 2301 	umull	r2, r3, r3, r1
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2264      	movs	r2, #100	@ 0x64
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	1acb      	subs	r3, r1, r3
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f46:	4b36      	ldr	r3, [pc, #216]	@ (8003020 <UART_SetConfig+0x2d4>)
 8002f48:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f54:	441c      	add	r4, r3
 8002f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	1891      	adds	r1, r2, r2
 8002f6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f70:	415b      	adcs	r3, r3
 8002f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f78:	4641      	mov	r1, r8
 8002f7a:	1851      	adds	r1, r2, r1
 8002f7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f7e:	4649      	mov	r1, r9
 8002f80:	414b      	adcs	r3, r1
 8002f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f90:	4659      	mov	r1, fp
 8002f92:	00cb      	lsls	r3, r1, #3
 8002f94:	4651      	mov	r1, sl
 8002f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	00ca      	lsls	r2, r1, #3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fac:	464b      	mov	r3, r9
 8002fae:	460a      	mov	r2, r1
 8002fb0:	eb42 0303 	adc.w	r3, r2, r3
 8002fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fcc:	460b      	mov	r3, r1
 8002fce:	18db      	adds	r3, r3, r3
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	eb42 0303 	adc.w	r3, r2, r3
 8002fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002fe2:	f7fd fe59 	bl	8000c98 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4b0d      	ldr	r3, [pc, #52]	@ (8003020 <UART_SetConfig+0x2d4>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	@ 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	3332      	adds	r3, #50	@ 0x32
 8002ffe:	4a08      	ldr	r2, [pc, #32]	@ (8003020 <UART_SetConfig+0x2d4>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 0207 	and.w	r2, r3, #7
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4422      	add	r2, r4
 8003012:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003014:	e106      	b.n	8003224 <UART_SetConfig+0x4d8>
 8003016:	bf00      	nop
 8003018:	40011000 	.word	0x40011000
 800301c:	40011400 	.word	0x40011400
 8003020:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800302e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003032:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003036:	4642      	mov	r2, r8
 8003038:	464b      	mov	r3, r9
 800303a:	1891      	adds	r1, r2, r2
 800303c:	6239      	str	r1, [r7, #32]
 800303e:	415b      	adcs	r3, r3
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
 8003042:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003046:	4641      	mov	r1, r8
 8003048:	1854      	adds	r4, r2, r1
 800304a:	4649      	mov	r1, r9
 800304c:	eb43 0501 	adc.w	r5, r3, r1
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	00eb      	lsls	r3, r5, #3
 800305a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800305e:	00e2      	lsls	r2, r4, #3
 8003060:	4614      	mov	r4, r2
 8003062:	461d      	mov	r5, r3
 8003064:	4643      	mov	r3, r8
 8003066:	18e3      	adds	r3, r4, r3
 8003068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800306c:	464b      	mov	r3, r9
 800306e:	eb45 0303 	adc.w	r3, r5, r3
 8003072:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003082:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003092:	4629      	mov	r1, r5
 8003094:	008b      	lsls	r3, r1, #2
 8003096:	4621      	mov	r1, r4
 8003098:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800309c:	4621      	mov	r1, r4
 800309e:	008a      	lsls	r2, r1, #2
 80030a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030a4:	f7fd fdf8 	bl	8000c98 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4b60      	ldr	r3, [pc, #384]	@ (8003230 <UART_SetConfig+0x4e4>)
 80030ae:	fba3 2302 	umull	r2, r3, r3, r2
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	011c      	lsls	r4, r3, #4
 80030b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030c8:	4642      	mov	r2, r8
 80030ca:	464b      	mov	r3, r9
 80030cc:	1891      	adds	r1, r2, r2
 80030ce:	61b9      	str	r1, [r7, #24]
 80030d0:	415b      	adcs	r3, r3
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d8:	4641      	mov	r1, r8
 80030da:	1851      	adds	r1, r2, r1
 80030dc:	6139      	str	r1, [r7, #16]
 80030de:	4649      	mov	r1, r9
 80030e0:	414b      	adcs	r3, r1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f0:	4659      	mov	r1, fp
 80030f2:	00cb      	lsls	r3, r1, #3
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fa:	4651      	mov	r1, sl
 80030fc:	00ca      	lsls	r2, r1, #3
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	4603      	mov	r3, r0
 8003104:	4642      	mov	r2, r8
 8003106:	189b      	adds	r3, r3, r2
 8003108:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800310c:	464b      	mov	r3, r9
 800310e:	460a      	mov	r2, r1
 8003110:	eb42 0303 	adc.w	r3, r2, r3
 8003114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003122:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003130:	4649      	mov	r1, r9
 8003132:	008b      	lsls	r3, r1, #2
 8003134:	4641      	mov	r1, r8
 8003136:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800313a:	4641      	mov	r1, r8
 800313c:	008a      	lsls	r2, r1, #2
 800313e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003142:	f7fd fda9 	bl	8000c98 <__aeabi_uldivmod>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4611      	mov	r1, r2
 800314c:	4b38      	ldr	r3, [pc, #224]	@ (8003230 <UART_SetConfig+0x4e4>)
 800314e:	fba3 2301 	umull	r2, r3, r3, r1
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2264      	movs	r2, #100	@ 0x64
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	1acb      	subs	r3, r1, r3
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	3332      	adds	r3, #50	@ 0x32
 8003160:	4a33      	ldr	r2, [pc, #204]	@ (8003230 <UART_SetConfig+0x4e4>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800316c:	441c      	add	r4, r3
 800316e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003172:	2200      	movs	r2, #0
 8003174:	673b      	str	r3, [r7, #112]	@ 0x70
 8003176:	677a      	str	r2, [r7, #116]	@ 0x74
 8003178:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800317c:	4642      	mov	r2, r8
 800317e:	464b      	mov	r3, r9
 8003180:	1891      	adds	r1, r2, r2
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	415b      	adcs	r3, r3
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800318c:	4641      	mov	r1, r8
 800318e:	1851      	adds	r1, r2, r1
 8003190:	6039      	str	r1, [r7, #0]
 8003192:	4649      	mov	r1, r9
 8003194:	414b      	adcs	r3, r1
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031a4:	4659      	mov	r1, fp
 80031a6:	00cb      	lsls	r3, r1, #3
 80031a8:	4651      	mov	r1, sl
 80031aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ae:	4651      	mov	r1, sl
 80031b0:	00ca      	lsls	r2, r1, #3
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	4642      	mov	r2, r8
 80031ba:	189b      	adds	r3, r3, r2
 80031bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031be:	464b      	mov	r3, r9
 80031c0:	460a      	mov	r2, r1
 80031c2:	eb42 0303 	adc.w	r3, r2, r3
 80031c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80031d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80031e0:	4649      	mov	r1, r9
 80031e2:	008b      	lsls	r3, r1, #2
 80031e4:	4641      	mov	r1, r8
 80031e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ea:	4641      	mov	r1, r8
 80031ec:	008a      	lsls	r2, r1, #2
 80031ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80031f2:	f7fd fd51 	bl	8000c98 <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003230 <UART_SetConfig+0x4e4>)
 80031fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	2164      	movs	r1, #100	@ 0x64
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	3332      	adds	r3, #50	@ 0x32
 800320e:	4a08      	ldr	r2, [pc, #32]	@ (8003230 <UART_SetConfig+0x4e4>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4422      	add	r2, r4
 8003222:	609a      	str	r2, [r3, #8]
}
 8003224:	bf00      	nop
 8003226:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800322a:	46bd      	mov	sp, r7
 800322c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003230:	51eb851f 	.word	0x51eb851f

08003234 <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	4825      	ldr	r0, [pc, #148]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 8003244:	f000 fa7c 	bl	8003740 <ai_platform_get_activations_map>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d039      	beq.n	80032c2 <sine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_input0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 800324e:	4b22      	ldr	r3, [pc, #136]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	333c      	adds	r3, #60	@ 0x3c
 8003254:	4a21      	ldr	r2, [pc, #132]	@ (80032dc <sine_model_configure_activations+0xa8>)
 8003256:	6093      	str	r3, [r2, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8003258:	4b1f      	ldr	r3, [pc, #124]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	333c      	adds	r3, #60	@ 0x3c
 800325e:	4a1f      	ldr	r2, [pc, #124]	@ (80032dc <sine_model_configure_activations+0xa8>)
 8003260:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8003262:	4b1d      	ldr	r3, [pc, #116]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3340      	adds	r3, #64	@ 0x40
 8003268:	4a1d      	ldr	r2, [pc, #116]	@ (80032e0 <sine_model_configure_activations+0xac>)
 800326a:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 800326c:	4b1a      	ldr	r3, [pc, #104]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3340      	adds	r3, #64	@ 0x40
 8003272:	4a1b      	ldr	r2, [pc, #108]	@ (80032e0 <sine_model_configure_activations+0xac>)
 8003274:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8003276:	4b18      	ldr	r3, [pc, #96]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3340      	adds	r3, #64	@ 0x40
 800327c:	4a19      	ldr	r2, [pc, #100]	@ (80032e4 <sine_model_configure_activations+0xb0>)
 800327e:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8003280:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3340      	adds	r3, #64	@ 0x40
 8003286:	4a17      	ldr	r2, [pc, #92]	@ (80032e4 <sine_model_configure_activations+0xb0>)
 8003288:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a16      	ldr	r2, [pc, #88]	@ (80032e8 <sine_model_configure_activations+0xb4>)
 8003290:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8003292:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a14      	ldr	r2, [pc, #80]	@ (80032e8 <sine_model_configure_activations+0xb4>)
 8003298:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 800329a:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3340      	adds	r3, #64	@ 0x40
 80032a0:	4a12      	ldr	r2, [pc, #72]	@ (80032ec <sine_model_configure_activations+0xb8>)
 80032a2:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 80032a4:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3340      	adds	r3, #64	@ 0x40
 80032aa:	4a10      	ldr	r2, [pc, #64]	@ (80032ec <sine_model_configure_activations+0xb8>)
 80032ac:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 80032ae:	4b0a      	ldr	r3, [pc, #40]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a0f      	ldr	r2, [pc, #60]	@ (80032f0 <sine_model_configure_activations+0xbc>)
 80032b4:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 80032b6:	4b08      	ldr	r3, [pc, #32]	@ (80032d8 <sine_model_configure_activations+0xa4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <sine_model_configure_activations+0xbc>)
 80032bc:	60d3      	str	r3, [r2, #12]
    return true;
 80032be:	2301      	movs	r3, #1
 80032c0:	e005      	b.n	80032ce <sine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80032c2:	2213      	movs	r2, #19
 80032c4:	2130      	movs	r1, #48	@ 0x30
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fa8e 	bl	80037e8 <ai_platform_network_set_error>
  return false;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000a10 	.word	0x20000a10
 80032dc:	2000000c 	.word	0x2000000c
 80032e0:	2000001c 	.word	0x2000001c
 80032e4:	2000002c 	.word	0x2000002c
 80032e8:	2000003c 	.word	0x2000003c
 80032ec:	2000004c 	.word	0x2000004c
 80032f0:	2000005c 	.word	0x2000005c

080032f4 <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	2101      	movs	r1, #1
 8003302:	483b      	ldr	r0, [pc, #236]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 8003304:	f000 f9c8 	bl	8003698 <ai_platform_get_weights_map>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d065      	beq.n	80033da <sine_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800330e:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <sine_model_configure_weights+0x100>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003316:	4a37      	ldr	r2, [pc, #220]	@ (80033f4 <sine_model_configure_weights+0x100>)
 8003318:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 800331a:	4b35      	ldr	r3, [pc, #212]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a35      	ldr	r2, [pc, #212]	@ (80033f4 <sine_model_configure_weights+0x100>)
 8003320:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 8003322:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a33      	ldr	r2, [pc, #204]	@ (80033f4 <sine_model_configure_weights+0x100>)
 8003328:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800332a:	4b33      	ldr	r3, [pc, #204]	@ (80033f8 <sine_model_configure_weights+0x104>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003332:	4a31      	ldr	r2, [pc, #196]	@ (80033f8 <sine_model_configure_weights+0x104>)
 8003334:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 8003336:	4b2e      	ldr	r3, [pc, #184]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3340      	adds	r3, #64	@ 0x40
 800333c:	4a2e      	ldr	r2, [pc, #184]	@ (80033f8 <sine_model_configure_weights+0x104>)
 800333e:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 8003340:	4b2b      	ldr	r3, [pc, #172]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3340      	adds	r3, #64	@ 0x40
 8003346:	4a2c      	ldr	r2, [pc, #176]	@ (80033f8 <sine_model_configure_weights+0x104>)
 8003348:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800334a:	4b2c      	ldr	r3, [pc, #176]	@ (80033fc <sine_model_configure_weights+0x108>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003352:	4a2a      	ldr	r2, [pc, #168]	@ (80033fc <sine_model_configure_weights+0x108>)
 8003354:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 128);
 8003356:	4b26      	ldr	r3, [pc, #152]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3380      	adds	r3, #128	@ 0x80
 800335c:	4a27      	ldr	r2, [pc, #156]	@ (80033fc <sine_model_configure_weights+0x108>)
 800335e:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 128);
 8003360:	4b23      	ldr	r3, [pc, #140]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3380      	adds	r3, #128	@ 0x80
 8003366:	4a25      	ldr	r2, [pc, #148]	@ (80033fc <sine_model_configure_weights+0x108>)
 8003368:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800336a:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <sine_model_configure_weights+0x10c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003372:	4a23      	ldr	r2, [pc, #140]	@ (8003400 <sine_model_configure_weights+0x10c>)
 8003374:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1152);
 8003376:	4b1e      	ldr	r3, [pc, #120]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800337e:	4a20      	ldr	r2, [pc, #128]	@ (8003400 <sine_model_configure_weights+0x10c>)
 8003380:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1152);
 8003382:	4b1b      	ldr	r3, [pc, #108]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800338a:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <sine_model_configure_weights+0x10c>)
 800338c:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800338e:	4b1d      	ldr	r3, [pc, #116]	@ (8003404 <sine_model_configure_weights+0x110>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003396:	4a1b      	ldr	r2, [pc, #108]	@ (8003404 <sine_model_configure_weights+0x110>)
 8003398:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 1216);
 800339a:	4b15      	ldr	r3, [pc, #84]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80033a2:	4a18      	ldr	r2, [pc, #96]	@ (8003404 <sine_model_configure_weights+0x110>)
 80033a4:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1216);
 80033a6:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80033ae:	4a15      	ldr	r2, [pc, #84]	@ (8003404 <sine_model_configure_weights+0x110>)
 80033b0:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80033b2:	4b15      	ldr	r3, [pc, #84]	@ (8003408 <sine_model_configure_weights+0x114>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033ba:	4a13      	ldr	r2, [pc, #76]	@ (8003408 <sine_model_configure_weights+0x114>)
 80033bc:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1280);
 80033be:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c6:	4a10      	ldr	r2, [pc, #64]	@ (8003408 <sine_model_configure_weights+0x114>)
 80033c8:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1280);
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <sine_model_configure_weights+0xfc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003408 <sine_model_configure_weights+0x114>)
 80033d4:	60d3      	str	r3, [r2, #12]
    return true;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e005      	b.n	80033e6 <sine_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80033da:	2212      	movs	r2, #18
 80033dc:	2130      	movs	r1, #48	@ 0x30
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa02 	bl	80037e8 <ai_platform_network_set_error>
  return false;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000a14 	.word	0x20000a14
 80033f4:	2000006c 	.word	0x2000006c
 80033f8:	2000007c 	.word	0x2000007c
 80033fc:	2000008c 	.word	0x2000008c
 8003400:	2000009c 	.word	0x2000009c
 8003404:	200000ac 	.word	0x200000ac
 8003408:	200000bc 	.word	0x200000bc

0800340c <ai_sine_model_create>:


AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af02      	add	r7, sp, #8
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8003416:	2300      	movs	r3, #0
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	2305      	movs	r3, #5
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2301      	movs	r3, #1
 8003420:	4a04      	ldr	r2, [pc, #16]	@ (8003434 <ai_sine_model_create+0x28>)
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 facf 	bl	80039c8 <ai_platform_network_create>
 800342a:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	200005f0 	.word	0x200005f0

08003438 <ai_sine_model_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_sine_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <ai_sine_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8003448:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <ai_sine_model_inputs_get+0x2c>)
 800344a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a06      	ldr	r2, [pc, #24]	@ (8003468 <ai_sine_model_inputs_get+0x30>)
 8003450:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8003452:	6839      	ldr	r1, [r7, #0]
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f9cd 	bl	80037f4 <ai_platform_inputs_get>
 800345a:	4603      	mov	r3, r0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	200005f0 	.word	0x200005f0
 8003468:	a1c00100 	.word	0xa1c00100

0800346c <ai_sine_model_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_sine_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <ai_sine_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <ai_sine_model_outputs_get+0x2c>)
 800347e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a06      	ldr	r2, [pc, #24]	@ (800349c <ai_sine_model_outputs_get+0x30>)
 8003484:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fa29 	bl	80038e0 <ai_platform_outputs_get>
 800348e:	4603      	mov	r3, r0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	200005f0 	.word	0x200005f0
 800349c:	a1c00100 	.word	0xa1c00100

080034a0 <ai_sine_model_init>:


AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 facd 	bl	8003a4c <ai_platform_network_init>
 80034b2:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 80034b4:	2301      	movs	r3, #1
 80034b6:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <ai_sine_model_init+0x22>
 80034be:	2300      	movs	r3, #0
 80034c0:	e026      	b.n	8003510 <ai_sine_model_init+0x70>
  ok &= sine_model_configure_weights(net_ctx, params);
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f7ff ff15 	bl	80032f4 <sine_model_configure_weights>
 80034ca:	4603      	mov	r3, r0
 80034cc:	461a      	mov	r2, r3
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf14      	ite	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	2300      	moveq	r3, #0
 80034da:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 80034dc:	6839      	ldr	r1, [r7, #0]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff fea8 	bl	8003234 <sine_model_configure_activations>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	7afb      	ldrb	r3, [r7, #11]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fb76 	bl	8003be8 <ai_platform_network_post_init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	461a      	mov	r2, r3
 8003500:	7afb      	ldrb	r3, [r7, #11]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800350e:	7afb      	ldrb	r3, [r7, #11]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fb8d 	bl	8003c48 <ai_platform_network_process>
 800352e:	4603      	mov	r3, r0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <ai_sine_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_activations_buffer_get(const ai_handle ptr)
{
 8003538:	b4b0      	push	{r4, r5, r7}
 800353a:	b08f      	sub	sp, #60	@ 0x3c
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8003542:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <ai_sine_model_data_activations_buffer_get+0x60>)
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
 800354e:	2300      	movs	r3, #0
 8003550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003552:	2380      	movs	r3, #128	@ 0x80
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	2204      	movs	r2, #4
 8003560:	f362 231f 	bfi	r3, r2, #8, #24
 8003564:	633b      	str	r3, [r7, #48]	@ 0x30
 8003566:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <ai_sine_model_data_activations_buffer_get+0x64>)
 8003568:	f107 040c 	add.w	r4, r7, #12
 800356c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800356e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003572:	f107 030c 	add.w	r3, r7, #12
 8003576:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	461d      	mov	r5, r3
 800357c:	f107 041c 	add.w	r4, r7, #28
 8003580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003584:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003588:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	373c      	adds	r7, #60	@ 0x3c
 8003590:	46bd      	mov	sp, r7
 8003592:	bcb0      	pop	{r4, r5, r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	00040440 	.word	0x00040440
 800359c:	080095d8 	.word	0x080095d8

080035a0 <ai_sine_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_weights_buffer_get(const ai_handle ptr)
{
 80035a0:	b4b0      	push	{r4, r5, r7}
 80035a2:	b08f      	sub	sp, #60	@ 0x3c
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80035aa:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <ai_sine_model_data_weights_buffer_get+0x60>)
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	2300      	movs	r3, #0
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b6:	2300      	movs	r3, #0
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ba:	f240 5304 	movw	r3, #1284	@ 0x504
 80035be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80035c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c8:	2204      	movs	r2, #4
 80035ca:	f362 231f 	bfi	r3, r2, #8, #24
 80035ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <ai_sine_model_data_weights_buffer_get+0x64>)
 80035d2:	f107 040c 	add.w	r4, r7, #12
 80035d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035dc:	f107 030c 	add.w	r3, r7, #12
 80035e0:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	461d      	mov	r5, r3
 80035e6:	f107 041c 	add.w	r4, r7, #28
 80035ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80035f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	373c      	adds	r7, #60	@ 0x3c
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bcb0      	pop	{r4, r5, r7}
 80035fe:	4770      	bx	lr
 8003600:	40040440 	.word	0x40040440
 8003604:	080095e8 	.word	0x080095e8

08003608 <ai_sine_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_sine_model_weights_table);
 800360c:	4b02      	ldr	r3, [pc, #8]	@ (8003618 <ai_sine_model_data_weights_get+0x10>)

}
 800360e:	4618      	mov	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	20000694 	.word	0x20000694

0800361c <ai_buffer_get_size>:
 800361c:	b378      	cbz	r0, 800367e <ai_buffer_get_size+0x62>
 800361e:	b410      	push	{r4}
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <ai_buffer_get_size+0x64>)
 8003624:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8003628:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800362c:	4293      	cmp	r3, r2
 800362e:	d01e      	beq.n	800366e <ai_buffer_get_size+0x52>
 8003630:	6984      	ldr	r4, [r0, #24]
 8003632:	6862      	ldr	r2, [r4, #4]
 8003634:	7d03      	ldrb	r3, [r0, #20]
 8003636:	6941      	ldr	r1, [r0, #20]
 8003638:	f1a3 0301 	sub.w	r3, r3, #1
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8003646:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800364a:	da0b      	bge.n	8003664 <ai_buffer_get_size+0x48>
 800364c:	2b01      	cmp	r3, #1
 800364e:	d102      	bne.n	8003656 <ai_buffer_get_size+0x3a>
 8003650:	2802      	cmp	r0, #2
 8003652:	d007      	beq.n	8003664 <ai_buffer_get_size+0x48>
 8003654:	2302      	movs	r3, #2
 8003656:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800365a:	3301      	adds	r3, #1
 800365c:	4298      	cmp	r0, r3
 800365e:	fb01 f202 	mul.w	r2, r1, r2
 8003662:	d1f3      	bne.n	800364c <ai_buffer_get_size+0x30>
 8003664:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	2900      	cmp	r1, #0
 8003670:	d0de      	beq.n	8003630 <ai_buffer_get_size+0x14>
 8003672:	6984      	ldr	r4, [r0, #24]
 8003674:	6862      	ldr	r2, [r4, #4]
 8003676:	321f      	adds	r2, #31
 8003678:	f022 021f 	bic.w	r2, r2, #31
 800367c:	e7da      	b.n	8003634 <ai_buffer_get_size+0x18>
 800367e:	4770      	bx	lr
 8003680:	000400c0 	.word	0x000400c0

08003684 <ai_buffer_array_sane>:
 8003684:	b138      	cbz	r0, 8003696 <ai_buffer_array_sane+0x12>
 8003686:	6843      	ldr	r3, [r0, #4]
 8003688:	b123      	cbz	r3, 8003694 <ai_buffer_array_sane+0x10>
 800368a:	8840      	ldrh	r0, [r0, #2]
 800368c:	3800      	subs	r0, #0
 800368e:	bf18      	it	ne
 8003690:	2001      	movne	r0, #1
 8003692:	4770      	bx	lr
 8003694:	4618      	mov	r0, r3
 8003696:	4770      	bx	lr

08003698 <ai_platform_get_weights_map>:
 8003698:	2a00      	cmp	r2, #0
 800369a:	d037      	beq.n	800370c <ai_platform_get_weights_map+0x74>
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	4604      	mov	r4, r0
 80036a0:	b1a0      	cbz	r0, 80036cc <ai_platform_get_weights_map+0x34>
 80036a2:	460f      	mov	r7, r1
 80036a4:	b191      	cbz	r1, 80036cc <ai_platform_get_weights_map+0x34>
 80036a6:	4b25      	ldr	r3, [pc, #148]	@ (800373c <ai_platform_get_weights_map+0xa4>)
 80036a8:	6810      	ldr	r0, [r2, #0]
 80036aa:	4298      	cmp	r0, r3
 80036ac:	4615      	mov	r5, r2
 80036ae:	d00f      	beq.n	80036d0 <ai_platform_get_weights_map+0x38>
 80036b0:	6855      	ldr	r5, [r2, #4]
 80036b2:	b15d      	cbz	r5, 80036cc <ai_platform_get_weights_map+0x34>
 80036b4:	682e      	ldr	r6, [r5, #0]
 80036b6:	429e      	cmp	r6, r3
 80036b8:	d02a      	beq.n	8003710 <ai_platform_get_weights_map+0x78>
 80036ba:	f1a1 0001 	sub.w	r0, r1, #1
 80036be:	6025      	str	r5, [r4, #0]
 80036c0:	fab0 f080 	clz	r0, r0
 80036c4:	0940      	lsrs	r0, r0, #5
 80036c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c8:	42a7      	cmp	r7, r4
 80036ca:	d034      	beq.n	8003736 <ai_platform_get_weights_map+0x9e>
 80036cc:	2000      	movs	r0, #0
 80036ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d0:	1d10      	adds	r0, r2, #4
 80036d2:	f7ff ffd7 	bl	8003684 <ai_buffer_array_sane>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d0f8      	beq.n	80036cc <ai_platform_get_weights_map+0x34>
 80036da:	88eb      	ldrh	r3, [r5, #6]
 80036dc:	429f      	cmp	r7, r3
 80036de:	d1f5      	bne.n	80036cc <ai_platform_get_weights_map+0x34>
 80036e0:	f04f 0c00 	mov.w	ip, #0
 80036e4:	1f20      	subs	r0, r4, #4
 80036e6:	46e6      	mov	lr, ip
 80036e8:	68ab      	ldr	r3, [r5, #8]
 80036ea:	4463      	add	r3, ip
 80036ec:	f10c 0c1c 	add.w	ip, ip, #28
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	b12b      	cbz	r3, 8003700 <ai_platform_get_weights_map+0x68>
 80036f4:	f10e 0e01 	add.w	lr, lr, #1
 80036f8:	4577      	cmp	r7, lr
 80036fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80036fe:	d1f3      	bne.n	80036e8 <ai_platform_get_weights_map+0x50>
 8003700:	eba7 000e 	sub.w	r0, r7, lr
 8003704:	fab0 f080 	clz	r0, r0
 8003708:	0940      	lsrs	r0, r0, #5
 800370a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800370c:	2000      	movs	r0, #0
 800370e:	4770      	bx	lr
 8003710:	1f20      	subs	r0, r4, #4
 8003712:	462a      	mov	r2, r5
 8003714:	2400      	movs	r4, #0
 8003716:	e000      	b.n	800371a <ai_platform_get_weights_map+0x82>
 8003718:	461c      	mov	r4, r3
 800371a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800371e:	42b3      	cmp	r3, r6
 8003720:	d0d2      	beq.n	80036c8 <ai_platform_get_weights_map+0x30>
 8003722:	f840 3f04 	str.w	r3, [r0, #4]!
 8003726:	1c63      	adds	r3, r4, #1
 8003728:	429f      	cmp	r7, r3
 800372a:	d1f5      	bne.n	8003718 <ai_platform_get_weights_map+0x80>
 800372c:	3402      	adds	r4, #2
 800372e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003732:	42b3      	cmp	r3, r6
 8003734:	d1ca      	bne.n	80036cc <ai_platform_get_weights_map+0x34>
 8003736:	2001      	movs	r0, #1
 8003738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800373a:	bf00      	nop
 800373c:	a1facade 	.word	0xa1facade

08003740 <ai_platform_get_activations_map>:
 8003740:	2a00      	cmp	r2, #0
 8003742:	d038      	beq.n	80037b6 <ai_platform_get_activations_map+0x76>
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	4604      	mov	r4, r0
 8003748:	b1a0      	cbz	r0, 8003774 <ai_platform_get_activations_map+0x34>
 800374a:	460f      	mov	r7, r1
 800374c:	b191      	cbz	r1, 8003774 <ai_platform_get_activations_map+0x34>
 800374e:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <ai_platform_get_activations_map+0xa4>)
 8003750:	6810      	ldr	r0, [r2, #0]
 8003752:	4298      	cmp	r0, r3
 8003754:	4615      	mov	r5, r2
 8003756:	d00f      	beq.n	8003778 <ai_platform_get_activations_map+0x38>
 8003758:	6a15      	ldr	r5, [r2, #32]
 800375a:	b15d      	cbz	r5, 8003774 <ai_platform_get_activations_map+0x34>
 800375c:	682e      	ldr	r6, [r5, #0]
 800375e:	429e      	cmp	r6, r3
 8003760:	d02b      	beq.n	80037ba <ai_platform_get_activations_map+0x7a>
 8003762:	f1a1 0001 	sub.w	r0, r1, #1
 8003766:	6025      	str	r5, [r4, #0]
 8003768:	fab0 f080 	clz	r0, r0
 800376c:	0940      	lsrs	r0, r0, #5
 800376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003770:	42a7      	cmp	r7, r4
 8003772:	d035      	beq.n	80037e0 <ai_platform_get_activations_map+0xa0>
 8003774:	2000      	movs	r0, #0
 8003776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003778:	f102 000c 	add.w	r0, r2, #12
 800377c:	f7ff ff82 	bl	8003684 <ai_buffer_array_sane>
 8003780:	2800      	cmp	r0, #0
 8003782:	d0f7      	beq.n	8003774 <ai_platform_get_activations_map+0x34>
 8003784:	89eb      	ldrh	r3, [r5, #14]
 8003786:	429f      	cmp	r7, r3
 8003788:	d1f4      	bne.n	8003774 <ai_platform_get_activations_map+0x34>
 800378a:	f04f 0c00 	mov.w	ip, #0
 800378e:	1f20      	subs	r0, r4, #4
 8003790:	46e6      	mov	lr, ip
 8003792:	692b      	ldr	r3, [r5, #16]
 8003794:	4463      	add	r3, ip
 8003796:	f10c 0c1c 	add.w	ip, ip, #28
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	b12b      	cbz	r3, 80037aa <ai_platform_get_activations_map+0x6a>
 800379e:	f10e 0e01 	add.w	lr, lr, #1
 80037a2:	4577      	cmp	r7, lr
 80037a4:	f840 3f04 	str.w	r3, [r0, #4]!
 80037a8:	d1f3      	bne.n	8003792 <ai_platform_get_activations_map+0x52>
 80037aa:	eba7 000e 	sub.w	r0, r7, lr
 80037ae:	fab0 f080 	clz	r0, r0
 80037b2:	0940      	lsrs	r0, r0, #5
 80037b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037b6:	2000      	movs	r0, #0
 80037b8:	4770      	bx	lr
 80037ba:	1f20      	subs	r0, r4, #4
 80037bc:	462a      	mov	r2, r5
 80037be:	2400      	movs	r4, #0
 80037c0:	e000      	b.n	80037c4 <ai_platform_get_activations_map+0x84>
 80037c2:	461c      	mov	r4, r3
 80037c4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80037c8:	42b3      	cmp	r3, r6
 80037ca:	d0d1      	beq.n	8003770 <ai_platform_get_activations_map+0x30>
 80037cc:	f840 3f04 	str.w	r3, [r0, #4]!
 80037d0:	1c63      	adds	r3, r4, #1
 80037d2:	429f      	cmp	r7, r3
 80037d4:	d1f5      	bne.n	80037c2 <ai_platform_get_activations_map+0x82>
 80037d6:	3402      	adds	r4, #2
 80037d8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80037dc:	42b3      	cmp	r3, r6
 80037de:	d1c9      	bne.n	8003774 <ai_platform_get_activations_map+0x34>
 80037e0:	2001      	movs	r0, #1
 80037e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e4:	a1facade 	.word	0xa1facade

080037e8 <ai_platform_network_set_error>:
 80037e8:	b110      	cbz	r0, 80037f0 <ai_platform_network_set_error+0x8>
 80037ea:	300c      	adds	r0, #12
 80037ec:	f000 bc6e 	b.w	80040cc <core_set_error>
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop

080037f4 <ai_platform_inputs_get>:
 80037f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f8:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <ai_platform_inputs_get+0xe8>)
 80037fa:	6802      	ldr	r2, [r0, #0]
 80037fc:	b085      	sub	sp, #20
 80037fe:	4393      	bics	r3, r2
 8003800:	9003      	str	r0, [sp, #12]
 8003802:	9102      	str	r1, [sp, #8]
 8003804:	d160      	bne.n	80038c8 <ai_platform_inputs_get+0xd4>
 8003806:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8003808:	2b00      	cmp	r3, #0
 800380a:	d04f      	beq.n	80038ac <ai_platform_inputs_get+0xb8>
 800380c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8003810:	f1ba 0f00 	cmp.w	sl, #0
 8003814:	d04a      	beq.n	80038ac <ai_platform_inputs_get+0xb8>
 8003816:	f04f 0b00 	mov.w	fp, #0
 800381a:	465d      	mov	r5, fp
 800381c:	e016      	b.n	800384c <ai_platform_inputs_get+0x58>
 800381e:	9901      	ldr	r1, [sp, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	507a      	str	r2, [r7, r1]
 8003824:	69b1      	ldr	r1, [r6, #24]
 8003826:	684e      	ldr	r6, [r1, #4]
 8003828:	60a3      	str	r3, [r4, #8]
 800382a:	f04f 0201 	mov.w	r2, #1
 800382e:	7522      	strb	r2, [r4, #20]
 8003830:	6961      	ldr	r1, [r4, #20]
 8003832:	6020      	str	r0, [r4, #0]
 8003834:	f369 211f 	bfi	r1, r9, #8, #24
 8003838:	2300      	movs	r3, #0
 800383a:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800383e:	e9c4 1805 	strd	r1, r8, [r4, #20]
 8003842:	f8c4 c004 	str.w	ip, [r4, #4]
 8003846:	3501      	adds	r5, #1
 8003848:	f10b 0b1c 	add.w	fp, fp, #28
 800384c:	f8ba 3000 	ldrh.w	r3, [sl]
 8003850:	42ab      	cmp	r3, r5
 8003852:	b2aa      	uxth	r2, r5
 8003854:	d93c      	bls.n	80038d0 <ai_platform_inputs_get+0xdc>
 8003856:	f8da 3004 	ldr.w	r3, [sl, #4]
 800385a:	00e9      	lsls	r1, r5, #3
 800385c:	9101      	str	r1, [sp, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d036      	beq.n	80038d0 <ai_platform_inputs_get+0xdc>
 8003862:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003866:	2e00      	cmp	r6, #0
 8003868:	d032      	beq.n	80038d0 <ai_platform_inputs_get+0xdc>
 800386a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800386e:	69b2      	ldr	r2, [r6, #24]
 8003870:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003874:	6810      	ldr	r0, [r2, #0]
 8003876:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800387a:	68b3      	ldr	r3, [r6, #8]
 800387c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003880:	f001 f9b0 	bl	8004be4 <ai_array_to_buffer_fmt>
 8003884:	69b1      	ldr	r1, [r6, #24]
 8003886:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800388a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800388e:	445c      	add	r4, fp
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0c8      	beq.n	8003826 <ai_platform_inputs_get+0x32>
 8003894:	2100      	movs	r1, #0
 8003896:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800389a:	6831      	ldr	r1, [r6, #0]
 800389c:	6059      	str	r1, [r3, #4]
 800389e:	b111      	cbz	r1, 80038a6 <ai_platform_inputs_get+0xb2>
 80038a0:	8849      	ldrh	r1, [r1, #2]
 80038a2:	2900      	cmp	r1, #0
 80038a4:	d1bb      	bne.n	800381e <ai_platform_inputs_get+0x2a>
 80038a6:	69b1      	ldr	r1, [r6, #24]
 80038a8:	2300      	movs	r3, #0
 80038aa:	e7bc      	b.n	8003826 <ai_platform_inputs_get+0x32>
 80038ac:	9803      	ldr	r0, [sp, #12]
 80038ae:	2218      	movs	r2, #24
 80038b0:	2111      	movs	r1, #17
 80038b2:	300c      	adds	r0, #12
 80038b4:	f000 fc0a 	bl	80040cc <core_set_error>
 80038b8:	2200      	movs	r2, #0
 80038ba:	4610      	mov	r0, r2
 80038bc:	9b02      	ldr	r3, [sp, #8]
 80038be:	b103      	cbz	r3, 80038c2 <ai_platform_inputs_get+0xce>
 80038c0:	801a      	strh	r2, [r3, #0]
 80038c2:	b005      	add	sp, #20
 80038c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c8:	2000      	movs	r0, #0
 80038ca:	b005      	add	sp, #20
 80038cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d0:	2a00      	cmp	r2, #0
 80038d2:	d0eb      	beq.n	80038ac <ai_platform_inputs_get+0xb8>
 80038d4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80038d8:	6858      	ldr	r0, [r3, #4]
 80038da:	e7ef      	b.n	80038bc <ai_platform_inputs_get+0xc8>
 80038dc:	a1c00100 	.word	0xa1c00100

080038e0 <ai_platform_outputs_get>:
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	4b37      	ldr	r3, [pc, #220]	@ (80039c4 <ai_platform_outputs_get+0xe4>)
 80038e6:	6802      	ldr	r2, [r0, #0]
 80038e8:	b085      	sub	sp, #20
 80038ea:	4393      	bics	r3, r2
 80038ec:	9003      	str	r0, [sp, #12]
 80038ee:	9102      	str	r1, [sp, #8]
 80038f0:	d15d      	bne.n	80039ae <ai_platform_outputs_get+0xce>
 80038f2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d94c      	bls.n	8003992 <ai_platform_outputs_get+0xb2>
 80038f8:	f04f 0b00 	mov.w	fp, #0
 80038fc:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8003900:	465d      	mov	r5, fp
 8003902:	46d8      	mov	r8, fp
 8003904:	e016      	b.n	8003934 <ai_platform_outputs_get+0x54>
 8003906:	9a01      	ldr	r2, [sp, #4]
 8003908:	2101      	movs	r1, #1
 800390a:	50b9      	str	r1, [r7, r2]
 800390c:	69b2      	ldr	r2, [r6, #24]
 800390e:	6856      	ldr	r6, [r2, #4]
 8003910:	6020      	str	r0, [r4, #0]
 8003912:	f04f 0201 	mov.w	r2, #1
 8003916:	7522      	strb	r2, [r4, #20]
 8003918:	6960      	ldr	r0, [r4, #20]
 800391a:	f8c4 c004 	str.w	ip, [r4, #4]
 800391e:	f369 201f 	bfi	r0, r9, #8, #24
 8003922:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8003926:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800392a:	9b00      	ldr	r3, [sp, #0]
 800392c:	61a3      	str	r3, [r4, #24]
 800392e:	3501      	adds	r5, #1
 8003930:	f10b 0b1c 	add.w	fp, fp, #28
 8003934:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003938:	42ab      	cmp	r3, r5
 800393a:	b2aa      	uxth	r2, r5
 800393c:	d93b      	bls.n	80039b6 <ai_platform_outputs_get+0xd6>
 800393e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003942:	00e9      	lsls	r1, r5, #3
 8003944:	9101      	str	r1, [sp, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d035      	beq.n	80039b6 <ai_platform_outputs_get+0xd6>
 800394a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800394e:	2e00      	cmp	r6, #0
 8003950:	d031      	beq.n	80039b6 <ai_platform_outputs_get+0xd6>
 8003952:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003956:	69b2      	ldr	r2, [r6, #24]
 8003958:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800395c:	68b3      	ldr	r3, [r6, #8]
 800395e:	6810      	ldr	r0, [r2, #0]
 8003960:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003964:	68f3      	ldr	r3, [r6, #12]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	f001 f93c 	bl	8004be4 <ai_array_to_buffer_fmt>
 800396c:	69b2      	ldr	r2, [r6, #24]
 800396e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8003972:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8003976:	445c      	add	r4, fp
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0c8      	beq.n	800390e <ai_platform_outputs_get+0x2e>
 800397c:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 8003980:	6832      	ldr	r2, [r6, #0]
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	b112      	cbz	r2, 800398c <ai_platform_outputs_get+0xac>
 8003986:	8852      	ldrh	r2, [r2, #2]
 8003988:	2a00      	cmp	r2, #0
 800398a:	d1bc      	bne.n	8003906 <ai_platform_outputs_get+0x26>
 800398c:	69b2      	ldr	r2, [r6, #24]
 800398e:	2300      	movs	r3, #0
 8003990:	e7bd      	b.n	800390e <ai_platform_outputs_get+0x2e>
 8003992:	9803      	ldr	r0, [sp, #12]
 8003994:	2218      	movs	r2, #24
 8003996:	2111      	movs	r1, #17
 8003998:	300c      	adds	r0, #12
 800399a:	f000 fb97 	bl	80040cc <core_set_error>
 800399e:	2200      	movs	r2, #0
 80039a0:	4610      	mov	r0, r2
 80039a2:	9b02      	ldr	r3, [sp, #8]
 80039a4:	b103      	cbz	r3, 80039a8 <ai_platform_outputs_get+0xc8>
 80039a6:	801a      	strh	r2, [r3, #0]
 80039a8:	b005      	add	sp, #20
 80039aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ae:	2000      	movs	r0, #0
 80039b0:	b005      	add	sp, #20
 80039b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b6:	2a00      	cmp	r2, #0
 80039b8:	d0eb      	beq.n	8003992 <ai_platform_outputs_get+0xb2>
 80039ba:	f8da 3014 	ldr.w	r3, [sl, #20]
 80039be:	6858      	ldr	r0, [r3, #4]
 80039c0:	e7ef      	b.n	80039a2 <ai_platform_outputs_get+0xc2>
 80039c2:	bf00      	nop
 80039c4:	a1c00100 	.word	0xa1c00100

080039c8 <ai_platform_network_create>:
 80039c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039cc:	b083      	sub	sp, #12
 80039ce:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 80039d2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80039d6:	b320      	cbz	r0, 8003a22 <ai_platform_network_create+0x5a>
 80039d8:	6002      	str	r2, [r0, #0]
 80039da:	4616      	mov	r6, r2
 80039dc:	461f      	mov	r7, r3
 80039de:	4604      	mov	r4, r0
 80039e0:	f000 fb72 	bl	80040c8 <core_init>
 80039e4:	b970      	cbnz	r0, 8003a04 <ai_platform_network_create+0x3c>
 80039e6:	2530      	movs	r5, #48	@ 0x30
 80039e8:	2300      	movs	r3, #0
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	2410      	movs	r4, #16
 80039ee:	4642      	mov	r2, r8
 80039f0:	4649      	mov	r1, r9
 80039f2:	4638      	mov	r0, r7
 80039f4:	f001 f9a0 	bl	8004d38 <ai_version_get>
 80039f8:	60b0      	str	r0, [r6, #8]
 80039fa:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80039fe:	b003      	add	sp, #12
 8003a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a04:	2200      	movs	r2, #0
 8003a06:	4649      	mov	r1, r9
 8003a08:	4638      	mov	r0, r7
 8003a0a:	f001 f995 	bl	8004d38 <ai_version_get>
 8003a0e:	2200      	movs	r2, #0
 8003a10:	4605      	mov	r5, r0
 8003a12:	2105      	movs	r1, #5
 8003a14:	2001      	movs	r0, #1
 8003a16:	f001 f98f 	bl	8004d38 <ai_version_get>
 8003a1a:	4285      	cmp	r5, r0
 8003a1c:	d008      	beq.n	8003a30 <ai_platform_network_create+0x68>
 8003a1e:	2501      	movs	r5, #1
 8003a20:	e7e2      	b.n	80039e8 <ai_platform_network_create+0x20>
 8003a22:	2510      	movs	r5, #16
 8003a24:	462c      	mov	r4, r5
 8003a26:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8003a2a:	b003      	add	sp, #12
 8003a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a30:	4b05      	ldr	r3, [pc, #20]	@ (8003a48 <ai_platform_network_create+0x80>)
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	a801      	add	r0, sp, #4
 8003a36:	f000 fb55 	bl	80040e4 <ai_check_custom_types>
 8003a3a:	b110      	cbz	r0, 8003a42 <ai_platform_network_create+0x7a>
 8003a3c:	2400      	movs	r4, #0
 8003a3e:	4625      	mov	r5, r4
 8003a40:	e7d5      	b.n	80039ee <ai_platform_network_create+0x26>
 8003a42:	2502      	movs	r5, #2
 8003a44:	e7d0      	b.n	80039e8 <ai_platform_network_create+0x20>
 8003a46:	bf00      	nop
 8003a48:	84048403 	.word	0x84048403

08003a4c <ai_platform_network_init>:
 8003a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a50:	4b63      	ldr	r3, [pc, #396]	@ (8003be0 <ai_platform_network_init+0x194>)
 8003a52:	6802      	ldr	r2, [r0, #0]
 8003a54:	4393      	bics	r3, r2
 8003a56:	b083      	sub	sp, #12
 8003a58:	d156      	bne.n	8003b08 <ai_platform_network_init+0xbc>
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	460f      	mov	r7, r1
 8003a5e:	2900      	cmp	r1, #0
 8003a60:	f000 80a9 	beq.w	8003bb6 <ai_platform_network_init+0x16a>
 8003a64:	680b      	ldr	r3, [r1, #0]
 8003a66:	495f      	ldr	r1, [pc, #380]	@ (8003be4 <ai_platform_network_init+0x198>)
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	d113      	bne.n	8003a94 <ai_platform_network_init+0x48>
 8003a6c:	495c      	ldr	r1, [pc, #368]	@ (8003be0 <ai_platform_network_init+0x194>)
 8003a6e:	89bd      	ldrh	r5, [r7, #12]
 8003a70:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8003a74:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8003a78:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8003a7c:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8003a80:	68be      	ldr	r6, [r7, #8]
 8003a82:	428a      	cmp	r2, r1
 8003a84:	d02c      	beq.n	8003ae0 <ai_platform_network_init+0x94>
 8003a86:	2303      	movs	r3, #3
 8003a88:	6123      	str	r3, [r4, #16]
 8003a8a:	4627      	mov	r7, r4
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	b003      	add	sp, #12
 8003a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a94:	2101      	movs	r1, #1
 8003a96:	4638      	mov	r0, r7
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8003a9e:	f7ff fdbd 	bl	800361c <ai_buffer_get_size>
 8003aa2:	f107 081c 	add.w	r8, r7, #28
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4640      	mov	r0, r8
 8003aac:	463e      	mov	r6, r7
 8003aae:	6a3f      	ldr	r7, [r7, #32]
 8003ab0:	f7ff fdb4 	bl	800361c <ai_buffer_get_size>
 8003ab4:	2d00      	cmp	r5, #0
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	bf0a      	itet	eq
 8003aba:	46a9      	moveq	r9, r5
 8003abc:	f04f 0901 	movne.w	r9, #1
 8003ac0:	462e      	moveq	r6, r5
 8003ac2:	b330      	cbz	r0, 8003b12 <ai_platform_network_init+0xc6>
 8003ac4:	2f00      	cmp	r7, #0
 8003ac6:	f000 8084 	beq.w	8003bd2 <ai_platform_network_init+0x186>
 8003aca:	f04f 0a01 	mov.w	sl, #1
 8003ace:	f1bb 0f00 	cmp.w	fp, #0
 8003ad2:	d021      	beq.n	8003b18 <ai_platform_network_init+0xcc>
 8003ad4:	2500      	movs	r5, #0
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	4941      	ldr	r1, [pc, #260]	@ (8003be0 <ai_platform_network_init+0x194>)
 8003ada:	428a      	cmp	r2, r1
 8003adc:	46ab      	mov	fp, r5
 8003ade:	d1d2      	bne.n	8003a86 <ai_platform_network_init+0x3a>
 8003ae0:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8003ae2:	454a      	cmp	r2, r9
 8003ae4:	4a3f      	ldr	r2, [pc, #252]	@ (8003be4 <ai_platform_network_init+0x198>)
 8003ae6:	d221      	bcs.n	8003b2c <ai_platform_network_init+0xe0>
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d15c      	bne.n	8003ba6 <ai_platform_network_init+0x15a>
 8003aec:	6266      	str	r6, [r4, #36]	@ 0x24
 8003aee:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8003af2:	f8a4 b020 	strh.w	fp, [r4, #32]
 8003af6:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8003afa:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 8003afe:	8525      	strh	r5, [r4, #40]	@ 0x28
 8003b00:	4620      	mov	r0, r4
 8003b02:	f000 fb19 	bl	8004138 <ai_layers_init_all>
 8003b06:	e7be      	b.n	8003a86 <ai_platform_network_init+0x3a>
 8003b08:	2700      	movs	r7, #0
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	b003      	add	sp, #12
 8003b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b12:	4680      	mov	r8, r0
 8003b14:	4682      	mov	sl, r0
 8003b16:	e7da      	b.n	8003ace <ai_platform_network_init+0x82>
 8003b18:	2d00      	cmp	r5, #0
 8003b1a:	d0dc      	beq.n	8003ad6 <ai_platform_network_init+0x8a>
 8003b1c:	2212      	movs	r2, #18
 8003b1e:	2110      	movs	r1, #16
 8003b20:	f104 000c 	add.w	r0, r4, #12
 8003b24:	f000 fad2 	bl	80040cc <core_set_error>
 8003b28:	465f      	mov	r7, fp
 8003b2a:	e7af      	b.n	8003a8c <ai_platform_network_init+0x40>
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d0dd      	beq.n	8003aec <ai_platform_network_init+0xa0>
 8003b30:	f1b9 0f00 	cmp.w	r9, #0
 8003b34:	d018      	beq.n	8003b68 <ai_platform_network_init+0x11c>
 8003b36:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b40:	2700      	movs	r7, #0
 8003b42:	4699      	mov	r9, r3
 8003b44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003b46:	eb06 0e07 	add.w	lr, r6, r7
 8003b4a:	eb03 0c07 	add.w	ip, r3, r7
 8003b4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003b52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003b56:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	45b9      	cmp	r9, r7
 8003b5e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8003b62:	d1ef      	bne.n	8003b44 <ai_platform_network_init+0xf8>
 8003b64:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003b68:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003b6a:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8003b6e:	4553      	cmp	r3, sl
 8003b70:	f8a4 b020 	strh.w	fp, [r4, #32]
 8003b74:	d325      	bcc.n	8003bc2 <ai_platform_network_init+0x176>
 8003b76:	f1ba 0f00 	cmp.w	sl, #0
 8003b7a:	d0be      	beq.n	8003afa <ai_platform_network_init+0xae>
 8003b7c:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8003b80:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003b84:	f04f 0c00 	mov.w	ip, #0
 8003b88:	eb08 070c 	add.w	r7, r8, ip
 8003b8c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003b8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b90:	4466      	add	r6, ip
 8003b92:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003b94:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003b98:	f10c 0c1c 	add.w	ip, ip, #28
 8003b9c:	45f4      	cmp	ip, lr
 8003b9e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003ba2:	d1f1      	bne.n	8003b88 <ai_platform_network_init+0x13c>
 8003ba4:	e7a9      	b.n	8003afa <ai_platform_network_init+0xae>
 8003ba6:	2212      	movs	r2, #18
 8003ba8:	2116      	movs	r1, #22
 8003baa:	f104 000c 	add.w	r0, r4, #12
 8003bae:	f000 fa8d 	bl	80040cc <core_set_error>
 8003bb2:	2700      	movs	r7, #0
 8003bb4:	e76a      	b.n	8003a8c <ai_platform_network_init+0x40>
 8003bb6:	2211      	movs	r2, #17
 8003bb8:	2110      	movs	r1, #16
 8003bba:	300c      	adds	r0, #12
 8003bbc:	f000 fa86 	bl	80040cc <core_set_error>
 8003bc0:	e764      	b.n	8003a8c <ai_platform_network_init+0x40>
 8003bc2:	2213      	movs	r2, #19
 8003bc4:	2116      	movs	r1, #22
 8003bc6:	f104 000c 	add.w	r0, r4, #12
 8003bca:	f000 fa7f 	bl	80040cc <core_set_error>
 8003bce:	2700      	movs	r7, #0
 8003bd0:	e75c      	b.n	8003a8c <ai_platform_network_init+0x40>
 8003bd2:	2213      	movs	r2, #19
 8003bd4:	2110      	movs	r1, #16
 8003bd6:	f104 000c 	add.w	r0, r4, #12
 8003bda:	f000 fa77 	bl	80040cc <core_set_error>
 8003bde:	e755      	b.n	8003a8c <ai_platform_network_init+0x40>
 8003be0:	a1c00100 	.word	0xa1c00100
 8003be4:	a1facade 	.word	0xa1facade

08003be8 <ai_platform_network_post_init>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	4b16      	ldr	r3, [pc, #88]	@ (8003c44 <ai_platform_network_post_init+0x5c>)
 8003bec:	6802      	ldr	r2, [r0, #0]
 8003bee:	ea02 0103 	and.w	r1, r2, r3
 8003bf2:	4393      	bics	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <ai_platform_network_post_init+0x20>
 8003bf6:	6903      	ldr	r3, [r0, #16]
 8003bf8:	f013 0502 	ands.w	r5, r3, #2
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	d005      	beq.n	8003c0c <ai_platform_network_post_init+0x24>
 8003c00:	428a      	cmp	r2, r1
 8003c02:	d00a      	beq.n	8003c1a <ai_platform_network_post_init+0x32>
 8003c04:	2001      	movs	r0, #1
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	2000      	movs	r0, #0
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	2111      	movs	r1, #17
 8003c10:	300c      	adds	r0, #12
 8003c12:	f000 fa5b 	bl	80040cc <core_set_error>
 8003c16:	4628      	mov	r0, r5
 8003c18:	bd38      	pop	{r3, r4, r5, pc}
 8003c1a:	f000 fa9b 	bl	8004154 <ai_layers_post_init_all>
 8003c1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ef      	beq.n	8003c04 <ai_platform_network_post_init+0x1c>
 8003c24:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8003c26:	e008      	b.n	8003c3a <ai_platform_network_post_init+0x52>
 8003c28:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8003c2c:	4798      	blx	r3
 8003c2e:	692b      	ldr	r3, [r5, #16]
 8003c30:	42ab      	cmp	r3, r5
 8003c32:	d0e7      	beq.n	8003c04 <ai_platform_network_post_init+0x1c>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0e5      	beq.n	8003c04 <ai_platform_network_post_init+0x1c>
 8003c38:	461d      	mov	r5, r3
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	2d00      	cmp	r5, #0
 8003c40:	d1f2      	bne.n	8003c28 <ai_platform_network_post_init+0x40>
 8003c42:	e7df      	b.n	8003c04 <ai_platform_network_post_init+0x1c>
 8003c44:	a1c00100 	.word	0xa1c00100

08003c48 <ai_platform_network_process>:
 8003c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4c:	4bb5      	ldr	r3, [pc, #724]	@ (8003f24 <ai_platform_network_process+0x2dc>)
 8003c4e:	4605      	mov	r5, r0
 8003c50:	6800      	ldr	r0, [r0, #0]
 8003c52:	b085      	sub	sp, #20
 8003c54:	4383      	bics	r3, r0
 8003c56:	9202      	str	r2, [sp, #8]
 8003c58:	f040 8140 	bne.w	8003edc <ai_platform_network_process+0x294>
 8003c5c:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8125 	beq.w	8003eae <ai_platform_network_process+0x266>
 8003c64:	692b      	ldr	r3, [r5, #16]
 8003c66:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2700      	movs	r7, #0
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	61af      	str	r7, [r5, #24]
 8003c74:	f040 8137 	bne.w	8003ee6 <ai_platform_network_process+0x29e>
 8003c78:	2900      	cmp	r1, #0
 8003c7a:	f000 811e 	beq.w	8003eba <ai_platform_network_process+0x272>
 8003c7e:	f1ba 0f00 	cmp.w	sl, #0
 8003c82:	f000 811a 	beq.w	8003eba <ai_platform_network_process+0x272>
 8003c86:	f8ba 3000 	ldrh.w	r3, [sl]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8115 	beq.w	8003eba <ai_platform_network_process+0x272>
 8003c90:	698b      	ldr	r3, [r1, #24]
 8003c92:	9503      	str	r5, [sp, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	460e      	mov	r6, r1
 8003c9a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d072      	beq.n	8003d88 <ai_platform_network_process+0x140>
 8003ca2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003ca6:	2c00      	cmp	r4, #0
 8003ca8:	d06e      	beq.n	8003d88 <ai_platform_network_process+0x140>
 8003caa:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003cae:	f8d3 9000 	ldr.w	r9, [r3]
 8003cb2:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8003cb6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003cba:	f000 81d3 	beq.w	8004064 <ai_platform_network_process+0x41c>
 8003cbe:	69a3      	ldr	r3, [r4, #24]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	685d      	ldr	r5, [r3, #4]
 8003cc6:	f7ff fca9 	bl	800361c <ai_buffer_get_size>
 8003cca:	4285      	cmp	r5, r0
 8003ccc:	f0c0 8116 	bcc.w	8003efc <ai_platform_network_process+0x2b4>
 8003cd0:	68e0      	ldr	r0, [r4, #12]
 8003cd2:	69b1      	ldr	r1, [r6, #24]
 8003cd4:	68c2      	ldr	r2, [r0, #12]
 8003cd6:	68cb      	ldr	r3, [r1, #12]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	f040 810f 	bne.w	8003efc <ai_platform_network_process+0x2b4>
 8003cde:	6882      	ldr	r2, [r0, #8]
 8003ce0:	688b      	ldr	r3, [r1, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	f040 810a 	bne.w	8003efc <ai_platform_network_process+0x2b4>
 8003ce8:	6842      	ldr	r2, [r0, #4]
 8003cea:	684b      	ldr	r3, [r1, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	f040 8105 	bne.w	8003efc <ai_platform_network_process+0x2b4>
 8003cf2:	69a3      	ldr	r3, [r4, #24]
 8003cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cf8:	f001 f80c 	bl	8004d14 <ai_array_get_data_byte_size>
 8003cfc:	4605      	mov	r5, r0
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f001 f820 	bl	8004d44 <get_tensor_byte_size>
 8003d04:	4285      	cmp	r5, r0
 8003d06:	f0c0 80f9 	bcc.w	8003efc <ai_platform_network_process+0x2b4>
 8003d0a:	69a3      	ldr	r3, [r4, #24]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	f000 ff69 	bl	8004be4 <ai_array_to_buffer_fmt>
 8003d12:	6833      	ldr	r3, [r6, #0]
 8003d14:	4058      	eors	r0, r3
 8003d16:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8003d1a:	f040 81a5 	bne.w	8004068 <ai_platform_network_process+0x420>
 8003d1e:	6873      	ldr	r3, [r6, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 819f 	beq.w	8004064 <ai_platform_network_process+0x41c>
 8003d26:	69b3      	ldr	r3, [r6, #24]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 81a5 	beq.w	800407a <ai_platform_network_process+0x432>
 8003d30:	9a01      	ldr	r2, [sp, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	bf38      	it	cc
 8003d36:	461a      	movcc	r2, r3
 8003d38:	4620      	mov	r0, r4
 8003d3a:	9201      	str	r2, [sp, #4]
 8003d3c:	f001 f802 	bl	8004d44 <get_tensor_byte_size>
 8003d40:	f8c8 0008 	str.w	r0, [r8, #8]
 8003d44:	69b3      	ldr	r3, [r6, #24]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	fb00 f303 	mul.w	r3, r0, r3
 8003d4c:	f8c8 300c 	str.w	r3, [r8, #12]
 8003d50:	6871      	ldr	r1, [r6, #4]
 8003d52:	f8c8 1004 	str.w	r1, [r8, #4]
 8003d56:	440b      	add	r3, r1
 8003d58:	f849 300b 	str.w	r3, [r9, fp]
 8003d5c:	69a0      	ldr	r0, [r4, #24]
 8003d5e:	6803      	ldr	r3, [r0, #0]
 8003d60:	009a      	lsls	r2, r3, #2
 8003d62:	f107 0701 	add.w	r7, r7, #1
 8003d66:	f106 061c 	add.w	r6, r6, #28
 8003d6a:	f100 80b1 	bmi.w	8003ed0 <ai_platform_network_process+0x288>
 8003d6e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	4419      	add	r1, r3
 8003d76:	6081      	str	r1, [r0, #8]
 8003d78:	69a3      	ldr	r3, [r4, #24]
 8003d7a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
 8003d80:	f8ba 3000 	ldrh.w	r3, [sl]
 8003d84:	42bb      	cmp	r3, r7
 8003d86:	d888      	bhi.n	8003c9a <ai_platform_network_process+0x52>
 8003d88:	9d03      	ldr	r5, [sp, #12]
 8003d8a:	9b02      	ldr	r3, [sp, #8]
 8003d8c:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 817c 	beq.w	800408c <ai_platform_network_process+0x444>
 8003d94:	2a01      	cmp	r2, #1
 8003d96:	f240 80bd 	bls.w	8003f14 <ai_platform_network_process+0x2cc>
 8003d9a:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8003d9e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80b6 	beq.w	8003f14 <ai_platform_network_process+0x2cc>
 8003da8:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003dac:	2700      	movs	r7, #0
 8003dae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80bd 	beq.w	8003f32 <ai_platform_network_process+0x2ea>
 8003db8:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8003dbc:	2e00      	cmp	r6, #0
 8003dbe:	f000 80b8 	beq.w	8003f32 <ai_platform_network_process+0x2ea>
 8003dc2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003dc6:	681c      	ldr	r4, [r3, #0]
 8003dc8:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8003dcc:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8003dd0:	f000 8160 	beq.w	8004094 <ai_platform_network_process+0x44c>
 8003dd4:	69b3      	ldr	r3, [r6, #24]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	9302      	str	r3, [sp, #8]
 8003ddc:	4658      	mov	r0, fp
 8003dde:	f7ff fc1d 	bl	800361c <ai_buffer_get_size>
 8003de2:	9b02      	ldr	r3, [sp, #8]
 8003de4:	4283      	cmp	r3, r0
 8003de6:	f0c0 8095 	bcc.w	8003f14 <ai_platform_network_process+0x2cc>
 8003dea:	68f0      	ldr	r0, [r6, #12]
 8003dec:	f8db 1018 	ldr.w	r1, [fp, #24]
 8003df0:	68c2      	ldr	r2, [r0, #12]
 8003df2:	68cb      	ldr	r3, [r1, #12]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	f040 808d 	bne.w	8003f14 <ai_platform_network_process+0x2cc>
 8003dfa:	6882      	ldr	r2, [r0, #8]
 8003dfc:	688b      	ldr	r3, [r1, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	f040 8088 	bne.w	8003f14 <ai_platform_network_process+0x2cc>
 8003e04:	6842      	ldr	r2, [r0, #4]
 8003e06:	684b      	ldr	r3, [r1, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f040 8083 	bne.w	8003f14 <ai_platform_network_process+0x2cc>
 8003e0e:	69b3      	ldr	r3, [r6, #24]
 8003e10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e14:	f000 ff7e 	bl	8004d14 <ai_array_get_data_byte_size>
 8003e18:	9002      	str	r0, [sp, #8]
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f000 ff92 	bl	8004d44 <get_tensor_byte_size>
 8003e20:	9b02      	ldr	r3, [sp, #8]
 8003e22:	4283      	cmp	r3, r0
 8003e24:	d376      	bcc.n	8003f14 <ai_platform_network_process+0x2cc>
 8003e26:	69b3      	ldr	r3, [r6, #24]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	f000 fedb 	bl	8004be4 <ai_array_to_buffer_fmt>
 8003e2e:	f8db 3000 	ldr.w	r3, [fp]
 8003e32:	4058      	eors	r0, r3
 8003e34:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8003e38:	f040 8134 	bne.w	80040a4 <ai_platform_network_process+0x45c>
 8003e3c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8127 	beq.w	8004094 <ai_platform_network_process+0x44c>
 8003e46:	f8db 3018 	ldr.w	r3, [fp, #24]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8133 	beq.w	80040b8 <ai_platform_network_process+0x470>
 8003e52:	9a01      	ldr	r2, [sp, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	bf38      	it	cc
 8003e58:	461a      	movcc	r2, r3
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	9201      	str	r2, [sp, #4]
 8003e5e:	f000 ff71 	bl	8004d44 <get_tensor_byte_size>
 8003e62:	f8c9 0008 	str.w	r0, [r9, #8]
 8003e66:	f8db 3018 	ldr.w	r3, [fp, #24]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	fb00 f303 	mul.w	r3, r0, r3
 8003e70:	f8c9 300c 	str.w	r3, [r9, #12]
 8003e74:	f8db 1004 	ldr.w	r1, [fp, #4]
 8003e78:	f8c9 1004 	str.w	r1, [r9, #4]
 8003e7c:	440b      	add	r3, r1
 8003e7e:	f844 300a 	str.w	r3, [r4, sl]
 8003e82:	69b0      	ldr	r0, [r6, #24]
 8003e84:	6803      	ldr	r3, [r0, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	f107 0701 	add.w	r7, r7, #1
 8003e8c:	f10b 0b1c 	add.w	fp, fp, #28
 8003e90:	d44a      	bmi.n	8003f28 <ai_platform_network_process+0x2e0>
 8003e92:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	4419      	add	r1, r3
 8003e9a:	6081      	str	r1, [r0, #8]
 8003e9c:	69b3      	ldr	r3, [r6, #24]
 8003e9e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003ea8:	42bb      	cmp	r3, r7
 8003eaa:	d880      	bhi.n	8003dae <ai_platform_network_process+0x166>
 8003eac:	e041      	b.n	8003f32 <ai_platform_network_process+0x2ea>
 8003eae:	692a      	ldr	r2, [r5, #16]
 8003eb0:	61ab      	str	r3, [r5, #24]
 8003eb2:	f002 0203 	and.w	r2, r2, #3
 8003eb6:	2a03      	cmp	r2, #3
 8003eb8:	d115      	bne.n	8003ee6 <ai_platform_network_process+0x29e>
 8003eba:	2217      	movs	r2, #23
 8003ebc:	2112      	movs	r1, #18
 8003ebe:	f105 000c 	add.w	r0, r5, #12
 8003ec2:	f000 f903 	bl	80040cc <core_set_error>
 8003ec6:	2400      	movs	r4, #0
 8003ec8:	4620      	mov	r0, r4
 8003eca:	b005      	add	sp, #20
 8003ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed0:	f8ba 3000 	ldrh.w	r3, [sl]
 8003ed4:	429f      	cmp	r7, r3
 8003ed6:	f4ff aee0 	bcc.w	8003c9a <ai_platform_network_process+0x52>
 8003eda:	e755      	b.n	8003d88 <ai_platform_network_process+0x140>
 8003edc:	2400      	movs	r4, #0
 8003ede:	4620      	mov	r0, r4
 8003ee0:	b005      	add	sp, #20
 8003ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee6:	2230      	movs	r2, #48	@ 0x30
 8003ee8:	2111      	movs	r1, #17
 8003eea:	f105 000c 	add.w	r0, r5, #12
 8003eee:	f000 f8ed 	bl	80040cc <core_set_error>
 8003ef2:	2400      	movs	r4, #0
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	b005      	add	sp, #20
 8003ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efc:	9d03      	ldr	r5, [sp, #12]
 8003efe:	2218      	movs	r2, #24
 8003f00:	2112      	movs	r1, #18
 8003f02:	f105 000c 	add.w	r0, r5, #12
 8003f06:	f000 f8e1 	bl	80040cc <core_set_error>
 8003f0a:	2400      	movs	r4, #0
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	b005      	add	sp, #20
 8003f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f14:	2218      	movs	r2, #24
 8003f16:	2113      	movs	r1, #19
 8003f18:	f105 000c 	add.w	r0, r5, #12
 8003f1c:	f000 f8d6 	bl	80040cc <core_set_error>
 8003f20:	2400      	movs	r4, #0
 8003f22:	e7d1      	b.n	8003ec8 <ai_platform_network_process+0x280>
 8003f24:	a1c00100 	.word	0xa1c00100
 8003f28:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003f2c:	429f      	cmp	r7, r3
 8003f2e:	f4ff af3e 	bcc.w	8003dae <ai_platform_network_process+0x166>
 8003f32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003f36:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8003f38:	832b      	strh	r3, [r5, #24]
 8003f3a:	2a00      	cmp	r2, #0
 8003f3c:	f040 808c 	bne.w	8004058 <ai_platform_network_process+0x410>
 8003f40:	4616      	mov	r6, r2
 8003f42:	4617      	mov	r7, r2
 8003f44:	8b6c      	ldrh	r4, [r5, #26]
 8003f46:	429c      	cmp	r4, r3
 8003f48:	bf38      	it	cc
 8003f4a:	46ab      	movcc	fp, r5
 8003f4c:	d2bc      	bcs.n	8003ec8 <ai_platform_network_process+0x280>
 8003f4e:	2e00      	cmp	r6, #0
 8003f50:	d030      	beq.n	8003fb4 <ai_platform_network_process+0x36c>
 8003f52:	f04f 0800 	mov.w	r8, #0
 8003f56:	e014      	b.n	8003f82 <ai_platform_network_process+0x33a>
 8003f58:	6882      	ldr	r2, [r0, #8]
 8003f5a:	68c5      	ldr	r5, [r0, #12]
 8003f5c:	6863      	ldr	r3, [r4, #4]
 8003f5e:	1b52      	subs	r2, r2, r5
 8003f60:	4413      	add	r3, r2
 8003f62:	6083      	str	r3, [r0, #8]
 8003f64:	698b      	ldr	r3, [r1, #24]
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8003f6e:	f859 200a 	ldr.w	r2, [r9, sl]
 8003f72:	440b      	add	r3, r1
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bf24      	itt	cs
 8003f78:	68e3      	ldrcs	r3, [r4, #12]
 8003f7a:	1ad3      	subcs	r3, r2, r3
 8003f7c:	6063      	str	r3, [r4, #4]
 8003f7e:	f108 0801 	add.w	r8, r8, #1
 8003f82:	8833      	ldrh	r3, [r6, #0]
 8003f84:	4543      	cmp	r3, r8
 8003f86:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003f8a:	d913      	bls.n	8003fb4 <ai_platform_network_process+0x36c>
 8003f8c:	6873      	ldr	r3, [r6, #4]
 8003f8e:	b18b      	cbz	r3, 8003fb4 <ai_platform_network_process+0x36c>
 8003f90:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003f94:	b171      	cbz	r1, 8003fb4 <ai_platform_network_process+0x36c>
 8003f96:	6988      	ldr	r0, [r1, #24]
 8003f98:	68b2      	ldr	r2, [r6, #8]
 8003f9a:	6803      	ldr	r3, [r0, #0]
 8003f9c:	f8d2 9000 	ldr.w	r9, [r2]
 8003fa0:	009d      	lsls	r5, r3, #2
 8003fa2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8003fa6:	d5d7      	bpl.n	8003f58 <ai_platform_network_process+0x310>
 8003fa8:	6881      	ldr	r1, [r0, #8]
 8003faa:	68a2      	ldr	r2, [r4, #8]
 8003fac:	6860      	ldr	r0, [r4, #4]
 8003fae:	f000 fd93 	bl	8004ad8 <st_int8_copy>
 8003fb2:	e7da      	b.n	8003f6a <ai_platform_network_process+0x322>
 8003fb4:	4658      	mov	r0, fp
 8003fb6:	f000 f8e1 	bl	800417c <ai_layers_forward_all>
 8003fba:	2f00      	cmp	r7, #0
 8003fbc:	d03d      	beq.n	800403a <ai_platform_network_process+0x3f2>
 8003fbe:	2400      	movs	r4, #0
 8003fc0:	e016      	b.n	8003ff0 <ai_platform_network_process+0x3a8>
 8003fc2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8003fc6:	f859 100a 	ldr.w	r1, [r9, sl]
 8003fca:	4413      	add	r3, r2
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	bf24      	itt	cs
 8003fd0:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003fd4:	1acb      	subcs	r3, r1, r3
 8003fd6:	f8c8 3004 	str.w	r3, [r8, #4]
 8003fda:	6981      	ldr	r1, [r0, #24]
 8003fdc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003fe0:	1b52      	subs	r2, r2, r5
 8003fe2:	4413      	add	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
 8003fe6:	6983      	ldr	r3, [r0, #24]
 8003fe8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	3401      	adds	r4, #1
 8003ff0:	883b      	ldrh	r3, [r7, #0]
 8003ff2:	42a3      	cmp	r3, r4
 8003ff4:	d921      	bls.n	800403a <ai_platform_network_process+0x3f2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	b1fb      	cbz	r3, 800403a <ai_platform_network_process+0x3f2>
 8003ffa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003ffe:	b1e0      	cbz	r0, 800403a <ai_platform_network_process+0x3f2>
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	6983      	ldr	r3, [r0, #24]
 8004004:	f8d2 9000 	ldr.w	r9, [r2]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	0092      	lsls	r2, r2, #2
 800400c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8004010:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8004014:	d5d5      	bpl.n	8003fc2 <ai_platform_network_process+0x37a>
 8004016:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800401a:	6898      	ldr	r0, [r3, #8]
 800401c:	f000 fd5c 	bl	8004ad8 <st_int8_copy>
 8004020:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8004024:	f859 200a 	ldr.w	r2, [r9, sl]
 8004028:	440b      	add	r3, r1
 800402a:	4293      	cmp	r3, r2
 800402c:	bf24      	itt	cs
 800402e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004032:	1ad3      	subcs	r3, r2, r3
 8004034:	f8c8 3004 	str.w	r3, [r8, #4]
 8004038:	e7d9      	b.n	8003fee <ai_platform_network_process+0x3a6>
 800403a:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800403e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8004042:	3401      	adds	r4, #1
 8004044:	b2a4      	uxth	r4, r4
 8004046:	42a3      	cmp	r3, r4
 8004048:	f8ab 401a 	strh.w	r4, [fp, #26]
 800404c:	f63f af7f 	bhi.w	8003f4e <ai_platform_network_process+0x306>
 8004050:	4620      	mov	r0, r4
 8004052:	b005      	add	sp, #20
 8004054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004058:	2a01      	cmp	r2, #1
 800405a:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 800405c:	d02a      	beq.n	80040b4 <ai_platform_network_process+0x46c>
 800405e:	f106 070c 	add.w	r7, r6, #12
 8004062:	e76f      	b.n	8003f44 <ai_platform_network_process+0x2fc>
 8004064:	9d03      	ldr	r5, [sp, #12]
 8004066:	e728      	b.n	8003eba <ai_platform_network_process+0x272>
 8004068:	9d03      	ldr	r5, [sp, #12]
 800406a:	2219      	movs	r2, #25
 800406c:	2112      	movs	r1, #18
 800406e:	f105 000c 	add.w	r0, r5, #12
 8004072:	f000 f82b 	bl	80040cc <core_set_error>
 8004076:	2400      	movs	r4, #0
 8004078:	e726      	b.n	8003ec8 <ai_platform_network_process+0x280>
 800407a:	9d03      	ldr	r5, [sp, #12]
 800407c:	4604      	mov	r4, r0
 800407e:	2221      	movs	r2, #33	@ 0x21
 8004080:	2112      	movs	r1, #18
 8004082:	f105 000c 	add.w	r0, r5, #12
 8004086:	f000 f821 	bl	80040cc <core_set_error>
 800408a:	e71d      	b.n	8003ec8 <ai_platform_network_process+0x280>
 800408c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004090:	832b      	strh	r3, [r5, #24]
 8004092:	e752      	b.n	8003f3a <ai_platform_network_process+0x2f2>
 8004094:	2217      	movs	r2, #23
 8004096:	2113      	movs	r1, #19
 8004098:	f105 000c 	add.w	r0, r5, #12
 800409c:	f000 f816 	bl	80040cc <core_set_error>
 80040a0:	2400      	movs	r4, #0
 80040a2:	e711      	b.n	8003ec8 <ai_platform_network_process+0x280>
 80040a4:	2219      	movs	r2, #25
 80040a6:	2113      	movs	r1, #19
 80040a8:	f105 000c 	add.w	r0, r5, #12
 80040ac:	f000 f80e 	bl	80040cc <core_set_error>
 80040b0:	2400      	movs	r4, #0
 80040b2:	e709      	b.n	8003ec8 <ai_platform_network_process+0x280>
 80040b4:	2700      	movs	r7, #0
 80040b6:	e745      	b.n	8003f44 <ai_platform_network_process+0x2fc>
 80040b8:	4604      	mov	r4, r0
 80040ba:	2221      	movs	r2, #33	@ 0x21
 80040bc:	2113      	movs	r1, #19
 80040be:	f105 000c 	add.w	r0, r5, #12
 80040c2:	f000 f803 	bl	80040cc <core_set_error>
 80040c6:	e6ff      	b.n	8003ec8 <ai_platform_network_process+0x280>

080040c8 <core_init>:
 80040c8:	2001      	movs	r0, #1
 80040ca:	4770      	bx	lr

080040cc <core_set_error>:
 80040cc:	4603      	mov	r3, r0
 80040ce:	7800      	ldrb	r0, [r0, #0]
 80040d0:	b108      	cbz	r0, 80040d6 <core_set_error+0xa>
 80040d2:	2000      	movs	r0, #0
 80040d4:	4770      	bx	lr
 80040d6:	7019      	strb	r1, [r3, #0]
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	f362 211f 	bfi	r1, r2, #8, #24
 80040de:	2001      	movs	r0, #1
 80040e0:	6019      	str	r1, [r3, #0]
 80040e2:	4770      	bx	lr

080040e4 <ai_check_custom_types>:
 80040e4:	b082      	sub	sp, #8
 80040e6:	4b13      	ldr	r3, [pc, #76]	@ (8004134 <ai_check_custom_types+0x50>)
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	b118      	cbz	r0, 80040f4 <ai_check_custom_types+0x10>
 80040ec:	7803      	ldrb	r3, [r0, #0]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d002      	beq.n	80040f8 <ai_check_custom_types+0x14>
 80040f2:	2000      	movs	r0, #0
 80040f4:	b002      	add	sp, #8
 80040f6:	4770      	bx	lr
 80040f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <ai_check_custom_types+0x26>
 8004100:	2001      	movs	r0, #1
 8004102:	f080 0001 	eor.w	r0, r0, #1
 8004106:	b002      	add	sp, #8
 8004108:	4770      	bx	lr
 800410a:	7842      	ldrb	r2, [r0, #1]
 800410c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004110:	429a      	cmp	r2, r3
 8004112:	f100 0001 	add.w	r0, r0, #1
 8004116:	d1f3      	bne.n	8004100 <ai_check_custom_types+0x1c>
 8004118:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800411c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004120:	429a      	cmp	r2, r3
 8004122:	d1ed      	bne.n	8004100 <ai_check_custom_types+0x1c>
 8004124:	7842      	ldrb	r2, [r0, #1]
 8004126:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800412a:	429a      	cmp	r2, r3
 800412c:	d1e8      	bne.n	8004100 <ai_check_custom_types+0x1c>
 800412e:	2000      	movs	r0, #0
 8004130:	e7e7      	b.n	8004102 <ai_check_custom_types+0x1e>
 8004132:	bf00      	nop
 8004134:	84048403 	.word	0x84048403

08004138 <ai_layers_init_all>:
 8004138:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800413a:	2100      	movs	r1, #0
 800413c:	b143      	cbz	r3, 8004150 <ai_layers_init_all+0x18>
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	60d8      	str	r0, [r3, #12]
 8004142:	429a      	cmp	r2, r3
 8004144:	f101 0101 	add.w	r1, r1, #1
 8004148:	d002      	beq.n	8004150 <ai_layers_init_all+0x18>
 800414a:	b10a      	cbz	r2, 8004150 <ai_layers_init_all+0x18>
 800414c:	4613      	mov	r3, r2
 800414e:	e7f5      	b.n	800413c <ai_layers_init_all+0x4>
 8004150:	4608      	mov	r0, r1
 8004152:	4770      	bx	lr

08004154 <ai_layers_post_init_all>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004158:	2500      	movs	r5, #0
 800415a:	b16c      	cbz	r4, 8004178 <ai_layers_post_init_all+0x24>
 800415c:	6863      	ldr	r3, [r4, #4]
 800415e:	07db      	lsls	r3, r3, #31
 8004160:	d504      	bpl.n	800416c <ai_layers_post_init_all+0x18>
 8004162:	6a23      	ldr	r3, [r4, #32]
 8004164:	4620      	mov	r0, r4
 8004166:	b10b      	cbz	r3, 800416c <ai_layers_post_init_all+0x18>
 8004168:	4798      	blx	r3
 800416a:	3501      	adds	r5, #1
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	42a3      	cmp	r3, r4
 8004170:	d002      	beq.n	8004178 <ai_layers_post_init_all+0x24>
 8004172:	b10b      	cbz	r3, 8004178 <ai_layers_post_init_all+0x24>
 8004174:	461c      	mov	r4, r3
 8004176:	e7f0      	b.n	800415a <ai_layers_post_init_all+0x6>
 8004178:	4628      	mov	r0, r5
 800417a:	bd38      	pop	{r3, r4, r5, pc}

0800417c <ai_layers_forward_all>:
 800417c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004180:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8004184:	4604      	mov	r4, r0
 8004186:	f1b8 0f00 	cmp.w	r8, #0
 800418a:	d02b      	beq.n	80041e4 <ai_layers_forward_all+0x68>
 800418c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800418e:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8004190:	b321      	cbz	r1, 80041dc <ai_layers_forward_all+0x60>
 8004192:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004194:	2001      	movs	r0, #1
 8004196:	47c0      	blx	r8
 8004198:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800419a:	b1fe      	cbz	r6, 80041dc <ai_layers_forward_all+0x60>
 800419c:	2700      	movs	r7, #0
 800419e:	4631      	mov	r1, r6
 80041a0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80041a2:	2002      	movs	r0, #2
 80041a4:	47c0      	blx	r8
 80041a6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80041a8:	4628      	mov	r0, r5
 80041aa:	696b      	ldr	r3, [r5, #20]
 80041ac:	4798      	blx	r3
 80041ae:	692e      	ldr	r6, [r5, #16]
 80041b0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80041b2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80041b4:	42b5      	cmp	r5, r6
 80041b6:	f04f 0003 	mov.w	r0, #3
 80041ba:	d007      	beq.n	80041cc <ai_layers_forward_all+0x50>
 80041bc:	47c0      	blx	r8
 80041be:	3701      	adds	r7, #1
 80041c0:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80041c2:	2e00      	cmp	r6, #0
 80041c4:	d1eb      	bne.n	800419e <ai_layers_forward_all+0x22>
 80041c6:	4638      	mov	r0, r7
 80041c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041cc:	2003      	movs	r0, #3
 80041ce:	47c0      	blx	r8
 80041d0:	2300      	movs	r3, #0
 80041d2:	3701      	adds	r7, #1
 80041d4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80041d6:	4638      	mov	r0, r7
 80041d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041dc:	2700      	movs	r7, #0
 80041de:	4638      	mov	r0, r7
 80041e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e4:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80041e6:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80041e8:	2d00      	cmp	r5, #0
 80041ea:	d0f7      	beq.n	80041dc <ai_layers_forward_all+0x60>
 80041ec:	4647      	mov	r7, r8
 80041ee:	696b      	ldr	r3, [r5, #20]
 80041f0:	4628      	mov	r0, r5
 80041f2:	4798      	blx	r3
 80041f4:	462b      	mov	r3, r5
 80041f6:	692d      	ldr	r5, [r5, #16]
 80041f8:	429d      	cmp	r5, r3
 80041fa:	d004      	beq.n	8004206 <ai_layers_forward_all+0x8a>
 80041fc:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80041fe:	3701      	adds	r7, #1
 8004200:	2d00      	cmp	r5, #0
 8004202:	d1f4      	bne.n	80041ee <ai_layers_forward_all+0x72>
 8004204:	e7df      	b.n	80041c6 <ai_layers_forward_all+0x4a>
 8004206:	2300      	movs	r3, #0
 8004208:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800420a:	3701      	adds	r7, #1
 800420c:	e7db      	b.n	80041c6 <ai_layers_forward_all+0x4a>
 800420e:	bf00      	nop

08004210 <forward_dense>:
 8004210:	6983      	ldr	r3, [r0, #24]
 8004212:	881a      	ldrh	r2, [r3, #0]
 8004214:	2a00      	cmp	r2, #0
 8004216:	f000 80cc 	beq.w	80043b2 <forward_dense+0x1a2>
 800421a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421e:	ed2d 8b02 	vpush	{d8}
 8004222:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8004226:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800422a:	b09b      	sub	sp, #108	@ 0x6c
 800422c:	b104      	cbz	r4, 8004230 <forward_dense+0x20>
 800422e:	6824      	ldr	r4, [r4, #0]
 8004230:	2a01      	cmp	r2, #1
 8004232:	f000 81d7 	beq.w	80045e4 <forward_dense+0x3d4>
 8004236:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800423a:	b105      	cbz	r5, 800423e <forward_dense+0x2e>
 800423c:	682d      	ldr	r5, [r5, #0]
 800423e:	2a02      	cmp	r2, #2
 8004240:	f000 80b9 	beq.w	80043b6 <forward_dense+0x1a6>
 8004244:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8004248:	9308      	str	r3, [sp, #32]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 81c1 	beq.w	80045d2 <forward_dense+0x3c2>
 8004250:	4619      	mov	r1, r3
 8004252:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8004256:	6809      	ldr	r1, [r1, #0]
 8004258:	910a      	str	r1, [sp, #40]	@ 0x28
 800425a:	2b01      	cmp	r3, #1
 800425c:	f240 81bb 	bls.w	80045d6 <forward_dense+0x3c6>
 8004260:	9b08      	ldr	r3, [sp, #32]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	9308      	str	r3, [sp, #32]
 8004266:	460b      	mov	r3, r1
 8004268:	68e0      	ldr	r0, [r4, #12]
 800426a:	68ee      	ldr	r6, [r5, #12]
 800426c:	6840      	ldr	r0, [r0, #4]
 800426e:	6999      	ldr	r1, [r3, #24]
 8004270:	9010      	str	r0, [sp, #64]	@ 0x40
 8004272:	6870      	ldr	r0, [r6, #4]
 8004274:	680b      	ldr	r3, [r1, #0]
 8004276:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004278:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 800427c:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8004280:	fb00 f707 	mul.w	r7, r0, r7
 8004284:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8004288:	fa4e f000 	asr.w	r0, lr, r0
 800428c:	2a03      	cmp	r2, #3
 800428e:	900d      	str	r0, [sp, #52]	@ 0x34
 8004290:	f000 81a5 	beq.w	80045de <forward_dense+0x3ce>
 8004294:	f8dc 8028 	ldr.w	r8, [ip, #40]	@ 0x28
 8004298:	f1b8 0f00 	cmp.w	r8, #0
 800429c:	d006      	beq.n	80042ac <forward_dense+0x9c>
 800429e:	f8d8 8000 	ldr.w	r8, [r8]
 80042a2:	f1b8 0f00 	cmp.w	r8, #0
 80042a6:	d001      	beq.n	80042ac <forward_dense+0x9c>
 80042a8:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80042ac:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80042b0:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 80042b4:	fa42 f303 	asr.w	r3, r2, r3
 80042b8:	07db      	lsls	r3, r3, #31
 80042ba:	f140 8177 	bpl.w	80045ac <forward_dense+0x39c>
 80042be:	f04f 0900 	mov.w	r9, #0
 80042c2:	69a3      	ldr	r3, [r4, #24]
 80042c4:	69aa      	ldr	r2, [r5, #24]
 80042c6:	6891      	ldr	r1, [r2, #8]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042cc:	9102      	str	r1, [sp, #8]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	9303      	str	r3, [sp, #12]
 80042d4:	fb07 f606 	mul.w	r6, r7, r6
 80042d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80042da:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 80042de:	009c      	lsls	r4, r3, #2
 80042e0:	4281      	cmp	r1, r0
 80042e2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80042e4:	9409      	str	r4, [sp, #36]	@ 0x24
 80042e6:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 80042ea:	d25d      	bcs.n	80043a8 <forward_dense+0x198>
 80042ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80042ee:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 80045ec <forward_dense+0x3dc>
 80042f2:	08d9      	lsrs	r1, r3, #3
 80042f4:	4693      	mov	fp, r2
 80042f6:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 80042fa:	461a      	mov	r2, r3
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	014b      	lsls	r3, r1, #5
 8004308:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 800430c:	9311      	str	r3, [sp, #68]	@ 0x44
 800430e:	0093      	lsls	r3, r2, #2
 8004310:	930c      	str	r3, [sp, #48]	@ 0x30
 8004312:	f002 0301 	and.w	r3, r2, #1
 8004316:	464c      	mov	r4, r9
 8004318:	9104      	str	r1, [sp, #16]
 800431a:	9305      	str	r3, [sp, #20]
 800431c:	46c1      	mov	r9, r8
 800431e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8004326:	9b08      	ldr	r3, [sp, #32]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d04a      	beq.n	80043c2 <forward_dense+0x1b2>
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	689d      	ldr	r5, [r3, #8]
 8004330:	2c00      	cmp	r4, #0
 8004332:	d049      	beq.n	80043c8 <forward_dense+0x1b8>
 8004334:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004336:	2b04      	cmp	r3, #4
 8004338:	9b02      	ldr	r3, [sp, #8]
 800433a:	d057      	beq.n	80043ec <forward_dense+0x1dc>
 800433c:	4599      	cmp	r9, r3
 800433e:	d927      	bls.n	8004390 <forward_dense+0x180>
 8004340:	9e03      	ldr	r6, [sp, #12]
 8004342:	4618      	mov	r0, r3
 8004344:	2d00      	cmp	r5, #0
 8004346:	d039      	beq.n	80043bc <forward_dense+0x1ac>
 8004348:	ecb5 6a01 	vldmia	r5!, {s12}
 800434c:	45da      	cmp	sl, fp
 800434e:	d911      	bls.n	8004374 <forward_dense+0x164>
 8004350:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80045ec <forward_dense+0x3dc>
 8004354:	465a      	mov	r2, fp
 8004356:	4661      	mov	r1, ip
 8004358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800435c:	ecb2 7a01 	vldmia	r2!, {s14}
 8004360:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004364:	edd3 6a00 	vldr	s13, [r3]
 8004368:	4592      	cmp	sl, r2
 800436a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800436e:	d8f3      	bhi.n	8004358 <forward_dense+0x148>
 8004370:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004374:	eca0 6a01 	vstmia	r0!, {s12}
 8004378:	4548      	cmp	r0, r9
 800437a:	44b4      	add	ip, r6
 800437c:	d3e2      	bcc.n	8004344 <forward_dense+0x134>
 800437e:	9a02      	ldr	r2, [sp, #8]
 8004380:	eba9 0302 	sub.w	r3, r9, r2
 8004384:	3b01      	subs	r3, #1
 8004386:	f023 0303 	bic.w	r3, r3, #3
 800438a:	3304      	adds	r3, #4
 800438c:	18d3      	adds	r3, r2, r3
 800438e:	9302      	str	r3, [sp, #8]
 8004390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004392:	9a01      	ldr	r2, [sp, #4]
 8004394:	4499      	add	r9, r3
 8004396:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004398:	441a      	add	r2, r3
 800439a:	449a      	add	sl, r3
 800439c:	449b      	add	fp, r3
 800439e:	9201      	str	r2, [sp, #4]
 80043a0:	9b02      	ldr	r3, [sp, #8]
 80043a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d3ba      	bcc.n	800431e <forward_dense+0x10e>
 80043a8:	b01b      	add	sp, #108	@ 0x6c
 80043aa:	ecbd 8b02 	vpop	{d8}
 80043ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b2:	6853      	ldr	r3, [r2, #4]
 80043b4:	deff      	udf	#255	@ 0xff
 80043b6:	2300      	movs	r3, #0
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	deff      	udf	#255	@ 0xff
 80043bc:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 80045ec <forward_dense+0x3dc>
 80043c0:	e7c4      	b.n	800434c <forward_dense+0x13c>
 80043c2:	461d      	mov	r5, r3
 80043c4:	2c00      	cmp	r4, #0
 80043c6:	d1b5      	bne.n	8004334 <forward_dense+0x124>
 80043c8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80043ca:	9217      	str	r2, [sp, #92]	@ 0x5c
 80043cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80043ce:	9b02      	ldr	r3, [sp, #8]
 80043d0:	9218      	str	r2, [sp, #96]	@ 0x60
 80043d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043d4:	e9cd 3b13 	strd	r3, fp, [sp, #76]	@ 0x4c
 80043d8:	4413      	add	r3, r2
 80043da:	9302      	str	r3, [sp, #8]
 80043dc:	a813      	add	r0, sp, #76	@ 0x4c
 80043de:	2301      	movs	r3, #1
 80043e0:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 80043e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80043e6:	f000 fa1d 	bl	8004824 <forward_lite_dense_if32of32wf32>
 80043ea:	e7d1      	b.n	8004390 <forward_dense+0x180>
 80043ec:	4599      	cmp	r9, r3
 80043ee:	d9cf      	bls.n	8004390 <forward_dense+0x180>
 80043f0:	9a04      	ldr	r2, [sp, #16]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	1c57      	adds	r7, r2, #1
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80043fa:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 80043fe:	4452      	add	r2, sl
 8004400:	3b01      	subs	r3, #1
 8004402:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 8004406:	9206      	str	r2, [sp, #24]
 8004408:	9307      	str	r3, [sp, #28]
 800440a:	2d00      	cmp	r5, #0
 800440c:	f000 80c3 	beq.w	8004596 <forward_dense+0x386>
 8004410:	9b04      	ldr	r3, [sp, #16]
 8004412:	ecf5 2a01 	vldmia	r5!, {s5}
 8004416:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80045ec <forward_dense+0x3dc>
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80c3 	beq.w	80045a6 <forward_dense+0x396>
 8004420:	f10c 0204 	add.w	r2, ip, #4
 8004424:	f10b 0320 	add.w	r3, fp, #32
 8004428:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 800442c:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 8004430:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8004434:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8004438:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800443c:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 8004440:	ed13 5a04 	vldr	s10, [r3, #-16]
 8004444:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004448:	ed13 6a02 	vldr	s12, [r3, #-8]
 800444c:	ed53 6a01 	vldr	s13, [r3, #-4]
 8004450:	f000 060f 	and.w	r6, r0, #15
 8004454:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004458:	edd6 7a00 	vldr	s15, [r6]
 800445c:	0900      	lsrs	r0, r0, #4
 800445e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004462:	ed90 3a00 	vldr	s6, [r0]
 8004466:	ee67 7a82 	vmul.f32	s15, s15, s4
 800446a:	0908      	lsrs	r0, r1, #4
 800446c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004470:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004474:	f001 010f 	and.w	r1, r1, #15
 8004478:	edd0 3a00 	vldr	s7, [r0]
 800447c:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8004480:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004484:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004488:	0906      	lsrs	r6, r0, #4
 800448a:	ed91 4a00 	vldr	s8, [r1]
 800448e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004492:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004496:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800449a:	f000 000f 	and.w	r0, r0, #15
 800449e:	edd6 4a00 	vldr	s9, [r6]
 80044a2:	eee4 7a85 	vfma.f32	s15, s9, s10
 80044a6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80044aa:	3204      	adds	r2, #4
 80044ac:	ed90 5a00 	vldr	s10, [r0]
 80044b0:	0908      	lsrs	r0, r1, #4
 80044b2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80044b6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80044ba:	f001 010f 	and.w	r1, r1, #15
 80044be:	edd0 5a00 	vldr	s11, [r0]
 80044c2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80044c6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80044ca:	42ba      	cmp	r2, r7
 80044cc:	ed91 6a00 	vldr	s12, [r1]
 80044d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80044d4:	f103 0320 	add.w	r3, r3, #32
 80044d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044dc:	d1a4      	bne.n	8004428 <forward_dense+0x218>
 80044de:	f8dd e018 	ldr.w	lr, [sp, #24]
 80044e2:	f1a7 0804 	sub.w	r8, r7, #4
 80044e6:	9b01      	ldr	r3, [sp, #4]
 80044e8:	459e      	cmp	lr, r3
 80044ea:	d22a      	bcs.n	8004542 <forward_dense+0x332>
 80044ec:	9b07      	ldr	r3, [sp, #28]
 80044ee:	eba3 060e 	sub.w	r6, r3, lr
 80044f2:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 80044f6:	f10e 0208 	add.w	r2, lr, #8
 80044fa:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 80044fe:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 8004502:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004506:	ed52 5a01 	vldr	s11, [r2, #-4]
 800450a:	ed52 6a02 	vldr	s13, [r2, #-8]
 800450e:	f003 010f 	and.w	r1, r3, #15
 8004512:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004516:	edd1 7a00 	vldr	s15, [r1]
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004520:	ed93 6a00 	vldr	s12, [r3]
 8004524:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004528:	42b0      	cmp	r0, r6
 800452a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800452e:	f102 0208 	add.w	r2, r2, #8
 8004532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004536:	d1e4      	bne.n	8004502 <forward_dense+0x2f2>
 8004538:	f10a 0a01 	add.w	sl, sl, #1
 800453c:	44d0      	add	r8, sl
 800453e:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8004542:	9b05      	ldr	r3, [sp, #20]
 8004544:	b1cb      	cbz	r3, 800457a <forward_dense+0x36a>
 8004546:	f898 3000 	ldrb.w	r3, [r8]
 800454a:	edde 7a00 	vldr	s15, [lr]
 800454e:	9a03      	ldr	r2, [sp, #12]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004556:	edd3 6a00 	vldr	s13, [r3]
 800455a:	9b00      	ldr	r3, [sp, #0]
 800455c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004560:	4494      	add	ip, r2
 8004562:	4417      	add	r7, r2
 8004564:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004568:	eca3 7a01 	vstmia	r3!, {s14}
 800456c:	4599      	cmp	r9, r3
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	f63f af4b 	bhi.w	800440a <forward_dense+0x1fa>
 8004574:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004578:	e701      	b.n	800437e <forward_dense+0x16e>
 800457a:	9b00      	ldr	r3, [sp, #0]
 800457c:	9a03      	ldr	r2, [sp, #12]
 800457e:	ee72 2a87 	vadd.f32	s5, s5, s14
 8004582:	4494      	add	ip, r2
 8004584:	ece3 2a01 	vstmia	r3!, {s5}
 8004588:	454b      	cmp	r3, r9
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	4417      	add	r7, r2
 800458e:	d2f1      	bcs.n	8004574 <forward_dense+0x364>
 8004590:	2d00      	cmp	r5, #0
 8004592:	f47f af3d 	bne.w	8004410 <forward_dense+0x200>
 8004596:	9b04      	ldr	r3, [sp, #16]
 8004598:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80045ec <forward_dense+0x3dc>
 800459c:	eef0 2a48 	vmov.f32	s5, s16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f47f af3d 	bne.w	8004420 <forward_dense+0x210>
 80045a6:	46de      	mov	lr, fp
 80045a8:	46e0      	mov	r8, ip
 80045aa:	e79c      	b.n	80044e6 <forward_dense+0x2d6>
 80045ac:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80045b0:	f1b8 0f00 	cmp.w	r8, #0
 80045b4:	f43f ae85 	beq.w	80042c2 <forward_dense+0xb2>
 80045b8:	e9d8 0100 	ldrd	r0, r1, [r8]
 80045bc:	f000 fb82 	bl	8004cc4 <ai_array_get_byte_size>
 80045c0:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80045c4:	4602      	mov	r2, r0
 80045c6:	4641      	mov	r1, r8
 80045c8:	4648      	mov	r0, r9
 80045ca:	f000 fa85 	bl	8004ad8 <st_int8_copy>
 80045ce:	46c1      	mov	r9, r8
 80045d0:	e677      	b.n	80042c2 <forward_dense+0xb2>
 80045d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80045d4:	e648      	b.n	8004268 <forward_dense+0x58>
 80045d6:	2300      	movs	r3, #0
 80045d8:	9308      	str	r3, [sp, #32]
 80045da:	460b      	mov	r3, r1
 80045dc:	e644      	b.n	8004268 <forward_dense+0x58>
 80045de:	2300      	movs	r3, #0
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	deff      	udf	#255	@ 0xff
 80045e4:	2300      	movs	r3, #0
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	deff      	udf	#255	@ 0xff
 80045ea:	bf00      	nop
 80045ec:	00000000 	.word	0x00000000

080045f0 <forward_relu>:
 80045f0:	6982      	ldr	r2, [r0, #24]
 80045f2:	8813      	ldrh	r3, [r2, #0]
 80045f4:	b323      	cbz	r3, 8004640 <forward_relu+0x50>
 80045f6:	6851      	ldr	r1, [r2, #4]
 80045f8:	684a      	ldr	r2, [r1, #4]
 80045fa:	b102      	cbz	r2, 80045fe <forward_relu+0xe>
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	f000 808d 	beq.w	800471e <forward_relu+0x12e>
 8004604:	b470      	push	{r4, r5, r6}
 8004606:	6909      	ldr	r1, [r1, #16]
 8004608:	b101      	cbz	r1, 800460c <forward_relu+0x1c>
 800460a:	6809      	ldr	r1, [r1, #0]
 800460c:	69c6      	ldr	r6, [r0, #28]
 800460e:	b1ce      	cbz	r6, 8004644 <forward_relu+0x54>
 8004610:	6873      	ldr	r3, [r6, #4]
 8004612:	6988      	ldr	r0, [r1, #24]
 8004614:	6991      	ldr	r1, [r2, #24]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d044      	beq.n	80046a4 <forward_relu+0xb4>
 800461a:	6893      	ldr	r3, [r2, #8]
 800461c:	6880      	ldr	r0, [r0, #8]
 800461e:	6889      	ldr	r1, [r1, #8]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	d073      	beq.n	800470c <forward_relu+0x11c>
 8004624:	68d5      	ldr	r5, [r2, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800462c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8004630:	429d      	cmp	r5, r3
 8004632:	fb04 f202 	mul.w	r2, r4, r2
 8004636:	d1f9      	bne.n	800462c <forward_relu+0x3c>
 8004638:	68b3      	ldr	r3, [r6, #8]
 800463a:	bc70      	pop	{r4, r5, r6}
 800463c:	f000 b874 	b.w	8004728 <forward_lite_nl_relu_generic_if32of32_kernel>
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	deff      	udf	#255	@ 0xff
 8004644:	6893      	ldr	r3, [r2, #8]
 8004646:	6989      	ldr	r1, [r1, #24]
 8004648:	6990      	ldr	r0, [r2, #24]
 800464a:	6889      	ldr	r1, [r1, #8]
 800464c:	6884      	ldr	r4, [r0, #8]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	d05e      	beq.n	8004710 <forward_relu+0x120>
 8004652:	68d5      	ldr	r5, [r2, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800465a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800465e:	429d      	cmp	r5, r3
 8004660:	fb00 f202 	mul.w	r2, r0, r2
 8004664:	d1f9      	bne.n	800465a <forward_relu+0x6a>
 8004666:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800466a:	3b01      	subs	r3, #1
 800466c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8004670:	4294      	cmp	r4, r2
 8004672:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004676:	d813      	bhi.n	80046a0 <forward_relu+0xb0>
 8004678:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004724 <forward_relu+0x134>
 800467c:	3204      	adds	r2, #4
 800467e:	3104      	adds	r1, #4
 8004680:	4613      	mov	r3, r2
 8004682:	ed72 7a01 	vldmdb	r2!, {s15}
 8004686:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468e:	f1a3 0308 	sub.w	r3, r3, #8
 8004692:	bfb8      	it	lt
 8004694:	eef0 7a47 	vmovlt.f32	s15, s14
 8004698:	429c      	cmp	r4, r3
 800469a:	ed61 7a01 	vstmdb	r1!, {s15}
 800469e:	d9ef      	bls.n	8004680 <forward_relu+0x90>
 80046a0:	bc70      	pop	{r4, r5, r6}
 80046a2:	4770      	bx	lr
 80046a4:	688c      	ldr	r4, [r1, #8]
 80046a6:	6891      	ldr	r1, [r2, #8]
 80046a8:	6880      	ldr	r0, [r0, #8]
 80046aa:	0a09      	lsrs	r1, r1, #8
 80046ac:	d032      	beq.n	8004714 <forward_relu+0x124>
 80046ae:	68d5      	ldr	r5, [r2, #12]
 80046b0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80046b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80046b8:	4295      	cmp	r5, r2
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	d1f9      	bne.n	80046b4 <forward_relu+0xc4>
 80046c0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80046c4:	3a01      	subs	r2, #1
 80046c6:	68b1      	ldr	r1, [r6, #8]
 80046c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80046cc:	429c      	cmp	r4, r3
 80046ce:	ed91 7a00 	vldr	s14, [r1]
 80046d2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80046d6:	d8e3      	bhi.n	80046a0 <forward_relu+0xb0>
 80046d8:	2500      	movs	r5, #0
 80046da:	3304      	adds	r3, #4
 80046dc:	1d02      	adds	r2, r0, #4
 80046de:	ed53 7a01 	vldr	s15, [r3, #-4]
 80046e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	f1a3 0104 	sub.w	r1, r3, #4
 80046ee:	f1a3 0308 	sub.w	r3, r3, #8
 80046f2:	d405      	bmi.n	8004700 <forward_relu+0x110>
 80046f4:	429c      	cmp	r4, r3
 80046f6:	f842 5d04 	str.w	r5, [r2, #-4]!
 80046fa:	d8d1      	bhi.n	80046a0 <forward_relu+0xb0>
 80046fc:	460b      	mov	r3, r1
 80046fe:	e7ee      	b.n	80046de <forward_relu+0xee>
 8004700:	429c      	cmp	r4, r3
 8004702:	ed62 7a01 	vstmdb	r2!, {s15}
 8004706:	d8cb      	bhi.n	80046a0 <forward_relu+0xb0>
 8004708:	460b      	mov	r3, r1
 800470a:	e7e8      	b.n	80046de <forward_relu+0xee>
 800470c:	2201      	movs	r2, #1
 800470e:	e793      	b.n	8004638 <forward_relu+0x48>
 8004710:	4622      	mov	r2, r4
 8004712:	e7b1      	b.n	8004678 <forward_relu+0x88>
 8004714:	68b2      	ldr	r2, [r6, #8]
 8004716:	4623      	mov	r3, r4
 8004718:	ed92 7a00 	vldr	s14, [r2]
 800471c:	e7dc      	b.n	80046d8 <forward_relu+0xe8>
 800471e:	2300      	movs	r3, #0
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	deff      	udf	#255	@ 0xff
 8004724:	00000000 	.word	0x00000000

08004728 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8004728:	edd3 6a02 	vldr	s13, [r3, #8]
 800472c:	ed93 7a00 	vldr	s14, [r3]
 8004730:	ed93 6a01 	vldr	s12, [r3, #4]
 8004734:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473c:	d42a      	bmi.n	8004794 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800473e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004742:	3a01      	subs	r2, #1
 8004744:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004748:	4561      	cmp	r1, ip
 800474a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800474e:	d85d      	bhi.n	800480c <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8004750:	1d11      	adds	r1, r2, #4
 8004752:	f10c 0304 	add.w	r3, ip, #4
 8004756:	4408      	add	r0, r1
 8004758:	ebac 0202 	sub.w	r2, ip, r2
 800475c:	e00c      	b.n	8004778 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800475e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004766:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800476a:	db01      	blt.n	8004770 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800476c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8004770:	4293      	cmp	r3, r2
 8004772:	ed60 7a01 	vstmdb	r0!, {s15}
 8004776:	d00c      	beq.n	8004792 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8004778:	ed73 7a01 	vldmdb	r3!, {s15}
 800477c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004784:	daeb      	bge.n	800475e <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8004786:	eef0 7a66 	vmov.f32	s15, s13
 800478a:	4293      	cmp	r3, r2
 800478c:	ed60 7a01 	vstmdb	r0!, {s15}
 8004790:	d1f2      	bne.n	8004778 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8004792:	4770      	bx	lr
 8004794:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004798:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800479c:	3a01      	subs	r2, #1
 800479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a2:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80047a6:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80047aa:	d017      	beq.n	80047dc <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 80047ac:	4561      	cmp	r1, ip
 80047ae:	d82d      	bhi.n	800480c <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80047b0:	1d11      	adds	r1, r2, #4
 80047b2:	f10c 0304 	add.w	r3, ip, #4
 80047b6:	4401      	add	r1, r0
 80047b8:	ebac 0202 	sub.w	r2, ip, r2
 80047bc:	ed73 7a01 	vldmdb	r3!, {s15}
 80047c0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80047c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80047d0:	d81d      	bhi.n	800480e <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 80047d2:	4293      	cmp	r3, r2
 80047d4:	ed61 6a01 	vstmdb	r1!, {s13}
 80047d8:	d1f0      	bne.n	80047bc <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 80047da:	4770      	bx	lr
 80047dc:	4561      	cmp	r1, ip
 80047de:	d815      	bhi.n	800480c <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80047e0:	1d11      	adds	r1, r2, #4
 80047e2:	b500      	push	{lr}
 80047e4:	f10c 0304 	add.w	r3, ip, #4
 80047e8:	f04f 0e00 	mov.w	lr, #0
 80047ec:	4401      	add	r1, r0
 80047ee:	ebac 0202 	sub.w	r2, ip, r2
 80047f2:	ed73 7a01 	vldmdb	r3!, {s15}
 80047f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fe:	d40b      	bmi.n	8004818 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 8004800:	4293      	cmp	r3, r2
 8004802:	f841 ed04 	str.w	lr, [r1, #-4]!
 8004806:	d1f4      	bne.n	80047f2 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8004808:	f85d fb04 	ldr.w	pc, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	4293      	cmp	r3, r2
 8004810:	ed61 7a01 	vstmdb	r1!, {s15}
 8004814:	d1d2      	bne.n	80047bc <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8004816:	4770      	bx	lr
 8004818:	4293      	cmp	r3, r2
 800481a:	ed61 7a01 	vstmdb	r1!, {s15}
 800481e:	d1e8      	bne.n	80047f2 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8004820:	e7f2      	b.n	8004808 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8004822:	bf00      	nop

08004824 <forward_lite_dense_if32of32wf32>:
 8004824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004828:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800482c:	6801      	ldr	r1, [r0, #0]
 800482e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	b083      	sub	sp, #12
 8004838:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800483c:	4299      	cmp	r1, r3
 800483e:	9100      	str	r1, [sp, #0]
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	f080 811e 	bcs.w	8004a82 <forward_lite_dense_if32of32wf32+0x25e>
 8004846:	6904      	ldr	r4, [r0, #16]
 8004848:	4607      	mov	r7, r0
 800484a:	0096      	lsls	r6, r2, #2
 800484c:	9b00      	ldr	r3, [sp, #0]
 800484e:	68bd      	ldr	r5, [r7, #8]
 8004850:	eb03 0e06 	add.w	lr, r3, r6
 8004854:	459e      	cmp	lr, r3
 8004856:	461e      	mov	r6, r3
 8004858:	f240 8104 	bls.w	8004a64 <forward_lite_dense_if32of32wf32+0x240>
 800485c:	f1a4 0c10 	sub.w	ip, r4, #16
 8004860:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8004864:	f10c 0c01 	add.w	ip, ip, #1
 8004868:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800486c:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8004870:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8004874:	2c0f      	cmp	r4, #15
 8004876:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8004ad4 <forward_lite_dense_if32of32wf32+0x2b0>
 800487a:	f240 8105 	bls.w	8004a88 <forward_lite_dense_if32of32wf32+0x264>
 800487e:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8004882:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8004886:	4621      	mov	r1, r4
 8004888:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800488c:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8004890:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8004894:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8004898:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800489c:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80048a0:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 80048a4:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 80048a8:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 80048ac:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 80048b0:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 80048b4:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 80048b8:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 80048bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80048c0:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 80048c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80048c8:	3910      	subs	r1, #16
 80048ca:	290f      	cmp	r1, #15
 80048cc:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 80048d0:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 80048d4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80048d8:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80048dc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80048e0:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 80048e4:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 80048e8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80048ec:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 80048f0:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 80048f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80048f8:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 80048fc:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8004900:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004904:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8004908:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800490c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004910:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8004914:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8004918:	eee4 7a24 	vfma.f32	s15, s8, s9
 800491c:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8004920:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8004924:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004928:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800492c:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8004930:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004934:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8004938:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800493c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004940:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004944:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004948:	eee4 7a24 	vfma.f32	s15, s8, s9
 800494c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004950:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004954:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004958:	d896      	bhi.n	8004888 <forward_lite_dense_if32of32wf32+0x64>
 800495a:	eb05 020b 	add.w	r2, r5, fp
 800495e:	f004 010f 	and.w	r1, r4, #15
 8004962:	4663      	mov	r3, ip
 8004964:	2903      	cmp	r1, #3
 8004966:	d95f      	bls.n	8004a28 <forward_lite_dense_if32of32wf32+0x204>
 8004968:	edd2 6a01 	vldr	s13, [r2, #4]
 800496c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004970:	ed93 6a00 	vldr	s12, [r3]
 8004974:	ed93 5a02 	vldr	s10, [r3, #8]
 8004978:	edd2 5a02 	vldr	s11, [r2, #8]
 800497c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004980:	edd2 6a00 	vldr	s13, [r2]
 8004984:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004988:	1f08      	subs	r0, r1, #4
 800498a:	2803      	cmp	r0, #3
 800498c:	ed93 6a03 	vldr	s12, [r3, #12]
 8004990:	edd2 6a03 	vldr	s13, [r2, #12]
 8004994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004998:	eee5 7a25 	vfma.f32	s15, s10, s11
 800499c:	eee6 7a26 	vfma.f32	s15, s12, s13
 80049a0:	eeb0 7a67 	vmov.f32	s14, s15
 80049a4:	d938      	bls.n	8004a18 <forward_lite_dense_if32of32wf32+0x1f4>
 80049a6:	edd2 6a05 	vldr	s13, [r2, #20]
 80049aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80049ae:	ed93 6a04 	vldr	s12, [r3, #16]
 80049b2:	ed93 5a06 	vldr	s10, [r3, #24]
 80049b6:	edd2 5a06 	vldr	s11, [r2, #24]
 80049ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80049be:	edd2 6a04 	vldr	s13, [r2, #16]
 80049c2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80049c6:	f1a1 0a08 	sub.w	sl, r1, #8
 80049ca:	f1ba 0f03 	cmp.w	sl, #3
 80049ce:	ed93 6a07 	vldr	s12, [r3, #28]
 80049d2:	edd2 6a07 	vldr	s13, [r2, #28]
 80049d6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80049da:	eee6 7a26 	vfma.f32	s15, s12, s13
 80049de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049e2:	d919      	bls.n	8004a18 <forward_lite_dense_if32of32wf32+0x1f4>
 80049e4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80049e8:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80049ec:	ed92 6a08 	vldr	s12, [r2, #32]
 80049f0:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80049f4:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80049f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80049fc:	edd3 6a08 	vldr	s13, [r3, #32]
 8004a00:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004a04:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8004a08:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8004a0c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004a10:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a18:	0880      	lsrs	r0, r0, #2
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8004a20:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8004a24:	f001 0103 	and.w	r1, r1, #3
 8004a28:	b1a9      	cbz	r1, 8004a56 <forward_lite_dense_if32of32wf32+0x232>
 8004a2a:	edd3 6a00 	vldr	s13, [r3]
 8004a2e:	edd2 7a00 	vldr	s15, [r2]
 8004a32:	3901      	subs	r1, #1
 8004a34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a38:	d00d      	beq.n	8004a56 <forward_lite_dense_if32of32wf32+0x232>
 8004a3a:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a3e:	edd2 7a01 	vldr	s15, [r2, #4]
 8004a42:	2901      	cmp	r1, #1
 8004a44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a48:	d005      	beq.n	8004a56 <forward_lite_dense_if32of32wf32+0x232>
 8004a4a:	edd2 6a02 	vldr	s13, [r2, #8]
 8004a4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a56:	444d      	add	r5, r9
 8004a58:	eca6 7a01 	vstmia	r6!, {s14}
 8004a5c:	45b6      	cmp	lr, r6
 8004a5e:	f63f af09 	bhi.w	8004874 <forward_lite_dense_if32of32wf32+0x50>
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	b99b      	cbnz	r3, 8004a90 <forward_lite_dense_if32of32wf32+0x26c>
 8004a68:	9b00      	ldr	r3, [sp, #0]
 8004a6a:	9901      	ldr	r1, [sp, #4]
 8004a6c:	693c      	ldr	r4, [r7, #16]
 8004a6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004a72:	4299      	cmp	r1, r3
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8004a7a:	ea4f 0682 	mov.w	r6, r2, lsl #2
 8004a7e:	f63f aee5 	bhi.w	800484c <forward_lite_dense_if32of32wf32+0x28>
 8004a82:	b003      	add	sp, #12
 8004a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a88:	4621      	mov	r1, r4
 8004a8a:	462a      	mov	r2, r5
 8004a8c:	4643      	mov	r3, r8
 8004a8e:	e769      	b.n	8004964 <forward_lite_dense_if32of32wf32+0x140>
 8004a90:	2a00      	cmp	r2, #0
 8004a92:	d0e9      	beq.n	8004a68 <forward_lite_dense_if32of32wf32+0x244>
 8004a94:	9a00      	ldr	r2, [sp, #0]
 8004a96:	ed93 7a00 	vldr	s14, [r3]
 8004a9a:	edd2 7a00 	vldr	s15, [r2]
 8004a9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	edc2 7a00 	vstr	s15, [r2]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	2a01      	cmp	r2, #1
 8004aac:	d9dc      	bls.n	8004a68 <forward_lite_dense_if32of32wf32+0x244>
 8004aae:	1d19      	adds	r1, r3, #4
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	ed91 7a00 	vldr	s14, [r1]
 8004ab8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004abc:	edd2 7a00 	vldr	s15, [r2]
 8004ac0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	ece1 7a01 	vstmia	r1!, {s15}
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d8f0      	bhi.n	8004ab2 <forward_lite_dense_if32of32wf32+0x28e>
 8004ad0:	e7ca      	b.n	8004a68 <forward_lite_dense_if32of32wf32+0x244>
 8004ad2:	bf00      	nop
 8004ad4:	00000000 	.word	0x00000000

08004ad8 <st_int8_copy>:
 8004ad8:	4288      	cmp	r0, r1
 8004ada:	d056      	beq.n	8004b8a <st_int8_copy+0xb2>
 8004adc:	2a00      	cmp	r2, #0
 8004ade:	d054      	beq.n	8004b8a <st_int8_copy+0xb2>
 8004ae0:	4288      	cmp	r0, r1
 8004ae2:	d353      	bcc.n	8004b8c <st_int8_copy+0xb4>
 8004ae4:	078b      	lsls	r3, r1, #30
 8004ae6:	d102      	bne.n	8004aee <st_int8_copy+0x16>
 8004ae8:	e009      	b.n	8004afe <st_int8_copy+0x26>
 8004aea:	2a00      	cmp	r2, #0
 8004aec:	d05b      	beq.n	8004ba6 <st_int8_copy+0xce>
 8004aee:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8004af2:	f801 3b01 	strb.w	r3, [r1], #1
 8004af6:	078b      	lsls	r3, r1, #30
 8004af8:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 8004afc:	d1f5      	bne.n	8004aea <st_int8_copy+0x12>
 8004afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b02:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8004b06:	d068      	beq.n	8004bda <st_int8_copy+0x102>
 8004b08:	ea40 0301 	orr.w	r3, r0, r1
 8004b0c:	075b      	lsls	r3, r3, #29
 8004b0e:	d14b      	bne.n	8004ba8 <st_int8_copy+0xd0>
 8004b10:	f1be 0f01 	cmp.w	lr, #1
 8004b14:	d048      	beq.n	8004ba8 <st_int8_copy+0xd0>
 8004b16:	f100 0310 	add.w	r3, r0, #16
 8004b1a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8004b1e:	f101 0c10 	add.w	ip, r1, #16
 8004b22:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8004b26:	ed13 6b04 	vldr	d6, [r3, #-16]
 8004b2a:	ed13 7b02 	vldr	d7, [r3, #-8]
 8004b2e:	3310      	adds	r3, #16
 8004b30:	4573      	cmp	r3, lr
 8004b32:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8004b36:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8004b3a:	f10c 0c10 	add.w	ip, ip, #16
 8004b3e:	d1f2      	bne.n	8004b26 <st_int8_copy+0x4e>
 8004b40:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8004b44:	4421      	add	r1, r4
 8004b46:	4420      	add	r0, r4
 8004b48:	f002 0203 	and.w	r2, r2, #3
 8004b4c:	b16b      	cbz	r3, 8004b6a <st_int8_copy+0x92>
 8004b4e:	6804      	ldr	r4, [r0, #0]
 8004b50:	600c      	str	r4, [r1, #0]
 8004b52:	1e5c      	subs	r4, r3, #1
 8004b54:	d005      	beq.n	8004b62 <st_int8_copy+0x8a>
 8004b56:	6845      	ldr	r5, [r0, #4]
 8004b58:	604d      	str	r5, [r1, #4]
 8004b5a:	2c01      	cmp	r4, #1
 8004b5c:	bf1c      	itt	ne
 8004b5e:	6884      	ldrne	r4, [r0, #8]
 8004b60:	608c      	strne	r4, [r1, #8]
 8004b62:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004b66:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004b6a:	b162      	cbz	r2, 8004b86 <st_int8_copy+0xae>
 8004b6c:	f990 3000 	ldrsb.w	r3, [r0]
 8004b70:	700b      	strb	r3, [r1, #0]
 8004b72:	3a01      	subs	r2, #1
 8004b74:	d007      	beq.n	8004b86 <st_int8_copy+0xae>
 8004b76:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004b7a:	704b      	strb	r3, [r1, #1]
 8004b7c:	2a01      	cmp	r2, #1
 8004b7e:	bf1c      	itt	ne
 8004b80:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8004b84:	708b      	strbne	r3, [r1, #2]
 8004b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b8a:	4770      	bx	lr
 8004b8c:	1883      	adds	r3, r0, r2
 8004b8e:	428b      	cmp	r3, r1
 8004b90:	d9a8      	bls.n	8004ae4 <st_int8_copy+0xc>
 8004b92:	4283      	cmp	r3, r0
 8004b94:	440a      	add	r2, r1
 8004b96:	d9f8      	bls.n	8004b8a <st_int8_copy+0xb2>
 8004b98:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8004b9c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8004ba0:	4283      	cmp	r3, r0
 8004ba2:	d1f9      	bne.n	8004b98 <st_int8_copy+0xc0>
 8004ba4:	4770      	bx	lr
 8004ba6:	4770      	bx	lr
 8004ba8:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8004bac:	460b      	mov	r3, r1
 8004bae:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8004bb2:	4684      	mov	ip, r0
 8004bb4:	f8dc 7000 	ldr.w	r7, [ip]
 8004bb8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8004bbc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8004bc0:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8004bc4:	f8c3 800c 	str.w	r8, [r3, #12]
 8004bc8:	601f      	str	r7, [r3, #0]
 8004bca:	605e      	str	r6, [r3, #4]
 8004bcc:	609d      	str	r5, [r3, #8]
 8004bce:	3310      	adds	r3, #16
 8004bd0:	459e      	cmp	lr, r3
 8004bd2:	f10c 0c10 	add.w	ip, ip, #16
 8004bd6:	d1ed      	bne.n	8004bb4 <st_int8_copy+0xdc>
 8004bd8:	e7b2      	b.n	8004b40 <st_int8_copy+0x68>
 8004bda:	0893      	lsrs	r3, r2, #2
 8004bdc:	f002 0203 	and.w	r2, r2, #3
 8004be0:	e7b4      	b.n	8004b4c <st_int8_copy+0x74>
 8004be2:	bf00      	nop

08004be4 <ai_array_to_buffer_fmt>:
 8004be4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d053      	beq.n	8004c94 <ai_array_to_buffer_fmt+0xb0>
 8004bec:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca0 <ai_array_to_buffer_fmt+0xbc>)
 8004bee:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d010      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004bf6:	dc21      	bgt.n	8004c3c <ai_array_to_buffer_fmt+0x58>
 8004bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca4 <ai_array_to_buffer_fmt+0xc0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00c      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004bfe:	dd0f      	ble.n	8004c20 <ai_array_to_buffer_fmt+0x3c>
 8004c00:	4a29      	ldr	r2, [pc, #164]	@ (8004ca8 <ai_array_to_buffer_fmt+0xc4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d008      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c06:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c0e:	4a27      	ldr	r2, [pc, #156]	@ (8004cac <ai_array_to_buffer_fmt+0xc8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	bf0c      	ite	eq
 8004c14:	4613      	moveq	r3, r2
 8004c16:	2340      	movne	r3, #64	@ 0x40
 8004c18:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8004c1c:	4318      	orrs	r0, r3
 8004c1e:	4770      	bx	lr
 8004c20:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d0f7      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c28:	dd2a      	ble.n	8004c80 <ai_array_to_buffer_fmt+0x9c>
 8004c2a:	4a21      	ldr	r2, [pc, #132]	@ (8004cb0 <ai_array_to_buffer_fmt+0xcc>)
 8004c2c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8004c30:	4293      	cmp	r3, r2
 8004c32:	bf0c      	ite	eq
 8004c34:	4613      	moveq	r3, r2
 8004c36:	2340      	movne	r3, #64	@ 0x40
 8004c38:	4318      	orrs	r0, r3
 8004c3a:	4770      	bx	lr
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <ai_array_to_buffer_fmt+0xd0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d0ea      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c42:	dd0f      	ble.n	8004c64 <ai_array_to_buffer_fmt+0x80>
 8004c44:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb8 <ai_array_to_buffer_fmt+0xd4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d0e6      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c4a:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d0e2      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c52:	4a1a      	ldr	r2, [pc, #104]	@ (8004cbc <ai_array_to_buffer_fmt+0xd8>)
 8004c54:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	bf0c      	ite	eq
 8004c5c:	4613      	moveq	r3, r2
 8004c5e:	2340      	movne	r3, #64	@ 0x40
 8004c60:	4318      	orrs	r0, r3
 8004c62:	4770      	bx	lr
 8004c64:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d0d5      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c6c:	3207      	adds	r2, #7
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d0d2      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c72:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8004c76:	4293      	cmp	r3, r2
 8004c78:	bf0c      	ite	eq
 8004c7a:	4613      	moveq	r3, r2
 8004c7c:	2340      	movne	r3, #64	@ 0x40
 8004c7e:	e7cb      	b.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c80:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d0c7      	beq.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c88:	3280      	adds	r2, #128	@ 0x80
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	bf0c      	ite	eq
 8004c8e:	4613      	moveq	r3, r2
 8004c90:	2340      	movne	r3, #64	@ 0x40
 8004c92:	e7c1      	b.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <ai_array_to_buffer_fmt+0xdc>)
 8004c96:	4003      	ands	r3, r0
 8004c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c9c:	e7bc      	b.n	8004c18 <ai_array_to_buffer_fmt+0x34>
 8004c9e:	bf00      	nop
 8004ca0:	00840040 	.word	0x00840040
 8004ca4:	00040840 	.word	0x00040840
 8004ca8:	00041040 	.word	0x00041040
 8004cac:	0004084f 	.word	0x0004084f
 8004cb0:	00040447 	.word	0x00040447
 8004cb4:	00840840 	.word	0x00840840
 8004cb8:	00841040 	.word	0x00841040
 8004cbc:	0084084f 	.word	0x0084084f
 8004cc0:	00803fff 	.word	0x00803fff

08004cc4 <ai_array_get_byte_size>:
 8004cc4:	b319      	cbz	r1, 8004d0e <ai_array_get_byte_size+0x4a>
 8004cc6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8004cd2:	3307      	adds	r3, #7
 8004cd4:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8004cd8:	f023 0307 	bic.w	r3, r3, #7
 8004cdc:	2a04      	cmp	r2, #4
 8004cde:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8004ce2:	fa23 f101 	lsr.w	r1, r3, r1
 8004ce6:	d00b      	beq.n	8004d00 <ai_array_get_byte_size+0x3c>
 8004ce8:	2a08      	cmp	r2, #8
 8004cea:	d002      	beq.n	8004cf2 <ai_array_get_byte_size+0x2e>
 8004cec:	3107      	adds	r1, #7
 8004cee:	08c8      	lsrs	r0, r1, #3
 8004cf0:	4770      	bx	lr
 8004cf2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8004cf6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8004cfa:	3107      	adds	r1, #7
 8004cfc:	08c8      	lsrs	r0, r1, #3
 8004cfe:	4770      	bx	lr
 8004d00:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8004d04:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8004d08:	3107      	adds	r1, #7
 8004d0a:	08c8      	lsrs	r0, r1, #3
 8004d0c:	4770      	bx	lr
 8004d0e:	4608      	mov	r0, r1
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop

08004d14 <ai_array_get_data_byte_size>:
 8004d14:	b169      	cbz	r1, 8004d32 <ai_array_get_data_byte_size+0x1e>
 8004d16:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004d1a:	fb03 f101 	mul.w	r1, r3, r1
 8004d1e:	1dcb      	adds	r3, r1, #7
 8004d20:	f023 0307 	bic.w	r3, r3, #7
 8004d24:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8004d28:	fa23 f000 	lsr.w	r0, r3, r0
 8004d2c:	3007      	adds	r0, #7
 8004d2e:	08c0      	lsrs	r0, r0, #3
 8004d30:	4770      	bx	lr
 8004d32:	4608      	mov	r0, r1
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop

08004d38 <ai_version_get>:
 8004d38:	0212      	lsls	r2, r2, #8
 8004d3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004d3e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8004d42:	4770      	bx	lr

08004d44 <get_tensor_byte_size>:
 8004d44:	b410      	push	{r4}
 8004d46:	6983      	ldr	r3, [r0, #24]
 8004d48:	68c4      	ldr	r4, [r0, #12]
 8004d4a:	6941      	ldr	r1, [r0, #20]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68e0      	ldr	r0, [r4, #12]
 8004d50:	4a07      	ldr	r2, [pc, #28]	@ (8004d70 <get_tensor_byte_size+0x2c>)
 8004d52:	68c9      	ldr	r1, [r1, #12]
 8004d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d58:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8004d5c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d60:	fb01 f000 	mul.w	r0, r1, r0
 8004d64:	4293      	cmp	r3, r2
 8004d66:	bf04      	itt	eq
 8004d68:	3007      	addeq	r0, #7
 8004d6a:	08c0      	lsreq	r0, r0, #3
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	000400c0 	.word	0x000400c0

08004d74 <malloc>:
 8004d74:	4b02      	ldr	r3, [pc, #8]	@ (8004d80 <malloc+0xc>)
 8004d76:	4601      	mov	r1, r0
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f000 b825 	b.w	8004dc8 <_malloc_r>
 8004d7e:	bf00      	nop
 8004d80:	200006ac 	.word	0x200006ac

08004d84 <sbrk_aligned>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	4e0f      	ldr	r6, [pc, #60]	@ (8004dc4 <sbrk_aligned+0x40>)
 8004d88:	460c      	mov	r4, r1
 8004d8a:	6831      	ldr	r1, [r6, #0]
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	b911      	cbnz	r1, 8004d96 <sbrk_aligned+0x12>
 8004d90:	f001 f8b8 	bl	8005f04 <_sbrk_r>
 8004d94:	6030      	str	r0, [r6, #0]
 8004d96:	4621      	mov	r1, r4
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f001 f8b3 	bl	8005f04 <_sbrk_r>
 8004d9e:	1c43      	adds	r3, r0, #1
 8004da0:	d103      	bne.n	8004daa <sbrk_aligned+0x26>
 8004da2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004da6:	4620      	mov	r0, r4
 8004da8:	bd70      	pop	{r4, r5, r6, pc}
 8004daa:	1cc4      	adds	r4, r0, #3
 8004dac:	f024 0403 	bic.w	r4, r4, #3
 8004db0:	42a0      	cmp	r0, r4
 8004db2:	d0f8      	beq.n	8004da6 <sbrk_aligned+0x22>
 8004db4:	1a21      	subs	r1, r4, r0
 8004db6:	4628      	mov	r0, r5
 8004db8:	f001 f8a4 	bl	8005f04 <_sbrk_r>
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d1f2      	bne.n	8004da6 <sbrk_aligned+0x22>
 8004dc0:	e7ef      	b.n	8004da2 <sbrk_aligned+0x1e>
 8004dc2:	bf00      	nop
 8004dc4:	20000a9c 	.word	0x20000a9c

08004dc8 <_malloc_r>:
 8004dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dcc:	1ccd      	adds	r5, r1, #3
 8004dce:	f025 0503 	bic.w	r5, r5, #3
 8004dd2:	3508      	adds	r5, #8
 8004dd4:	2d0c      	cmp	r5, #12
 8004dd6:	bf38      	it	cc
 8004dd8:	250c      	movcc	r5, #12
 8004dda:	2d00      	cmp	r5, #0
 8004ddc:	4606      	mov	r6, r0
 8004dde:	db01      	blt.n	8004de4 <_malloc_r+0x1c>
 8004de0:	42a9      	cmp	r1, r5
 8004de2:	d904      	bls.n	8004dee <_malloc_r+0x26>
 8004de4:	230c      	movs	r3, #12
 8004de6:	6033      	str	r3, [r6, #0]
 8004de8:	2000      	movs	r0, #0
 8004dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ec4 <_malloc_r+0xfc>
 8004df2:	f000 f869 	bl	8004ec8 <__malloc_lock>
 8004df6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dfa:	461c      	mov	r4, r3
 8004dfc:	bb44      	cbnz	r4, 8004e50 <_malloc_r+0x88>
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4630      	mov	r0, r6
 8004e02:	f7ff ffbf 	bl	8004d84 <sbrk_aligned>
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	4604      	mov	r4, r0
 8004e0a:	d158      	bne.n	8004ebe <_malloc_r+0xf6>
 8004e0c:	f8d8 4000 	ldr.w	r4, [r8]
 8004e10:	4627      	mov	r7, r4
 8004e12:	2f00      	cmp	r7, #0
 8004e14:	d143      	bne.n	8004e9e <_malloc_r+0xd6>
 8004e16:	2c00      	cmp	r4, #0
 8004e18:	d04b      	beq.n	8004eb2 <_malloc_r+0xea>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	4639      	mov	r1, r7
 8004e1e:	4630      	mov	r0, r6
 8004e20:	eb04 0903 	add.w	r9, r4, r3
 8004e24:	f001 f86e 	bl	8005f04 <_sbrk_r>
 8004e28:	4581      	cmp	r9, r0
 8004e2a:	d142      	bne.n	8004eb2 <_malloc_r+0xea>
 8004e2c:	6821      	ldr	r1, [r4, #0]
 8004e2e:	1a6d      	subs	r5, r5, r1
 8004e30:	4629      	mov	r1, r5
 8004e32:	4630      	mov	r0, r6
 8004e34:	f7ff ffa6 	bl	8004d84 <sbrk_aligned>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d03a      	beq.n	8004eb2 <_malloc_r+0xea>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	442b      	add	r3, r5
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	f8d8 3000 	ldr.w	r3, [r8]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	bb62      	cbnz	r2, 8004ea4 <_malloc_r+0xdc>
 8004e4a:	f8c8 7000 	str.w	r7, [r8]
 8004e4e:	e00f      	b.n	8004e70 <_malloc_r+0xa8>
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	1b52      	subs	r2, r2, r5
 8004e54:	d420      	bmi.n	8004e98 <_malloc_r+0xd0>
 8004e56:	2a0b      	cmp	r2, #11
 8004e58:	d917      	bls.n	8004e8a <_malloc_r+0xc2>
 8004e5a:	1961      	adds	r1, r4, r5
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	6025      	str	r5, [r4, #0]
 8004e60:	bf18      	it	ne
 8004e62:	6059      	strne	r1, [r3, #4]
 8004e64:	6863      	ldr	r3, [r4, #4]
 8004e66:	bf08      	it	eq
 8004e68:	f8c8 1000 	streq.w	r1, [r8]
 8004e6c:	5162      	str	r2, [r4, r5]
 8004e6e:	604b      	str	r3, [r1, #4]
 8004e70:	4630      	mov	r0, r6
 8004e72:	f000 f82f 	bl	8004ed4 <__malloc_unlock>
 8004e76:	f104 000b 	add.w	r0, r4, #11
 8004e7a:	1d23      	adds	r3, r4, #4
 8004e7c:	f020 0007 	bic.w	r0, r0, #7
 8004e80:	1ac2      	subs	r2, r0, r3
 8004e82:	bf1c      	itt	ne
 8004e84:	1a1b      	subne	r3, r3, r0
 8004e86:	50a3      	strne	r3, [r4, r2]
 8004e88:	e7af      	b.n	8004dea <_malloc_r+0x22>
 8004e8a:	6862      	ldr	r2, [r4, #4]
 8004e8c:	42a3      	cmp	r3, r4
 8004e8e:	bf0c      	ite	eq
 8004e90:	f8c8 2000 	streq.w	r2, [r8]
 8004e94:	605a      	strne	r2, [r3, #4]
 8004e96:	e7eb      	b.n	8004e70 <_malloc_r+0xa8>
 8004e98:	4623      	mov	r3, r4
 8004e9a:	6864      	ldr	r4, [r4, #4]
 8004e9c:	e7ae      	b.n	8004dfc <_malloc_r+0x34>
 8004e9e:	463c      	mov	r4, r7
 8004ea0:	687f      	ldr	r7, [r7, #4]
 8004ea2:	e7b6      	b.n	8004e12 <_malloc_r+0x4a>
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	d1fb      	bne.n	8004ea4 <_malloc_r+0xdc>
 8004eac:	2300      	movs	r3, #0
 8004eae:	6053      	str	r3, [r2, #4]
 8004eb0:	e7de      	b.n	8004e70 <_malloc_r+0xa8>
 8004eb2:	230c      	movs	r3, #12
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f000 f80c 	bl	8004ed4 <__malloc_unlock>
 8004ebc:	e794      	b.n	8004de8 <_malloc_r+0x20>
 8004ebe:	6005      	str	r5, [r0, #0]
 8004ec0:	e7d6      	b.n	8004e70 <_malloc_r+0xa8>
 8004ec2:	bf00      	nop
 8004ec4:	20000aa0 	.word	0x20000aa0

08004ec8 <__malloc_lock>:
 8004ec8:	4801      	ldr	r0, [pc, #4]	@ (8004ed0 <__malloc_lock+0x8>)
 8004eca:	f001 b868 	b.w	8005f9e <__retarget_lock_acquire_recursive>
 8004ece:	bf00      	nop
 8004ed0:	20000be4 	.word	0x20000be4

08004ed4 <__malloc_unlock>:
 8004ed4:	4801      	ldr	r0, [pc, #4]	@ (8004edc <__malloc_unlock+0x8>)
 8004ed6:	f001 b863 	b.w	8005fa0 <__retarget_lock_release_recursive>
 8004eda:	bf00      	nop
 8004edc:	20000be4 	.word	0x20000be4

08004ee0 <_realloc_r>:
 8004ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	4615      	mov	r5, r2
 8004ee8:	460c      	mov	r4, r1
 8004eea:	b921      	cbnz	r1, 8004ef6 <_realloc_r+0x16>
 8004eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	f7ff bf69 	b.w	8004dc8 <_malloc_r>
 8004ef6:	b92a      	cbnz	r2, 8004f04 <_realloc_r+0x24>
 8004ef8:	f001 feb6 	bl	8006c68 <_free_r>
 8004efc:	2400      	movs	r4, #0
 8004efe:	4620      	mov	r0, r4
 8004f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f04:	f002 fbac 	bl	8007660 <_malloc_usable_size_r>
 8004f08:	4285      	cmp	r5, r0
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	d802      	bhi.n	8004f14 <_realloc_r+0x34>
 8004f0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f12:	d8f4      	bhi.n	8004efe <_realloc_r+0x1e>
 8004f14:	4629      	mov	r1, r5
 8004f16:	4640      	mov	r0, r8
 8004f18:	f7ff ff56 	bl	8004dc8 <_malloc_r>
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d0ec      	beq.n	8004efc <_realloc_r+0x1c>
 8004f22:	42b5      	cmp	r5, r6
 8004f24:	462a      	mov	r2, r5
 8004f26:	4621      	mov	r1, r4
 8004f28:	bf28      	it	cs
 8004f2a:	4632      	movcs	r2, r6
 8004f2c:	f001 f839 	bl	8005fa2 <memcpy>
 8004f30:	4621      	mov	r1, r4
 8004f32:	4640      	mov	r0, r8
 8004f34:	f001 fe98 	bl	8006c68 <_free_r>
 8004f38:	463c      	mov	r4, r7
 8004f3a:	e7e0      	b.n	8004efe <_realloc_r+0x1e>

08004f3c <__cvt>:
 8004f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	ec57 6b10 	vmov	r6, r7, d0
 8004f44:	2f00      	cmp	r7, #0
 8004f46:	460c      	mov	r4, r1
 8004f48:	4619      	mov	r1, r3
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	bfbb      	ittet	lt
 8004f4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f52:	461f      	movlt	r7, r3
 8004f54:	2300      	movge	r3, #0
 8004f56:	232d      	movlt	r3, #45	@ 0x2d
 8004f58:	700b      	strb	r3, [r1, #0]
 8004f5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f60:	4691      	mov	r9, r2
 8004f62:	f023 0820 	bic.w	r8, r3, #32
 8004f66:	bfbc      	itt	lt
 8004f68:	4632      	movlt	r2, r6
 8004f6a:	4616      	movlt	r6, r2
 8004f6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f70:	d005      	beq.n	8004f7e <__cvt+0x42>
 8004f72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f76:	d100      	bne.n	8004f7a <__cvt+0x3e>
 8004f78:	3401      	adds	r4, #1
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	e000      	b.n	8004f80 <__cvt+0x44>
 8004f7e:	2103      	movs	r1, #3
 8004f80:	ab03      	add	r3, sp, #12
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	ab02      	add	r3, sp, #8
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	ec47 6b10 	vmov	d0, r6, r7
 8004f8c:	4653      	mov	r3, sl
 8004f8e:	4622      	mov	r2, r4
 8004f90:	f001 f8a6 	bl	80060e0 <_dtoa_r>
 8004f94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f98:	4605      	mov	r5, r0
 8004f9a:	d119      	bne.n	8004fd0 <__cvt+0x94>
 8004f9c:	f019 0f01 	tst.w	r9, #1
 8004fa0:	d00e      	beq.n	8004fc0 <__cvt+0x84>
 8004fa2:	eb00 0904 	add.w	r9, r0, r4
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4630      	mov	r0, r6
 8004fac:	4639      	mov	r1, r7
 8004fae:	f7fb fd93 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fb2:	b108      	cbz	r0, 8004fb8 <__cvt+0x7c>
 8004fb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fb8:	2230      	movs	r2, #48	@ 0x30
 8004fba:	9b03      	ldr	r3, [sp, #12]
 8004fbc:	454b      	cmp	r3, r9
 8004fbe:	d31e      	bcc.n	8004ffe <__cvt+0xc2>
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fc4:	1b5b      	subs	r3, r3, r5
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	b004      	add	sp, #16
 8004fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fd4:	eb00 0904 	add.w	r9, r0, r4
 8004fd8:	d1e5      	bne.n	8004fa6 <__cvt+0x6a>
 8004fda:	7803      	ldrb	r3, [r0, #0]
 8004fdc:	2b30      	cmp	r3, #48	@ 0x30
 8004fde:	d10a      	bne.n	8004ff6 <__cvt+0xba>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	4639      	mov	r1, r7
 8004fe8:	f7fb fd76 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fec:	b918      	cbnz	r0, 8004ff6 <__cvt+0xba>
 8004fee:	f1c4 0401 	rsb	r4, r4, #1
 8004ff2:	f8ca 4000 	str.w	r4, [sl]
 8004ff6:	f8da 3000 	ldr.w	r3, [sl]
 8004ffa:	4499      	add	r9, r3
 8004ffc:	e7d3      	b.n	8004fa6 <__cvt+0x6a>
 8004ffe:	1c59      	adds	r1, r3, #1
 8005000:	9103      	str	r1, [sp, #12]
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e7d9      	b.n	8004fba <__cvt+0x7e>

08005006 <__exponent>:
 8005006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005008:	2900      	cmp	r1, #0
 800500a:	bfba      	itte	lt
 800500c:	4249      	neglt	r1, r1
 800500e:	232d      	movlt	r3, #45	@ 0x2d
 8005010:	232b      	movge	r3, #43	@ 0x2b
 8005012:	2909      	cmp	r1, #9
 8005014:	7002      	strb	r2, [r0, #0]
 8005016:	7043      	strb	r3, [r0, #1]
 8005018:	dd29      	ble.n	800506e <__exponent+0x68>
 800501a:	f10d 0307 	add.w	r3, sp, #7
 800501e:	461d      	mov	r5, r3
 8005020:	270a      	movs	r7, #10
 8005022:	461a      	mov	r2, r3
 8005024:	fbb1 f6f7 	udiv	r6, r1, r7
 8005028:	fb07 1416 	mls	r4, r7, r6, r1
 800502c:	3430      	adds	r4, #48	@ 0x30
 800502e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005032:	460c      	mov	r4, r1
 8005034:	2c63      	cmp	r4, #99	@ 0x63
 8005036:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800503a:	4631      	mov	r1, r6
 800503c:	dcf1      	bgt.n	8005022 <__exponent+0x1c>
 800503e:	3130      	adds	r1, #48	@ 0x30
 8005040:	1e94      	subs	r4, r2, #2
 8005042:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005046:	1c41      	adds	r1, r0, #1
 8005048:	4623      	mov	r3, r4
 800504a:	42ab      	cmp	r3, r5
 800504c:	d30a      	bcc.n	8005064 <__exponent+0x5e>
 800504e:	f10d 0309 	add.w	r3, sp, #9
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	42ac      	cmp	r4, r5
 8005056:	bf88      	it	hi
 8005058:	2300      	movhi	r3, #0
 800505a:	3302      	adds	r3, #2
 800505c:	4403      	add	r3, r0
 800505e:	1a18      	subs	r0, r3, r0
 8005060:	b003      	add	sp, #12
 8005062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005064:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005068:	f801 6f01 	strb.w	r6, [r1, #1]!
 800506c:	e7ed      	b.n	800504a <__exponent+0x44>
 800506e:	2330      	movs	r3, #48	@ 0x30
 8005070:	3130      	adds	r1, #48	@ 0x30
 8005072:	7083      	strb	r3, [r0, #2]
 8005074:	70c1      	strb	r1, [r0, #3]
 8005076:	1d03      	adds	r3, r0, #4
 8005078:	e7f1      	b.n	800505e <__exponent+0x58>
	...

0800507c <_printf_float>:
 800507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005080:	b08d      	sub	sp, #52	@ 0x34
 8005082:	460c      	mov	r4, r1
 8005084:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005088:	4616      	mov	r6, r2
 800508a:	461f      	mov	r7, r3
 800508c:	4605      	mov	r5, r0
 800508e:	f000 ff01 	bl	8005e94 <_localeconv_r>
 8005092:	6803      	ldr	r3, [r0, #0]
 8005094:	9304      	str	r3, [sp, #16]
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb f8f2 	bl	8000280 <strlen>
 800509c:	2300      	movs	r3, #0
 800509e:	930a      	str	r3, [sp, #40]	@ 0x28
 80050a0:	f8d8 3000 	ldr.w	r3, [r8]
 80050a4:	9005      	str	r0, [sp, #20]
 80050a6:	3307      	adds	r3, #7
 80050a8:	f023 0307 	bic.w	r3, r3, #7
 80050ac:	f103 0208 	add.w	r2, r3, #8
 80050b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80050b4:	f8d4 b000 	ldr.w	fp, [r4]
 80050b8:	f8c8 2000 	str.w	r2, [r8]
 80050bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80050c4:	9307      	str	r3, [sp, #28]
 80050c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80050ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80050ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050d2:	4b9c      	ldr	r3, [pc, #624]	@ (8005344 <_printf_float+0x2c8>)
 80050d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050d8:	f7fb fd30 	bl	8000b3c <__aeabi_dcmpun>
 80050dc:	bb70      	cbnz	r0, 800513c <_printf_float+0xc0>
 80050de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050e2:	4b98      	ldr	r3, [pc, #608]	@ (8005344 <_printf_float+0x2c8>)
 80050e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050e8:	f7fb fd0a 	bl	8000b00 <__aeabi_dcmple>
 80050ec:	bb30      	cbnz	r0, 800513c <_printf_float+0xc0>
 80050ee:	2200      	movs	r2, #0
 80050f0:	2300      	movs	r3, #0
 80050f2:	4640      	mov	r0, r8
 80050f4:	4649      	mov	r1, r9
 80050f6:	f7fb fcf9 	bl	8000aec <__aeabi_dcmplt>
 80050fa:	b110      	cbz	r0, 8005102 <_printf_float+0x86>
 80050fc:	232d      	movs	r3, #45	@ 0x2d
 80050fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005102:	4a91      	ldr	r2, [pc, #580]	@ (8005348 <_printf_float+0x2cc>)
 8005104:	4b91      	ldr	r3, [pc, #580]	@ (800534c <_printf_float+0x2d0>)
 8005106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800510a:	bf94      	ite	ls
 800510c:	4690      	movls	r8, r2
 800510e:	4698      	movhi	r8, r3
 8005110:	2303      	movs	r3, #3
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	f02b 0304 	bic.w	r3, fp, #4
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	f04f 0900 	mov.w	r9, #0
 800511e:	9700      	str	r7, [sp, #0]
 8005120:	4633      	mov	r3, r6
 8005122:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005124:	4621      	mov	r1, r4
 8005126:	4628      	mov	r0, r5
 8005128:	f000 f9d2 	bl	80054d0 <_printf_common>
 800512c:	3001      	adds	r0, #1
 800512e:	f040 808d 	bne.w	800524c <_printf_float+0x1d0>
 8005132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005136:	b00d      	add	sp, #52	@ 0x34
 8005138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513c:	4642      	mov	r2, r8
 800513e:	464b      	mov	r3, r9
 8005140:	4640      	mov	r0, r8
 8005142:	4649      	mov	r1, r9
 8005144:	f7fb fcfa 	bl	8000b3c <__aeabi_dcmpun>
 8005148:	b140      	cbz	r0, 800515c <_printf_float+0xe0>
 800514a:	464b      	mov	r3, r9
 800514c:	2b00      	cmp	r3, #0
 800514e:	bfbc      	itt	lt
 8005150:	232d      	movlt	r3, #45	@ 0x2d
 8005152:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005156:	4a7e      	ldr	r2, [pc, #504]	@ (8005350 <_printf_float+0x2d4>)
 8005158:	4b7e      	ldr	r3, [pc, #504]	@ (8005354 <_printf_float+0x2d8>)
 800515a:	e7d4      	b.n	8005106 <_printf_float+0x8a>
 800515c:	6863      	ldr	r3, [r4, #4]
 800515e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005162:	9206      	str	r2, [sp, #24]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	d13b      	bne.n	80051e0 <_printf_float+0x164>
 8005168:	2306      	movs	r3, #6
 800516a:	6063      	str	r3, [r4, #4]
 800516c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005170:	2300      	movs	r3, #0
 8005172:	6022      	str	r2, [r4, #0]
 8005174:	9303      	str	r3, [sp, #12]
 8005176:	ab0a      	add	r3, sp, #40	@ 0x28
 8005178:	e9cd a301 	strd	sl, r3, [sp, #4]
 800517c:	ab09      	add	r3, sp, #36	@ 0x24
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	6861      	ldr	r1, [r4, #4]
 8005182:	ec49 8b10 	vmov	d0, r8, r9
 8005186:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800518a:	4628      	mov	r0, r5
 800518c:	f7ff fed6 	bl	8004f3c <__cvt>
 8005190:	9b06      	ldr	r3, [sp, #24]
 8005192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005194:	2b47      	cmp	r3, #71	@ 0x47
 8005196:	4680      	mov	r8, r0
 8005198:	d129      	bne.n	80051ee <_printf_float+0x172>
 800519a:	1cc8      	adds	r0, r1, #3
 800519c:	db02      	blt.n	80051a4 <_printf_float+0x128>
 800519e:	6863      	ldr	r3, [r4, #4]
 80051a0:	4299      	cmp	r1, r3
 80051a2:	dd41      	ble.n	8005228 <_printf_float+0x1ac>
 80051a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80051a8:	fa5f fa8a 	uxtb.w	sl, sl
 80051ac:	3901      	subs	r1, #1
 80051ae:	4652      	mov	r2, sl
 80051b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80051b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80051b6:	f7ff ff26 	bl	8005006 <__exponent>
 80051ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051bc:	1813      	adds	r3, r2, r0
 80051be:	2a01      	cmp	r2, #1
 80051c0:	4681      	mov	r9, r0
 80051c2:	6123      	str	r3, [r4, #16]
 80051c4:	dc02      	bgt.n	80051cc <_printf_float+0x150>
 80051c6:	6822      	ldr	r2, [r4, #0]
 80051c8:	07d2      	lsls	r2, r2, #31
 80051ca:	d501      	bpl.n	80051d0 <_printf_float+0x154>
 80051cc:	3301      	adds	r3, #1
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0a2      	beq.n	800511e <_printf_float+0xa2>
 80051d8:	232d      	movs	r3, #45	@ 0x2d
 80051da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051de:	e79e      	b.n	800511e <_printf_float+0xa2>
 80051e0:	9a06      	ldr	r2, [sp, #24]
 80051e2:	2a47      	cmp	r2, #71	@ 0x47
 80051e4:	d1c2      	bne.n	800516c <_printf_float+0xf0>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1c0      	bne.n	800516c <_printf_float+0xf0>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e7bd      	b.n	800516a <_printf_float+0xee>
 80051ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051f2:	d9db      	bls.n	80051ac <_printf_float+0x130>
 80051f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051f8:	d118      	bne.n	800522c <_printf_float+0x1b0>
 80051fa:	2900      	cmp	r1, #0
 80051fc:	6863      	ldr	r3, [r4, #4]
 80051fe:	dd0b      	ble.n	8005218 <_printf_float+0x19c>
 8005200:	6121      	str	r1, [r4, #16]
 8005202:	b913      	cbnz	r3, 800520a <_printf_float+0x18e>
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	07d0      	lsls	r0, r2, #31
 8005208:	d502      	bpl.n	8005210 <_printf_float+0x194>
 800520a:	3301      	adds	r3, #1
 800520c:	440b      	add	r3, r1
 800520e:	6123      	str	r3, [r4, #16]
 8005210:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005212:	f04f 0900 	mov.w	r9, #0
 8005216:	e7db      	b.n	80051d0 <_printf_float+0x154>
 8005218:	b913      	cbnz	r3, 8005220 <_printf_float+0x1a4>
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	07d2      	lsls	r2, r2, #31
 800521e:	d501      	bpl.n	8005224 <_printf_float+0x1a8>
 8005220:	3302      	adds	r3, #2
 8005222:	e7f4      	b.n	800520e <_printf_float+0x192>
 8005224:	2301      	movs	r3, #1
 8005226:	e7f2      	b.n	800520e <_printf_float+0x192>
 8005228:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800522c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800522e:	4299      	cmp	r1, r3
 8005230:	db05      	blt.n	800523e <_printf_float+0x1c2>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	6121      	str	r1, [r4, #16]
 8005236:	07d8      	lsls	r0, r3, #31
 8005238:	d5ea      	bpl.n	8005210 <_printf_float+0x194>
 800523a:	1c4b      	adds	r3, r1, #1
 800523c:	e7e7      	b.n	800520e <_printf_float+0x192>
 800523e:	2900      	cmp	r1, #0
 8005240:	bfd4      	ite	le
 8005242:	f1c1 0202 	rsble	r2, r1, #2
 8005246:	2201      	movgt	r2, #1
 8005248:	4413      	add	r3, r2
 800524a:	e7e0      	b.n	800520e <_printf_float+0x192>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	055a      	lsls	r2, r3, #21
 8005250:	d407      	bmi.n	8005262 <_printf_float+0x1e6>
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	4642      	mov	r2, r8
 8005256:	4631      	mov	r1, r6
 8005258:	4628      	mov	r0, r5
 800525a:	47b8      	blx	r7
 800525c:	3001      	adds	r0, #1
 800525e:	d12b      	bne.n	80052b8 <_printf_float+0x23c>
 8005260:	e767      	b.n	8005132 <_printf_float+0xb6>
 8005262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005266:	f240 80dd 	bls.w	8005424 <_printf_float+0x3a8>
 800526a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800526e:	2200      	movs	r2, #0
 8005270:	2300      	movs	r3, #0
 8005272:	f7fb fc31 	bl	8000ad8 <__aeabi_dcmpeq>
 8005276:	2800      	cmp	r0, #0
 8005278:	d033      	beq.n	80052e2 <_printf_float+0x266>
 800527a:	4a37      	ldr	r2, [pc, #220]	@ (8005358 <_printf_float+0x2dc>)
 800527c:	2301      	movs	r3, #1
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	47b8      	blx	r7
 8005284:	3001      	adds	r0, #1
 8005286:	f43f af54 	beq.w	8005132 <_printf_float+0xb6>
 800528a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800528e:	4543      	cmp	r3, r8
 8005290:	db02      	blt.n	8005298 <_printf_float+0x21c>
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	07d8      	lsls	r0, r3, #31
 8005296:	d50f      	bpl.n	80052b8 <_printf_float+0x23c>
 8005298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800529c:	4631      	mov	r1, r6
 800529e:	4628      	mov	r0, r5
 80052a0:	47b8      	blx	r7
 80052a2:	3001      	adds	r0, #1
 80052a4:	f43f af45 	beq.w	8005132 <_printf_float+0xb6>
 80052a8:	f04f 0900 	mov.w	r9, #0
 80052ac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80052b0:	f104 0a1a 	add.w	sl, r4, #26
 80052b4:	45c8      	cmp	r8, r9
 80052b6:	dc09      	bgt.n	80052cc <_printf_float+0x250>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	079b      	lsls	r3, r3, #30
 80052bc:	f100 8103 	bmi.w	80054c6 <_printf_float+0x44a>
 80052c0:	68e0      	ldr	r0, [r4, #12]
 80052c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052c4:	4298      	cmp	r0, r3
 80052c6:	bfb8      	it	lt
 80052c8:	4618      	movlt	r0, r3
 80052ca:	e734      	b.n	8005136 <_printf_float+0xba>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4652      	mov	r2, sl
 80052d0:	4631      	mov	r1, r6
 80052d2:	4628      	mov	r0, r5
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	f43f af2b 	beq.w	8005132 <_printf_float+0xb6>
 80052dc:	f109 0901 	add.w	r9, r9, #1
 80052e0:	e7e8      	b.n	80052b4 <_printf_float+0x238>
 80052e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	dc39      	bgt.n	800535c <_printf_float+0x2e0>
 80052e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005358 <_printf_float+0x2dc>)
 80052ea:	2301      	movs	r3, #1
 80052ec:	4631      	mov	r1, r6
 80052ee:	4628      	mov	r0, r5
 80052f0:	47b8      	blx	r7
 80052f2:	3001      	adds	r0, #1
 80052f4:	f43f af1d 	beq.w	8005132 <_printf_float+0xb6>
 80052f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052fc:	ea59 0303 	orrs.w	r3, r9, r3
 8005300:	d102      	bne.n	8005308 <_printf_float+0x28c>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	07d9      	lsls	r1, r3, #31
 8005306:	d5d7      	bpl.n	80052b8 <_printf_float+0x23c>
 8005308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800530c:	4631      	mov	r1, r6
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	f43f af0d 	beq.w	8005132 <_printf_float+0xb6>
 8005318:	f04f 0a00 	mov.w	sl, #0
 800531c:	f104 0b1a 	add.w	fp, r4, #26
 8005320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005322:	425b      	negs	r3, r3
 8005324:	4553      	cmp	r3, sl
 8005326:	dc01      	bgt.n	800532c <_printf_float+0x2b0>
 8005328:	464b      	mov	r3, r9
 800532a:	e793      	b.n	8005254 <_printf_float+0x1d8>
 800532c:	2301      	movs	r3, #1
 800532e:	465a      	mov	r2, fp
 8005330:	4631      	mov	r1, r6
 8005332:	4628      	mov	r0, r5
 8005334:	47b8      	blx	r7
 8005336:	3001      	adds	r0, #1
 8005338:	f43f aefb 	beq.w	8005132 <_printf_float+0xb6>
 800533c:	f10a 0a01 	add.w	sl, sl, #1
 8005340:	e7ee      	b.n	8005320 <_printf_float+0x2a4>
 8005342:	bf00      	nop
 8005344:	7fefffff 	.word	0x7fefffff
 8005348:	08009b68 	.word	0x08009b68
 800534c:	08009b6c 	.word	0x08009b6c
 8005350:	08009b70 	.word	0x08009b70
 8005354:	08009b74 	.word	0x08009b74
 8005358:	08009b78 	.word	0x08009b78
 800535c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800535e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005362:	4553      	cmp	r3, sl
 8005364:	bfa8      	it	ge
 8005366:	4653      	movge	r3, sl
 8005368:	2b00      	cmp	r3, #0
 800536a:	4699      	mov	r9, r3
 800536c:	dc36      	bgt.n	80053dc <_printf_float+0x360>
 800536e:	f04f 0b00 	mov.w	fp, #0
 8005372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005376:	f104 021a 	add.w	r2, r4, #26
 800537a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800537c:	9306      	str	r3, [sp, #24]
 800537e:	eba3 0309 	sub.w	r3, r3, r9
 8005382:	455b      	cmp	r3, fp
 8005384:	dc31      	bgt.n	80053ea <_printf_float+0x36e>
 8005386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005388:	459a      	cmp	sl, r3
 800538a:	dc3a      	bgt.n	8005402 <_printf_float+0x386>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	07da      	lsls	r2, r3, #31
 8005390:	d437      	bmi.n	8005402 <_printf_float+0x386>
 8005392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005394:	ebaa 0903 	sub.w	r9, sl, r3
 8005398:	9b06      	ldr	r3, [sp, #24]
 800539a:	ebaa 0303 	sub.w	r3, sl, r3
 800539e:	4599      	cmp	r9, r3
 80053a0:	bfa8      	it	ge
 80053a2:	4699      	movge	r9, r3
 80053a4:	f1b9 0f00 	cmp.w	r9, #0
 80053a8:	dc33      	bgt.n	8005412 <_printf_float+0x396>
 80053aa:	f04f 0800 	mov.w	r8, #0
 80053ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053b2:	f104 0b1a 	add.w	fp, r4, #26
 80053b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053b8:	ebaa 0303 	sub.w	r3, sl, r3
 80053bc:	eba3 0309 	sub.w	r3, r3, r9
 80053c0:	4543      	cmp	r3, r8
 80053c2:	f77f af79 	ble.w	80052b8 <_printf_float+0x23c>
 80053c6:	2301      	movs	r3, #1
 80053c8:	465a      	mov	r2, fp
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	f43f aeae 	beq.w	8005132 <_printf_float+0xb6>
 80053d6:	f108 0801 	add.w	r8, r8, #1
 80053da:	e7ec      	b.n	80053b6 <_printf_float+0x33a>
 80053dc:	4642      	mov	r2, r8
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	d1c2      	bne.n	800536e <_printf_float+0x2f2>
 80053e8:	e6a3      	b.n	8005132 <_printf_float+0xb6>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4631      	mov	r1, r6
 80053ee:	4628      	mov	r0, r5
 80053f0:	9206      	str	r2, [sp, #24]
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	f43f ae9c 	beq.w	8005132 <_printf_float+0xb6>
 80053fa:	9a06      	ldr	r2, [sp, #24]
 80053fc:	f10b 0b01 	add.w	fp, fp, #1
 8005400:	e7bb      	b.n	800537a <_printf_float+0x2fe>
 8005402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005406:	4631      	mov	r1, r6
 8005408:	4628      	mov	r0, r5
 800540a:	47b8      	blx	r7
 800540c:	3001      	adds	r0, #1
 800540e:	d1c0      	bne.n	8005392 <_printf_float+0x316>
 8005410:	e68f      	b.n	8005132 <_printf_float+0xb6>
 8005412:	9a06      	ldr	r2, [sp, #24]
 8005414:	464b      	mov	r3, r9
 8005416:	4442      	add	r2, r8
 8005418:	4631      	mov	r1, r6
 800541a:	4628      	mov	r0, r5
 800541c:	47b8      	blx	r7
 800541e:	3001      	adds	r0, #1
 8005420:	d1c3      	bne.n	80053aa <_printf_float+0x32e>
 8005422:	e686      	b.n	8005132 <_printf_float+0xb6>
 8005424:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005428:	f1ba 0f01 	cmp.w	sl, #1
 800542c:	dc01      	bgt.n	8005432 <_printf_float+0x3b6>
 800542e:	07db      	lsls	r3, r3, #31
 8005430:	d536      	bpl.n	80054a0 <_printf_float+0x424>
 8005432:	2301      	movs	r3, #1
 8005434:	4642      	mov	r2, r8
 8005436:	4631      	mov	r1, r6
 8005438:	4628      	mov	r0, r5
 800543a:	47b8      	blx	r7
 800543c:	3001      	adds	r0, #1
 800543e:	f43f ae78 	beq.w	8005132 <_printf_float+0xb6>
 8005442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005446:	4631      	mov	r1, r6
 8005448:	4628      	mov	r0, r5
 800544a:	47b8      	blx	r7
 800544c:	3001      	adds	r0, #1
 800544e:	f43f ae70 	beq.w	8005132 <_printf_float+0xb6>
 8005452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005456:	2200      	movs	r2, #0
 8005458:	2300      	movs	r3, #0
 800545a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800545e:	f7fb fb3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005462:	b9c0      	cbnz	r0, 8005496 <_printf_float+0x41a>
 8005464:	4653      	mov	r3, sl
 8005466:	f108 0201 	add.w	r2, r8, #1
 800546a:	4631      	mov	r1, r6
 800546c:	4628      	mov	r0, r5
 800546e:	47b8      	blx	r7
 8005470:	3001      	adds	r0, #1
 8005472:	d10c      	bne.n	800548e <_printf_float+0x412>
 8005474:	e65d      	b.n	8005132 <_printf_float+0xb6>
 8005476:	2301      	movs	r3, #1
 8005478:	465a      	mov	r2, fp
 800547a:	4631      	mov	r1, r6
 800547c:	4628      	mov	r0, r5
 800547e:	47b8      	blx	r7
 8005480:	3001      	adds	r0, #1
 8005482:	f43f ae56 	beq.w	8005132 <_printf_float+0xb6>
 8005486:	f108 0801 	add.w	r8, r8, #1
 800548a:	45d0      	cmp	r8, sl
 800548c:	dbf3      	blt.n	8005476 <_printf_float+0x3fa>
 800548e:	464b      	mov	r3, r9
 8005490:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005494:	e6df      	b.n	8005256 <_printf_float+0x1da>
 8005496:	f04f 0800 	mov.w	r8, #0
 800549a:	f104 0b1a 	add.w	fp, r4, #26
 800549e:	e7f4      	b.n	800548a <_printf_float+0x40e>
 80054a0:	2301      	movs	r3, #1
 80054a2:	4642      	mov	r2, r8
 80054a4:	e7e1      	b.n	800546a <_printf_float+0x3ee>
 80054a6:	2301      	movs	r3, #1
 80054a8:	464a      	mov	r2, r9
 80054aa:	4631      	mov	r1, r6
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b8      	blx	r7
 80054b0:	3001      	adds	r0, #1
 80054b2:	f43f ae3e 	beq.w	8005132 <_printf_float+0xb6>
 80054b6:	f108 0801 	add.w	r8, r8, #1
 80054ba:	68e3      	ldr	r3, [r4, #12]
 80054bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054be:	1a5b      	subs	r3, r3, r1
 80054c0:	4543      	cmp	r3, r8
 80054c2:	dcf0      	bgt.n	80054a6 <_printf_float+0x42a>
 80054c4:	e6fc      	b.n	80052c0 <_printf_float+0x244>
 80054c6:	f04f 0800 	mov.w	r8, #0
 80054ca:	f104 0919 	add.w	r9, r4, #25
 80054ce:	e7f4      	b.n	80054ba <_printf_float+0x43e>

080054d0 <_printf_common>:
 80054d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d4:	4616      	mov	r6, r2
 80054d6:	4698      	mov	r8, r3
 80054d8:	688a      	ldr	r2, [r1, #8]
 80054da:	690b      	ldr	r3, [r1, #16]
 80054dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054e0:	4293      	cmp	r3, r2
 80054e2:	bfb8      	it	lt
 80054e4:	4613      	movlt	r3, r2
 80054e6:	6033      	str	r3, [r6, #0]
 80054e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054ec:	4607      	mov	r7, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	b10a      	cbz	r2, 80054f6 <_printf_common+0x26>
 80054f2:	3301      	adds	r3, #1
 80054f4:	6033      	str	r3, [r6, #0]
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	0699      	lsls	r1, r3, #26
 80054fa:	bf42      	ittt	mi
 80054fc:	6833      	ldrmi	r3, [r6, #0]
 80054fe:	3302      	addmi	r3, #2
 8005500:	6033      	strmi	r3, [r6, #0]
 8005502:	6825      	ldr	r5, [r4, #0]
 8005504:	f015 0506 	ands.w	r5, r5, #6
 8005508:	d106      	bne.n	8005518 <_printf_common+0x48>
 800550a:	f104 0a19 	add.w	sl, r4, #25
 800550e:	68e3      	ldr	r3, [r4, #12]
 8005510:	6832      	ldr	r2, [r6, #0]
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	42ab      	cmp	r3, r5
 8005516:	dc26      	bgt.n	8005566 <_printf_common+0x96>
 8005518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800551c:	6822      	ldr	r2, [r4, #0]
 800551e:	3b00      	subs	r3, #0
 8005520:	bf18      	it	ne
 8005522:	2301      	movne	r3, #1
 8005524:	0692      	lsls	r2, r2, #26
 8005526:	d42b      	bmi.n	8005580 <_printf_common+0xb0>
 8005528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800552c:	4641      	mov	r1, r8
 800552e:	4638      	mov	r0, r7
 8005530:	47c8      	blx	r9
 8005532:	3001      	adds	r0, #1
 8005534:	d01e      	beq.n	8005574 <_printf_common+0xa4>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	6922      	ldr	r2, [r4, #16]
 800553a:	f003 0306 	and.w	r3, r3, #6
 800553e:	2b04      	cmp	r3, #4
 8005540:	bf02      	ittt	eq
 8005542:	68e5      	ldreq	r5, [r4, #12]
 8005544:	6833      	ldreq	r3, [r6, #0]
 8005546:	1aed      	subeq	r5, r5, r3
 8005548:	68a3      	ldr	r3, [r4, #8]
 800554a:	bf0c      	ite	eq
 800554c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005550:	2500      	movne	r5, #0
 8005552:	4293      	cmp	r3, r2
 8005554:	bfc4      	itt	gt
 8005556:	1a9b      	subgt	r3, r3, r2
 8005558:	18ed      	addgt	r5, r5, r3
 800555a:	2600      	movs	r6, #0
 800555c:	341a      	adds	r4, #26
 800555e:	42b5      	cmp	r5, r6
 8005560:	d11a      	bne.n	8005598 <_printf_common+0xc8>
 8005562:	2000      	movs	r0, #0
 8005564:	e008      	b.n	8005578 <_printf_common+0xa8>
 8005566:	2301      	movs	r3, #1
 8005568:	4652      	mov	r2, sl
 800556a:	4641      	mov	r1, r8
 800556c:	4638      	mov	r0, r7
 800556e:	47c8      	blx	r9
 8005570:	3001      	adds	r0, #1
 8005572:	d103      	bne.n	800557c <_printf_common+0xac>
 8005574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557c:	3501      	adds	r5, #1
 800557e:	e7c6      	b.n	800550e <_printf_common+0x3e>
 8005580:	18e1      	adds	r1, r4, r3
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	2030      	movs	r0, #48	@ 0x30
 8005586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800558a:	4422      	add	r2, r4
 800558c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005594:	3302      	adds	r3, #2
 8005596:	e7c7      	b.n	8005528 <_printf_common+0x58>
 8005598:	2301      	movs	r3, #1
 800559a:	4622      	mov	r2, r4
 800559c:	4641      	mov	r1, r8
 800559e:	4638      	mov	r0, r7
 80055a0:	47c8      	blx	r9
 80055a2:	3001      	adds	r0, #1
 80055a4:	d0e6      	beq.n	8005574 <_printf_common+0xa4>
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7d9      	b.n	800555e <_printf_common+0x8e>
	...

080055ac <_printf_i>:
 80055ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055b0:	7e0f      	ldrb	r7, [r1, #24]
 80055b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055b4:	2f78      	cmp	r7, #120	@ 0x78
 80055b6:	4691      	mov	r9, r2
 80055b8:	4680      	mov	r8, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	469a      	mov	sl, r3
 80055be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055c2:	d807      	bhi.n	80055d4 <_printf_i+0x28>
 80055c4:	2f62      	cmp	r7, #98	@ 0x62
 80055c6:	d80a      	bhi.n	80055de <_printf_i+0x32>
 80055c8:	2f00      	cmp	r7, #0
 80055ca:	f000 80d2 	beq.w	8005772 <_printf_i+0x1c6>
 80055ce:	2f58      	cmp	r7, #88	@ 0x58
 80055d0:	f000 80b9 	beq.w	8005746 <_printf_i+0x19a>
 80055d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055dc:	e03a      	b.n	8005654 <_printf_i+0xa8>
 80055de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055e2:	2b15      	cmp	r3, #21
 80055e4:	d8f6      	bhi.n	80055d4 <_printf_i+0x28>
 80055e6:	a101      	add	r1, pc, #4	@ (adr r1, 80055ec <_printf_i+0x40>)
 80055e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055ec:	08005645 	.word	0x08005645
 80055f0:	08005659 	.word	0x08005659
 80055f4:	080055d5 	.word	0x080055d5
 80055f8:	080055d5 	.word	0x080055d5
 80055fc:	080055d5 	.word	0x080055d5
 8005600:	080055d5 	.word	0x080055d5
 8005604:	08005659 	.word	0x08005659
 8005608:	080055d5 	.word	0x080055d5
 800560c:	080055d5 	.word	0x080055d5
 8005610:	080055d5 	.word	0x080055d5
 8005614:	080055d5 	.word	0x080055d5
 8005618:	08005759 	.word	0x08005759
 800561c:	08005683 	.word	0x08005683
 8005620:	08005713 	.word	0x08005713
 8005624:	080055d5 	.word	0x080055d5
 8005628:	080055d5 	.word	0x080055d5
 800562c:	0800577b 	.word	0x0800577b
 8005630:	080055d5 	.word	0x080055d5
 8005634:	08005683 	.word	0x08005683
 8005638:	080055d5 	.word	0x080055d5
 800563c:	080055d5 	.word	0x080055d5
 8005640:	0800571b 	.word	0x0800571b
 8005644:	6833      	ldr	r3, [r6, #0]
 8005646:	1d1a      	adds	r2, r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6032      	str	r2, [r6, #0]
 800564c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005654:	2301      	movs	r3, #1
 8005656:	e09d      	b.n	8005794 <_printf_i+0x1e8>
 8005658:	6833      	ldr	r3, [r6, #0]
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	1d19      	adds	r1, r3, #4
 800565e:	6031      	str	r1, [r6, #0]
 8005660:	0606      	lsls	r6, r0, #24
 8005662:	d501      	bpl.n	8005668 <_printf_i+0xbc>
 8005664:	681d      	ldr	r5, [r3, #0]
 8005666:	e003      	b.n	8005670 <_printf_i+0xc4>
 8005668:	0645      	lsls	r5, r0, #25
 800566a:	d5fb      	bpl.n	8005664 <_printf_i+0xb8>
 800566c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005670:	2d00      	cmp	r5, #0
 8005672:	da03      	bge.n	800567c <_printf_i+0xd0>
 8005674:	232d      	movs	r3, #45	@ 0x2d
 8005676:	426d      	negs	r5, r5
 8005678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800567c:	4859      	ldr	r0, [pc, #356]	@ (80057e4 <_printf_i+0x238>)
 800567e:	230a      	movs	r3, #10
 8005680:	e011      	b.n	80056a6 <_printf_i+0xfa>
 8005682:	6821      	ldr	r1, [r4, #0]
 8005684:	6833      	ldr	r3, [r6, #0]
 8005686:	0608      	lsls	r0, r1, #24
 8005688:	f853 5b04 	ldr.w	r5, [r3], #4
 800568c:	d402      	bmi.n	8005694 <_printf_i+0xe8>
 800568e:	0649      	lsls	r1, r1, #25
 8005690:	bf48      	it	mi
 8005692:	b2ad      	uxthmi	r5, r5
 8005694:	2f6f      	cmp	r7, #111	@ 0x6f
 8005696:	4853      	ldr	r0, [pc, #332]	@ (80057e4 <_printf_i+0x238>)
 8005698:	6033      	str	r3, [r6, #0]
 800569a:	bf14      	ite	ne
 800569c:	230a      	movne	r3, #10
 800569e:	2308      	moveq	r3, #8
 80056a0:	2100      	movs	r1, #0
 80056a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056a6:	6866      	ldr	r6, [r4, #4]
 80056a8:	60a6      	str	r6, [r4, #8]
 80056aa:	2e00      	cmp	r6, #0
 80056ac:	bfa2      	ittt	ge
 80056ae:	6821      	ldrge	r1, [r4, #0]
 80056b0:	f021 0104 	bicge.w	r1, r1, #4
 80056b4:	6021      	strge	r1, [r4, #0]
 80056b6:	b90d      	cbnz	r5, 80056bc <_printf_i+0x110>
 80056b8:	2e00      	cmp	r6, #0
 80056ba:	d04b      	beq.n	8005754 <_printf_i+0x1a8>
 80056bc:	4616      	mov	r6, r2
 80056be:	fbb5 f1f3 	udiv	r1, r5, r3
 80056c2:	fb03 5711 	mls	r7, r3, r1, r5
 80056c6:	5dc7      	ldrb	r7, [r0, r7]
 80056c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056cc:	462f      	mov	r7, r5
 80056ce:	42bb      	cmp	r3, r7
 80056d0:	460d      	mov	r5, r1
 80056d2:	d9f4      	bls.n	80056be <_printf_i+0x112>
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d10b      	bne.n	80056f0 <_printf_i+0x144>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	07df      	lsls	r7, r3, #31
 80056dc:	d508      	bpl.n	80056f0 <_printf_i+0x144>
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	6861      	ldr	r1, [r4, #4]
 80056e2:	4299      	cmp	r1, r3
 80056e4:	bfde      	ittt	le
 80056e6:	2330      	movle	r3, #48	@ 0x30
 80056e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80056f0:	1b92      	subs	r2, r2, r6
 80056f2:	6122      	str	r2, [r4, #16]
 80056f4:	f8cd a000 	str.w	sl, [sp]
 80056f8:	464b      	mov	r3, r9
 80056fa:	aa03      	add	r2, sp, #12
 80056fc:	4621      	mov	r1, r4
 80056fe:	4640      	mov	r0, r8
 8005700:	f7ff fee6 	bl	80054d0 <_printf_common>
 8005704:	3001      	adds	r0, #1
 8005706:	d14a      	bne.n	800579e <_printf_i+0x1f2>
 8005708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800570c:	b004      	add	sp, #16
 800570e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f043 0320 	orr.w	r3, r3, #32
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	4833      	ldr	r0, [pc, #204]	@ (80057e8 <_printf_i+0x23c>)
 800571c:	2778      	movs	r7, #120	@ 0x78
 800571e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	6831      	ldr	r1, [r6, #0]
 8005726:	061f      	lsls	r7, r3, #24
 8005728:	f851 5b04 	ldr.w	r5, [r1], #4
 800572c:	d402      	bmi.n	8005734 <_printf_i+0x188>
 800572e:	065f      	lsls	r7, r3, #25
 8005730:	bf48      	it	mi
 8005732:	b2ad      	uxthmi	r5, r5
 8005734:	6031      	str	r1, [r6, #0]
 8005736:	07d9      	lsls	r1, r3, #31
 8005738:	bf44      	itt	mi
 800573a:	f043 0320 	orrmi.w	r3, r3, #32
 800573e:	6023      	strmi	r3, [r4, #0]
 8005740:	b11d      	cbz	r5, 800574a <_printf_i+0x19e>
 8005742:	2310      	movs	r3, #16
 8005744:	e7ac      	b.n	80056a0 <_printf_i+0xf4>
 8005746:	4827      	ldr	r0, [pc, #156]	@ (80057e4 <_printf_i+0x238>)
 8005748:	e7e9      	b.n	800571e <_printf_i+0x172>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	f023 0320 	bic.w	r3, r3, #32
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	e7f6      	b.n	8005742 <_printf_i+0x196>
 8005754:	4616      	mov	r6, r2
 8005756:	e7bd      	b.n	80056d4 <_printf_i+0x128>
 8005758:	6833      	ldr	r3, [r6, #0]
 800575a:	6825      	ldr	r5, [r4, #0]
 800575c:	6961      	ldr	r1, [r4, #20]
 800575e:	1d18      	adds	r0, r3, #4
 8005760:	6030      	str	r0, [r6, #0]
 8005762:	062e      	lsls	r6, r5, #24
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	d501      	bpl.n	800576c <_printf_i+0x1c0>
 8005768:	6019      	str	r1, [r3, #0]
 800576a:	e002      	b.n	8005772 <_printf_i+0x1c6>
 800576c:	0668      	lsls	r0, r5, #25
 800576e:	d5fb      	bpl.n	8005768 <_printf_i+0x1bc>
 8005770:	8019      	strh	r1, [r3, #0]
 8005772:	2300      	movs	r3, #0
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	4616      	mov	r6, r2
 8005778:	e7bc      	b.n	80056f4 <_printf_i+0x148>
 800577a:	6833      	ldr	r3, [r6, #0]
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	6032      	str	r2, [r6, #0]
 8005780:	681e      	ldr	r6, [r3, #0]
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	2100      	movs	r1, #0
 8005786:	4630      	mov	r0, r6
 8005788:	f7fa fd2a 	bl	80001e0 <memchr>
 800578c:	b108      	cbz	r0, 8005792 <_printf_i+0x1e6>
 800578e:	1b80      	subs	r0, r0, r6
 8005790:	6060      	str	r0, [r4, #4]
 8005792:	6863      	ldr	r3, [r4, #4]
 8005794:	6123      	str	r3, [r4, #16]
 8005796:	2300      	movs	r3, #0
 8005798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800579c:	e7aa      	b.n	80056f4 <_printf_i+0x148>
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	4632      	mov	r2, r6
 80057a2:	4649      	mov	r1, r9
 80057a4:	4640      	mov	r0, r8
 80057a6:	47d0      	blx	sl
 80057a8:	3001      	adds	r0, #1
 80057aa:	d0ad      	beq.n	8005708 <_printf_i+0x15c>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	079b      	lsls	r3, r3, #30
 80057b0:	d413      	bmi.n	80057da <_printf_i+0x22e>
 80057b2:	68e0      	ldr	r0, [r4, #12]
 80057b4:	9b03      	ldr	r3, [sp, #12]
 80057b6:	4298      	cmp	r0, r3
 80057b8:	bfb8      	it	lt
 80057ba:	4618      	movlt	r0, r3
 80057bc:	e7a6      	b.n	800570c <_printf_i+0x160>
 80057be:	2301      	movs	r3, #1
 80057c0:	4632      	mov	r2, r6
 80057c2:	4649      	mov	r1, r9
 80057c4:	4640      	mov	r0, r8
 80057c6:	47d0      	blx	sl
 80057c8:	3001      	adds	r0, #1
 80057ca:	d09d      	beq.n	8005708 <_printf_i+0x15c>
 80057cc:	3501      	adds	r5, #1
 80057ce:	68e3      	ldr	r3, [r4, #12]
 80057d0:	9903      	ldr	r1, [sp, #12]
 80057d2:	1a5b      	subs	r3, r3, r1
 80057d4:	42ab      	cmp	r3, r5
 80057d6:	dcf2      	bgt.n	80057be <_printf_i+0x212>
 80057d8:	e7eb      	b.n	80057b2 <_printf_i+0x206>
 80057da:	2500      	movs	r5, #0
 80057dc:	f104 0619 	add.w	r6, r4, #25
 80057e0:	e7f5      	b.n	80057ce <_printf_i+0x222>
 80057e2:	bf00      	nop
 80057e4:	08009b7a 	.word	0x08009b7a
 80057e8:	08009b8b 	.word	0x08009b8b

080057ec <_scanf_float>:
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	b087      	sub	sp, #28
 80057f2:	4617      	mov	r7, r2
 80057f4:	9303      	str	r3, [sp, #12]
 80057f6:	688b      	ldr	r3, [r1, #8]
 80057f8:	1e5a      	subs	r2, r3, #1
 80057fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80057fe:	bf81      	itttt	hi
 8005800:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005804:	eb03 0b05 	addhi.w	fp, r3, r5
 8005808:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800580c:	608b      	strhi	r3, [r1, #8]
 800580e:	680b      	ldr	r3, [r1, #0]
 8005810:	460a      	mov	r2, r1
 8005812:	f04f 0500 	mov.w	r5, #0
 8005816:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800581a:	f842 3b1c 	str.w	r3, [r2], #28
 800581e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005822:	4680      	mov	r8, r0
 8005824:	460c      	mov	r4, r1
 8005826:	bf98      	it	ls
 8005828:	f04f 0b00 	movls.w	fp, #0
 800582c:	9201      	str	r2, [sp, #4]
 800582e:	4616      	mov	r6, r2
 8005830:	46aa      	mov	sl, r5
 8005832:	46a9      	mov	r9, r5
 8005834:	9502      	str	r5, [sp, #8]
 8005836:	68a2      	ldr	r2, [r4, #8]
 8005838:	b152      	cbz	r2, 8005850 <_scanf_float+0x64>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005840:	d864      	bhi.n	800590c <_scanf_float+0x120>
 8005842:	2b40      	cmp	r3, #64	@ 0x40
 8005844:	d83c      	bhi.n	80058c0 <_scanf_float+0xd4>
 8005846:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800584a:	b2c8      	uxtb	r0, r1
 800584c:	280e      	cmp	r0, #14
 800584e:	d93a      	bls.n	80058c6 <_scanf_float+0xda>
 8005850:	f1b9 0f00 	cmp.w	r9, #0
 8005854:	d003      	beq.n	800585e <_scanf_float+0x72>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005862:	f1ba 0f01 	cmp.w	sl, #1
 8005866:	f200 8117 	bhi.w	8005a98 <_scanf_float+0x2ac>
 800586a:	9b01      	ldr	r3, [sp, #4]
 800586c:	429e      	cmp	r6, r3
 800586e:	f200 8108 	bhi.w	8005a82 <_scanf_float+0x296>
 8005872:	2001      	movs	r0, #1
 8005874:	b007      	add	sp, #28
 8005876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800587e:	2a0d      	cmp	r2, #13
 8005880:	d8e6      	bhi.n	8005850 <_scanf_float+0x64>
 8005882:	a101      	add	r1, pc, #4	@ (adr r1, 8005888 <_scanf_float+0x9c>)
 8005884:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005888:	080059cf 	.word	0x080059cf
 800588c:	08005851 	.word	0x08005851
 8005890:	08005851 	.word	0x08005851
 8005894:	08005851 	.word	0x08005851
 8005898:	08005a2f 	.word	0x08005a2f
 800589c:	08005a07 	.word	0x08005a07
 80058a0:	08005851 	.word	0x08005851
 80058a4:	08005851 	.word	0x08005851
 80058a8:	080059dd 	.word	0x080059dd
 80058ac:	08005851 	.word	0x08005851
 80058b0:	08005851 	.word	0x08005851
 80058b4:	08005851 	.word	0x08005851
 80058b8:	08005851 	.word	0x08005851
 80058bc:	08005995 	.word	0x08005995
 80058c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80058c4:	e7db      	b.n	800587e <_scanf_float+0x92>
 80058c6:	290e      	cmp	r1, #14
 80058c8:	d8c2      	bhi.n	8005850 <_scanf_float+0x64>
 80058ca:	a001      	add	r0, pc, #4	@ (adr r0, 80058d0 <_scanf_float+0xe4>)
 80058cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80058d0:	08005985 	.word	0x08005985
 80058d4:	08005851 	.word	0x08005851
 80058d8:	08005985 	.word	0x08005985
 80058dc:	08005a1b 	.word	0x08005a1b
 80058e0:	08005851 	.word	0x08005851
 80058e4:	0800592d 	.word	0x0800592d
 80058e8:	0800596b 	.word	0x0800596b
 80058ec:	0800596b 	.word	0x0800596b
 80058f0:	0800596b 	.word	0x0800596b
 80058f4:	0800596b 	.word	0x0800596b
 80058f8:	0800596b 	.word	0x0800596b
 80058fc:	0800596b 	.word	0x0800596b
 8005900:	0800596b 	.word	0x0800596b
 8005904:	0800596b 	.word	0x0800596b
 8005908:	0800596b 	.word	0x0800596b
 800590c:	2b6e      	cmp	r3, #110	@ 0x6e
 800590e:	d809      	bhi.n	8005924 <_scanf_float+0x138>
 8005910:	2b60      	cmp	r3, #96	@ 0x60
 8005912:	d8b2      	bhi.n	800587a <_scanf_float+0x8e>
 8005914:	2b54      	cmp	r3, #84	@ 0x54
 8005916:	d07b      	beq.n	8005a10 <_scanf_float+0x224>
 8005918:	2b59      	cmp	r3, #89	@ 0x59
 800591a:	d199      	bne.n	8005850 <_scanf_float+0x64>
 800591c:	2d07      	cmp	r5, #7
 800591e:	d197      	bne.n	8005850 <_scanf_float+0x64>
 8005920:	2508      	movs	r5, #8
 8005922:	e02c      	b.n	800597e <_scanf_float+0x192>
 8005924:	2b74      	cmp	r3, #116	@ 0x74
 8005926:	d073      	beq.n	8005a10 <_scanf_float+0x224>
 8005928:	2b79      	cmp	r3, #121	@ 0x79
 800592a:	e7f6      	b.n	800591a <_scanf_float+0x12e>
 800592c:	6821      	ldr	r1, [r4, #0]
 800592e:	05c8      	lsls	r0, r1, #23
 8005930:	d51b      	bpl.n	800596a <_scanf_float+0x17e>
 8005932:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005936:	6021      	str	r1, [r4, #0]
 8005938:	f109 0901 	add.w	r9, r9, #1
 800593c:	f1bb 0f00 	cmp.w	fp, #0
 8005940:	d003      	beq.n	800594a <_scanf_float+0x15e>
 8005942:	3201      	adds	r2, #1
 8005944:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005948:	60a2      	str	r2, [r4, #8]
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	3b01      	subs	r3, #1
 800594e:	60a3      	str	r3, [r4, #8]
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	3301      	adds	r3, #1
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3b01      	subs	r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	f340 8087 	ble.w	8005a70 <_scanf_float+0x284>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	e765      	b.n	8005836 <_scanf_float+0x4a>
 800596a:	eb1a 0105 	adds.w	r1, sl, r5
 800596e:	f47f af6f 	bne.w	8005850 <_scanf_float+0x64>
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005978:	6022      	str	r2, [r4, #0]
 800597a:	460d      	mov	r5, r1
 800597c:	468a      	mov	sl, r1
 800597e:	f806 3b01 	strb.w	r3, [r6], #1
 8005982:	e7e2      	b.n	800594a <_scanf_float+0x15e>
 8005984:	6822      	ldr	r2, [r4, #0]
 8005986:	0610      	lsls	r0, r2, #24
 8005988:	f57f af62 	bpl.w	8005850 <_scanf_float+0x64>
 800598c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005990:	6022      	str	r2, [r4, #0]
 8005992:	e7f4      	b.n	800597e <_scanf_float+0x192>
 8005994:	f1ba 0f00 	cmp.w	sl, #0
 8005998:	d10e      	bne.n	80059b8 <_scanf_float+0x1cc>
 800599a:	f1b9 0f00 	cmp.w	r9, #0
 800599e:	d10e      	bne.n	80059be <_scanf_float+0x1d2>
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80059a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80059aa:	d108      	bne.n	80059be <_scanf_float+0x1d2>
 80059ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80059b0:	6022      	str	r2, [r4, #0]
 80059b2:	f04f 0a01 	mov.w	sl, #1
 80059b6:	e7e2      	b.n	800597e <_scanf_float+0x192>
 80059b8:	f1ba 0f02 	cmp.w	sl, #2
 80059bc:	d055      	beq.n	8005a6a <_scanf_float+0x27e>
 80059be:	2d01      	cmp	r5, #1
 80059c0:	d002      	beq.n	80059c8 <_scanf_float+0x1dc>
 80059c2:	2d04      	cmp	r5, #4
 80059c4:	f47f af44 	bne.w	8005850 <_scanf_float+0x64>
 80059c8:	3501      	adds	r5, #1
 80059ca:	b2ed      	uxtb	r5, r5
 80059cc:	e7d7      	b.n	800597e <_scanf_float+0x192>
 80059ce:	f1ba 0f01 	cmp.w	sl, #1
 80059d2:	f47f af3d 	bne.w	8005850 <_scanf_float+0x64>
 80059d6:	f04f 0a02 	mov.w	sl, #2
 80059da:	e7d0      	b.n	800597e <_scanf_float+0x192>
 80059dc:	b97d      	cbnz	r5, 80059fe <_scanf_float+0x212>
 80059de:	f1b9 0f00 	cmp.w	r9, #0
 80059e2:	f47f af38 	bne.w	8005856 <_scanf_float+0x6a>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80059ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80059f0:	f040 8108 	bne.w	8005c04 <_scanf_float+0x418>
 80059f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80059f8:	6022      	str	r2, [r4, #0]
 80059fa:	2501      	movs	r5, #1
 80059fc:	e7bf      	b.n	800597e <_scanf_float+0x192>
 80059fe:	2d03      	cmp	r5, #3
 8005a00:	d0e2      	beq.n	80059c8 <_scanf_float+0x1dc>
 8005a02:	2d05      	cmp	r5, #5
 8005a04:	e7de      	b.n	80059c4 <_scanf_float+0x1d8>
 8005a06:	2d02      	cmp	r5, #2
 8005a08:	f47f af22 	bne.w	8005850 <_scanf_float+0x64>
 8005a0c:	2503      	movs	r5, #3
 8005a0e:	e7b6      	b.n	800597e <_scanf_float+0x192>
 8005a10:	2d06      	cmp	r5, #6
 8005a12:	f47f af1d 	bne.w	8005850 <_scanf_float+0x64>
 8005a16:	2507      	movs	r5, #7
 8005a18:	e7b1      	b.n	800597e <_scanf_float+0x192>
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	0591      	lsls	r1, r2, #22
 8005a1e:	f57f af17 	bpl.w	8005850 <_scanf_float+0x64>
 8005a22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005a26:	6022      	str	r2, [r4, #0]
 8005a28:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a2c:	e7a7      	b.n	800597e <_scanf_float+0x192>
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005a34:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005a38:	d006      	beq.n	8005a48 <_scanf_float+0x25c>
 8005a3a:	0550      	lsls	r0, r2, #21
 8005a3c:	f57f af08 	bpl.w	8005850 <_scanf_float+0x64>
 8005a40:	f1b9 0f00 	cmp.w	r9, #0
 8005a44:	f000 80de 	beq.w	8005c04 <_scanf_float+0x418>
 8005a48:	0591      	lsls	r1, r2, #22
 8005a4a:	bf58      	it	pl
 8005a4c:	9902      	ldrpl	r1, [sp, #8]
 8005a4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005a52:	bf58      	it	pl
 8005a54:	eba9 0101 	subpl.w	r1, r9, r1
 8005a58:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005a5c:	bf58      	it	pl
 8005a5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005a62:	6022      	str	r2, [r4, #0]
 8005a64:	f04f 0900 	mov.w	r9, #0
 8005a68:	e789      	b.n	800597e <_scanf_float+0x192>
 8005a6a:	f04f 0a03 	mov.w	sl, #3
 8005a6e:	e786      	b.n	800597e <_scanf_float+0x192>
 8005a70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005a74:	4639      	mov	r1, r7
 8005a76:	4640      	mov	r0, r8
 8005a78:	4798      	blx	r3
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f43f aedb 	beq.w	8005836 <_scanf_float+0x4a>
 8005a80:	e6e6      	b.n	8005850 <_scanf_float+0x64>
 8005a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a8a:	463a      	mov	r2, r7
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	4798      	blx	r3
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	e6e8      	b.n	800586a <_scanf_float+0x7e>
 8005a98:	1e6b      	subs	r3, r5, #1
 8005a9a:	2b06      	cmp	r3, #6
 8005a9c:	d824      	bhi.n	8005ae8 <_scanf_float+0x2fc>
 8005a9e:	2d02      	cmp	r5, #2
 8005aa0:	d836      	bhi.n	8005b10 <_scanf_float+0x324>
 8005aa2:	9b01      	ldr	r3, [sp, #4]
 8005aa4:	429e      	cmp	r6, r3
 8005aa6:	f67f aee4 	bls.w	8005872 <_scanf_float+0x86>
 8005aaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005aae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ab2:	463a      	mov	r2, r7
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	4798      	blx	r3
 8005ab8:	6923      	ldr	r3, [r4, #16]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	6123      	str	r3, [r4, #16]
 8005abe:	e7f0      	b.n	8005aa2 <_scanf_float+0x2b6>
 8005ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ac4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005ac8:	463a      	mov	r2, r7
 8005aca:	4640      	mov	r0, r8
 8005acc:	4798      	blx	r3
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005ad8:	fa5f fa8a 	uxtb.w	sl, sl
 8005adc:	f1ba 0f02 	cmp.w	sl, #2
 8005ae0:	d1ee      	bne.n	8005ac0 <_scanf_float+0x2d4>
 8005ae2:	3d03      	subs	r5, #3
 8005ae4:	b2ed      	uxtb	r5, r5
 8005ae6:	1b76      	subs	r6, r6, r5
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	05da      	lsls	r2, r3, #23
 8005aec:	d530      	bpl.n	8005b50 <_scanf_float+0x364>
 8005aee:	055b      	lsls	r3, r3, #21
 8005af0:	d511      	bpl.n	8005b16 <_scanf_float+0x32a>
 8005af2:	9b01      	ldr	r3, [sp, #4]
 8005af4:	429e      	cmp	r6, r3
 8005af6:	f67f aebc 	bls.w	8005872 <_scanf_float+0x86>
 8005afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005afe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b02:	463a      	mov	r2, r7
 8005b04:	4640      	mov	r0, r8
 8005b06:	4798      	blx	r3
 8005b08:	6923      	ldr	r3, [r4, #16]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	6123      	str	r3, [r4, #16]
 8005b0e:	e7f0      	b.n	8005af2 <_scanf_float+0x306>
 8005b10:	46aa      	mov	sl, r5
 8005b12:	46b3      	mov	fp, r6
 8005b14:	e7de      	b.n	8005ad4 <_scanf_float+0x2e8>
 8005b16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	2965      	cmp	r1, #101	@ 0x65
 8005b1e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005b22:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8005b26:	6123      	str	r3, [r4, #16]
 8005b28:	d00c      	beq.n	8005b44 <_scanf_float+0x358>
 8005b2a:	2945      	cmp	r1, #69	@ 0x45
 8005b2c:	d00a      	beq.n	8005b44 <_scanf_float+0x358>
 8005b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b32:	463a      	mov	r2, r7
 8005b34:	4640      	mov	r0, r8
 8005b36:	4798      	blx	r3
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	1eb5      	subs	r5, r6, #2
 8005b42:	6123      	str	r3, [r4, #16]
 8005b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b48:	463a      	mov	r2, r7
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	4798      	blx	r3
 8005b4e:	462e      	mov	r6, r5
 8005b50:	6822      	ldr	r2, [r4, #0]
 8005b52:	f012 0210 	ands.w	r2, r2, #16
 8005b56:	d001      	beq.n	8005b5c <_scanf_float+0x370>
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e68b      	b.n	8005874 <_scanf_float+0x88>
 8005b5c:	7032      	strb	r2, [r6, #0]
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b68:	d11c      	bne.n	8005ba4 <_scanf_float+0x3b8>
 8005b6a:	9b02      	ldr	r3, [sp, #8]
 8005b6c:	454b      	cmp	r3, r9
 8005b6e:	eba3 0209 	sub.w	r2, r3, r9
 8005b72:	d123      	bne.n	8005bbc <_scanf_float+0x3d0>
 8005b74:	9901      	ldr	r1, [sp, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	4640      	mov	r0, r8
 8005b7a:	f002 fb7d 	bl	8008278 <_strtod_r>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	6821      	ldr	r1, [r4, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f011 0f02 	tst.w	r1, #2
 8005b88:	ec57 6b10 	vmov	r6, r7, d0
 8005b8c:	f103 0204 	add.w	r2, r3, #4
 8005b90:	d01f      	beq.n	8005bd2 <_scanf_float+0x3e6>
 8005b92:	9903      	ldr	r1, [sp, #12]
 8005b94:	600a      	str	r2, [r1, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	e9c3 6700 	strd	r6, r7, [r3]
 8005b9c:	68e3      	ldr	r3, [r4, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60e3      	str	r3, [r4, #12]
 8005ba2:	e7d9      	b.n	8005b58 <_scanf_float+0x36c>
 8005ba4:	9b04      	ldr	r3, [sp, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0e4      	beq.n	8005b74 <_scanf_float+0x388>
 8005baa:	9905      	ldr	r1, [sp, #20]
 8005bac:	230a      	movs	r3, #10
 8005bae:	3101      	adds	r1, #1
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	f002 fbe1 	bl	8008378 <_strtol_r>
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	9e05      	ldr	r6, [sp, #20]
 8005bba:	1ac2      	subs	r2, r0, r3
 8005bbc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005bc0:	429e      	cmp	r6, r3
 8005bc2:	bf28      	it	cs
 8005bc4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005bc8:	4910      	ldr	r1, [pc, #64]	@ (8005c0c <_scanf_float+0x420>)
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f000 f8f6 	bl	8005dbc <siprintf>
 8005bd0:	e7d0      	b.n	8005b74 <_scanf_float+0x388>
 8005bd2:	f011 0f04 	tst.w	r1, #4
 8005bd6:	9903      	ldr	r1, [sp, #12]
 8005bd8:	600a      	str	r2, [r1, #0]
 8005bda:	d1dc      	bne.n	8005b96 <_scanf_float+0x3aa>
 8005bdc:	681d      	ldr	r5, [r3, #0]
 8005bde:	4632      	mov	r2, r6
 8005be0:	463b      	mov	r3, r7
 8005be2:	4630      	mov	r0, r6
 8005be4:	4639      	mov	r1, r7
 8005be6:	f7fa ffa9 	bl	8000b3c <__aeabi_dcmpun>
 8005bea:	b128      	cbz	r0, 8005bf8 <_scanf_float+0x40c>
 8005bec:	4808      	ldr	r0, [pc, #32]	@ (8005c10 <_scanf_float+0x424>)
 8005bee:	f000 f9e7 	bl	8005fc0 <nanf>
 8005bf2:	ed85 0a00 	vstr	s0, [r5]
 8005bf6:	e7d1      	b.n	8005b9c <_scanf_float+0x3b0>
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	f7fa fffc 	bl	8000bf8 <__aeabi_d2f>
 8005c00:	6028      	str	r0, [r5, #0]
 8005c02:	e7cb      	b.n	8005b9c <_scanf_float+0x3b0>
 8005c04:	f04f 0900 	mov.w	r9, #0
 8005c08:	e629      	b.n	800585e <_scanf_float+0x72>
 8005c0a:	bf00      	nop
 8005c0c:	08009b9c 	.word	0x08009b9c
 8005c10:	08009f35 	.word	0x08009f35

08005c14 <std>:
 8005c14:	2300      	movs	r3, #0
 8005c16:	b510      	push	{r4, lr}
 8005c18:	4604      	mov	r4, r0
 8005c1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c22:	6083      	str	r3, [r0, #8]
 8005c24:	8181      	strh	r1, [r0, #12]
 8005c26:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c28:	81c2      	strh	r2, [r0, #14]
 8005c2a:	6183      	str	r3, [r0, #24]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	2208      	movs	r2, #8
 8005c30:	305c      	adds	r0, #92	@ 0x5c
 8005c32:	f000 f926 	bl	8005e82 <memset>
 8005c36:	4b0d      	ldr	r3, [pc, #52]	@ (8005c6c <std+0x58>)
 8005c38:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <std+0x5c>)
 8005c3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <std+0x60>)
 8005c40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <std+0x64>)
 8005c44:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c46:	4b0d      	ldr	r3, [pc, #52]	@ (8005c7c <std+0x68>)
 8005c48:	6224      	str	r4, [r4, #32]
 8005c4a:	429c      	cmp	r4, r3
 8005c4c:	d006      	beq.n	8005c5c <std+0x48>
 8005c4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c52:	4294      	cmp	r4, r2
 8005c54:	d002      	beq.n	8005c5c <std+0x48>
 8005c56:	33d0      	adds	r3, #208	@ 0xd0
 8005c58:	429c      	cmp	r4, r3
 8005c5a:	d105      	bne.n	8005c68 <std+0x54>
 8005c5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c64:	f000 b99a 	b.w	8005f9c <__retarget_lock_init_recursive>
 8005c68:	bd10      	pop	{r4, pc}
 8005c6a:	bf00      	nop
 8005c6c:	08005dfd 	.word	0x08005dfd
 8005c70:	08005e1f 	.word	0x08005e1f
 8005c74:	08005e57 	.word	0x08005e57
 8005c78:	08005e7b 	.word	0x08005e7b
 8005c7c:	20000aa4 	.word	0x20000aa4

08005c80 <stdio_exit_handler>:
 8005c80:	4a02      	ldr	r2, [pc, #8]	@ (8005c8c <stdio_exit_handler+0xc>)
 8005c82:	4903      	ldr	r1, [pc, #12]	@ (8005c90 <stdio_exit_handler+0x10>)
 8005c84:	4803      	ldr	r0, [pc, #12]	@ (8005c94 <stdio_exit_handler+0x14>)
 8005c86:	f000 b869 	b.w	8005d5c <_fwalk_sglue>
 8005c8a:	bf00      	nop
 8005c8c:	200006a0 	.word	0x200006a0
 8005c90:	080089b9 	.word	0x080089b9
 8005c94:	200006b0 	.word	0x200006b0

08005c98 <cleanup_stdio>:
 8005c98:	6841      	ldr	r1, [r0, #4]
 8005c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ccc <cleanup_stdio+0x34>)
 8005c9c:	4299      	cmp	r1, r3
 8005c9e:	b510      	push	{r4, lr}
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	d001      	beq.n	8005ca8 <cleanup_stdio+0x10>
 8005ca4:	f002 fe88 	bl	80089b8 <_fflush_r>
 8005ca8:	68a1      	ldr	r1, [r4, #8]
 8005caa:	4b09      	ldr	r3, [pc, #36]	@ (8005cd0 <cleanup_stdio+0x38>)
 8005cac:	4299      	cmp	r1, r3
 8005cae:	d002      	beq.n	8005cb6 <cleanup_stdio+0x1e>
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f002 fe81 	bl	80089b8 <_fflush_r>
 8005cb6:	68e1      	ldr	r1, [r4, #12]
 8005cb8:	4b06      	ldr	r3, [pc, #24]	@ (8005cd4 <cleanup_stdio+0x3c>)
 8005cba:	4299      	cmp	r1, r3
 8005cbc:	d004      	beq.n	8005cc8 <cleanup_stdio+0x30>
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc4:	f002 be78 	b.w	80089b8 <_fflush_r>
 8005cc8:	bd10      	pop	{r4, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000aa4 	.word	0x20000aa4
 8005cd0:	20000b0c 	.word	0x20000b0c
 8005cd4:	20000b74 	.word	0x20000b74

08005cd8 <global_stdio_init.part.0>:
 8005cd8:	b510      	push	{r4, lr}
 8005cda:	4b0b      	ldr	r3, [pc, #44]	@ (8005d08 <global_stdio_init.part.0+0x30>)
 8005cdc:	4c0b      	ldr	r4, [pc, #44]	@ (8005d0c <global_stdio_init.part.0+0x34>)
 8005cde:	4a0c      	ldr	r2, [pc, #48]	@ (8005d10 <global_stdio_init.part.0+0x38>)
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2104      	movs	r1, #4
 8005ce8:	f7ff ff94 	bl	8005c14 <std>
 8005cec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	2109      	movs	r1, #9
 8005cf4:	f7ff ff8e 	bl	8005c14 <std>
 8005cf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d02:	2112      	movs	r1, #18
 8005d04:	f7ff bf86 	b.w	8005c14 <std>
 8005d08:	20000bdc 	.word	0x20000bdc
 8005d0c:	20000aa4 	.word	0x20000aa4
 8005d10:	08005c81 	.word	0x08005c81

08005d14 <__sfp_lock_acquire>:
 8005d14:	4801      	ldr	r0, [pc, #4]	@ (8005d1c <__sfp_lock_acquire+0x8>)
 8005d16:	f000 b942 	b.w	8005f9e <__retarget_lock_acquire_recursive>
 8005d1a:	bf00      	nop
 8005d1c:	20000be5 	.word	0x20000be5

08005d20 <__sfp_lock_release>:
 8005d20:	4801      	ldr	r0, [pc, #4]	@ (8005d28 <__sfp_lock_release+0x8>)
 8005d22:	f000 b93d 	b.w	8005fa0 <__retarget_lock_release_recursive>
 8005d26:	bf00      	nop
 8005d28:	20000be5 	.word	0x20000be5

08005d2c <__sinit>:
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	4604      	mov	r4, r0
 8005d30:	f7ff fff0 	bl	8005d14 <__sfp_lock_acquire>
 8005d34:	6a23      	ldr	r3, [r4, #32]
 8005d36:	b11b      	cbz	r3, 8005d40 <__sinit+0x14>
 8005d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d3c:	f7ff bff0 	b.w	8005d20 <__sfp_lock_release>
 8005d40:	4b04      	ldr	r3, [pc, #16]	@ (8005d54 <__sinit+0x28>)
 8005d42:	6223      	str	r3, [r4, #32]
 8005d44:	4b04      	ldr	r3, [pc, #16]	@ (8005d58 <__sinit+0x2c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f5      	bne.n	8005d38 <__sinit+0xc>
 8005d4c:	f7ff ffc4 	bl	8005cd8 <global_stdio_init.part.0>
 8005d50:	e7f2      	b.n	8005d38 <__sinit+0xc>
 8005d52:	bf00      	nop
 8005d54:	08005c99 	.word	0x08005c99
 8005d58:	20000bdc 	.word	0x20000bdc

08005d5c <_fwalk_sglue>:
 8005d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d60:	4607      	mov	r7, r0
 8005d62:	4688      	mov	r8, r1
 8005d64:	4614      	mov	r4, r2
 8005d66:	2600      	movs	r6, #0
 8005d68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d6c:	f1b9 0901 	subs.w	r9, r9, #1
 8005d70:	d505      	bpl.n	8005d7e <_fwalk_sglue+0x22>
 8005d72:	6824      	ldr	r4, [r4, #0]
 8005d74:	2c00      	cmp	r4, #0
 8005d76:	d1f7      	bne.n	8005d68 <_fwalk_sglue+0xc>
 8005d78:	4630      	mov	r0, r6
 8005d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7e:	89ab      	ldrh	r3, [r5, #12]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d907      	bls.n	8005d94 <_fwalk_sglue+0x38>
 8005d84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	d003      	beq.n	8005d94 <_fwalk_sglue+0x38>
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	4638      	mov	r0, r7
 8005d90:	47c0      	blx	r8
 8005d92:	4306      	orrs	r6, r0
 8005d94:	3568      	adds	r5, #104	@ 0x68
 8005d96:	e7e9      	b.n	8005d6c <_fwalk_sglue+0x10>

08005d98 <iprintf>:
 8005d98:	b40f      	push	{r0, r1, r2, r3}
 8005d9a:	b507      	push	{r0, r1, r2, lr}
 8005d9c:	4906      	ldr	r1, [pc, #24]	@ (8005db8 <iprintf+0x20>)
 8005d9e:	ab04      	add	r3, sp, #16
 8005da0:	6808      	ldr	r0, [r1, #0]
 8005da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da6:	6881      	ldr	r1, [r0, #8]
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	f002 fc69 	bl	8008680 <_vfiprintf_r>
 8005dae:	b003      	add	sp, #12
 8005db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005db4:	b004      	add	sp, #16
 8005db6:	4770      	bx	lr
 8005db8:	200006ac 	.word	0x200006ac

08005dbc <siprintf>:
 8005dbc:	b40e      	push	{r1, r2, r3}
 8005dbe:	b500      	push	{lr}
 8005dc0:	b09c      	sub	sp, #112	@ 0x70
 8005dc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005dc4:	9002      	str	r0, [sp, #8]
 8005dc6:	9006      	str	r0, [sp, #24]
 8005dc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005dcc:	4809      	ldr	r0, [pc, #36]	@ (8005df4 <siprintf+0x38>)
 8005dce:	9107      	str	r1, [sp, #28]
 8005dd0:	9104      	str	r1, [sp, #16]
 8005dd2:	4909      	ldr	r1, [pc, #36]	@ (8005df8 <siprintf+0x3c>)
 8005dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd8:	9105      	str	r1, [sp, #20]
 8005dda:	6800      	ldr	r0, [r0, #0]
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	a902      	add	r1, sp, #8
 8005de0:	f002 fb28 	bl	8008434 <_svfiprintf_r>
 8005de4:	9b02      	ldr	r3, [sp, #8]
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	b01c      	add	sp, #112	@ 0x70
 8005dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005df0:	b003      	add	sp, #12
 8005df2:	4770      	bx	lr
 8005df4:	200006ac 	.word	0x200006ac
 8005df8:	ffff0208 	.word	0xffff0208

08005dfc <__sread>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	460c      	mov	r4, r1
 8005e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e04:	f000 f86c 	bl	8005ee0 <_read_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	bfab      	itete	ge
 8005e0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e10:	181b      	addge	r3, r3, r0
 8005e12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e16:	bfac      	ite	ge
 8005e18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e1a:	81a3      	strhlt	r3, [r4, #12]
 8005e1c:	bd10      	pop	{r4, pc}

08005e1e <__swrite>:
 8005e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e22:	461f      	mov	r7, r3
 8005e24:	898b      	ldrh	r3, [r1, #12]
 8005e26:	05db      	lsls	r3, r3, #23
 8005e28:	4605      	mov	r5, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	4616      	mov	r6, r2
 8005e2e:	d505      	bpl.n	8005e3c <__swrite+0x1e>
 8005e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e34:	2302      	movs	r3, #2
 8005e36:	2200      	movs	r2, #0
 8005e38:	f000 f840 	bl	8005ebc <_lseek_r>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e46:	81a3      	strh	r3, [r4, #12]
 8005e48:	4632      	mov	r2, r6
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e52:	f000 b867 	b.w	8005f24 <_write_r>

08005e56 <__sseek>:
 8005e56:	b510      	push	{r4, lr}
 8005e58:	460c      	mov	r4, r1
 8005e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e5e:	f000 f82d 	bl	8005ebc <_lseek_r>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	bf15      	itete	ne
 8005e68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e72:	81a3      	strheq	r3, [r4, #12]
 8005e74:	bf18      	it	ne
 8005e76:	81a3      	strhne	r3, [r4, #12]
 8005e78:	bd10      	pop	{r4, pc}

08005e7a <__sclose>:
 8005e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7e:	f000 b80d 	b.w	8005e9c <_close_r>

08005e82 <memset>:
 8005e82:	4402      	add	r2, r0
 8005e84:	4603      	mov	r3, r0
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d100      	bne.n	8005e8c <memset+0xa>
 8005e8a:	4770      	bx	lr
 8005e8c:	f803 1b01 	strb.w	r1, [r3], #1
 8005e90:	e7f9      	b.n	8005e86 <memset+0x4>
	...

08005e94 <_localeconv_r>:
 8005e94:	4800      	ldr	r0, [pc, #0]	@ (8005e98 <_localeconv_r+0x4>)
 8005e96:	4770      	bx	lr
 8005e98:	200007ec 	.word	0x200007ec

08005e9c <_close_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d06      	ldr	r5, [pc, #24]	@ (8005eb8 <_close_r+0x1c>)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	602b      	str	r3, [r5, #0]
 8005ea8:	f003 fae2 	bl	8009470 <_close>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d102      	bne.n	8005eb6 <_close_r+0x1a>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	b103      	cbz	r3, 8005eb6 <_close_r+0x1a>
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
 8005eb8:	20000be0 	.word	0x20000be0

08005ebc <_lseek_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4d07      	ldr	r5, [pc, #28]	@ (8005edc <_lseek_r+0x20>)
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	4608      	mov	r0, r1
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	602a      	str	r2, [r5, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f003 faf8 	bl	80094c0 <_lseek>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_lseek_r+0x1e>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_lseek_r+0x1e>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	20000be0 	.word	0x20000be0

08005ee0 <_read_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d07      	ldr	r5, [pc, #28]	@ (8005f00 <_read_r+0x20>)
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	4608      	mov	r0, r1
 8005ee8:	4611      	mov	r1, r2
 8005eea:	2200      	movs	r2, #0
 8005eec:	602a      	str	r2, [r5, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f003 faee 	bl	80094d0 <_read>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_read_r+0x1e>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_read_r+0x1e>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	20000be0 	.word	0x20000be0

08005f04 <_sbrk_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d06      	ldr	r5, [pc, #24]	@ (8005f20 <_sbrk_r+0x1c>)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fb fc0e 	bl	8001730 <_sbrk>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_sbrk_r+0x1a>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_sbrk_r+0x1a>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	20000be0 	.word	0x20000be0

08005f24 <_write_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d07      	ldr	r5, [pc, #28]	@ (8005f44 <_write_r+0x20>)
 8005f28:	4604      	mov	r4, r0
 8005f2a:	4608      	mov	r0, r1
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f003 fad4 	bl	80094e0 <_write>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_write_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_write_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	20000be0 	.word	0x20000be0

08005f48 <__errno>:
 8005f48:	4b01      	ldr	r3, [pc, #4]	@ (8005f50 <__errno+0x8>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	200006ac 	.word	0x200006ac

08005f54 <__libc_init_array>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4d0d      	ldr	r5, [pc, #52]	@ (8005f8c <__libc_init_array+0x38>)
 8005f58:	4c0d      	ldr	r4, [pc, #52]	@ (8005f90 <__libc_init_array+0x3c>)
 8005f5a:	1b64      	subs	r4, r4, r5
 8005f5c:	10a4      	asrs	r4, r4, #2
 8005f5e:	2600      	movs	r6, #0
 8005f60:	42a6      	cmp	r6, r4
 8005f62:	d109      	bne.n	8005f78 <__libc_init_array+0x24>
 8005f64:	4d0b      	ldr	r5, [pc, #44]	@ (8005f94 <__libc_init_array+0x40>)
 8005f66:	4c0c      	ldr	r4, [pc, #48]	@ (8005f98 <__libc_init_array+0x44>)
 8005f68:	f003 fac4 	bl	80094f4 <_init>
 8005f6c:	1b64      	subs	r4, r4, r5
 8005f6e:	10a4      	asrs	r4, r4, #2
 8005f70:	2600      	movs	r6, #0
 8005f72:	42a6      	cmp	r6, r4
 8005f74:	d105      	bne.n	8005f82 <__libc_init_array+0x2e>
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7c:	4798      	blx	r3
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7ee      	b.n	8005f60 <__libc_init_array+0xc>
 8005f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f86:	4798      	blx	r3
 8005f88:	3601      	adds	r6, #1
 8005f8a:	e7f2      	b.n	8005f72 <__libc_init_array+0x1e>
 8005f8c:	08009fa0 	.word	0x08009fa0
 8005f90:	08009fa0 	.word	0x08009fa0
 8005f94:	08009fa0 	.word	0x08009fa0
 8005f98:	08009fa4 	.word	0x08009fa4

08005f9c <__retarget_lock_init_recursive>:
 8005f9c:	4770      	bx	lr

08005f9e <__retarget_lock_acquire_recursive>:
 8005f9e:	4770      	bx	lr

08005fa0 <__retarget_lock_release_recursive>:
 8005fa0:	4770      	bx	lr

08005fa2 <memcpy>:
 8005fa2:	440a      	add	r2, r1
 8005fa4:	4291      	cmp	r1, r2
 8005fa6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005faa:	d100      	bne.n	8005fae <memcpy+0xc>
 8005fac:	4770      	bx	lr
 8005fae:	b510      	push	{r4, lr}
 8005fb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fb8:	4291      	cmp	r1, r2
 8005fba:	d1f9      	bne.n	8005fb0 <memcpy+0xe>
 8005fbc:	bd10      	pop	{r4, pc}
	...

08005fc0 <nanf>:
 8005fc0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005fc8 <nanf+0x8>
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	7fc00000 	.word	0x7fc00000

08005fcc <quorem>:
 8005fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	6903      	ldr	r3, [r0, #16]
 8005fd2:	690c      	ldr	r4, [r1, #16]
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	4607      	mov	r7, r0
 8005fd8:	db7e      	blt.n	80060d8 <quorem+0x10c>
 8005fda:	3c01      	subs	r4, #1
 8005fdc:	f101 0814 	add.w	r8, r1, #20
 8005fe0:	00a3      	lsls	r3, r4, #2
 8005fe2:	f100 0514 	add.w	r5, r0, #20
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ff2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ffe:	fbb2 f6f3 	udiv	r6, r2, r3
 8006002:	d32e      	bcc.n	8006062 <quorem+0x96>
 8006004:	f04f 0a00 	mov.w	sl, #0
 8006008:	46c4      	mov	ip, r8
 800600a:	46ae      	mov	lr, r5
 800600c:	46d3      	mov	fp, sl
 800600e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006012:	b298      	uxth	r0, r3
 8006014:	fb06 a000 	mla	r0, r6, r0, sl
 8006018:	0c02      	lsrs	r2, r0, #16
 800601a:	0c1b      	lsrs	r3, r3, #16
 800601c:	fb06 2303 	mla	r3, r6, r3, r2
 8006020:	f8de 2000 	ldr.w	r2, [lr]
 8006024:	b280      	uxth	r0, r0
 8006026:	b292      	uxth	r2, r2
 8006028:	1a12      	subs	r2, r2, r0
 800602a:	445a      	add	r2, fp
 800602c:	f8de 0000 	ldr.w	r0, [lr]
 8006030:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006034:	b29b      	uxth	r3, r3
 8006036:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800603a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800603e:	b292      	uxth	r2, r2
 8006040:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006044:	45e1      	cmp	r9, ip
 8006046:	f84e 2b04 	str.w	r2, [lr], #4
 800604a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800604e:	d2de      	bcs.n	800600e <quorem+0x42>
 8006050:	9b00      	ldr	r3, [sp, #0]
 8006052:	58eb      	ldr	r3, [r5, r3]
 8006054:	b92b      	cbnz	r3, 8006062 <quorem+0x96>
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	3b04      	subs	r3, #4
 800605a:	429d      	cmp	r5, r3
 800605c:	461a      	mov	r2, r3
 800605e:	d32f      	bcc.n	80060c0 <quorem+0xf4>
 8006060:	613c      	str	r4, [r7, #16]
 8006062:	4638      	mov	r0, r7
 8006064:	f001 f90e 	bl	8007284 <__mcmp>
 8006068:	2800      	cmp	r0, #0
 800606a:	db25      	blt.n	80060b8 <quorem+0xec>
 800606c:	4629      	mov	r1, r5
 800606e:	2000      	movs	r0, #0
 8006070:	f858 2b04 	ldr.w	r2, [r8], #4
 8006074:	f8d1 c000 	ldr.w	ip, [r1]
 8006078:	fa1f fe82 	uxth.w	lr, r2
 800607c:	fa1f f38c 	uxth.w	r3, ip
 8006080:	eba3 030e 	sub.w	r3, r3, lr
 8006084:	4403      	add	r3, r0
 8006086:	0c12      	lsrs	r2, r2, #16
 8006088:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800608c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006090:	b29b      	uxth	r3, r3
 8006092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006096:	45c1      	cmp	r9, r8
 8006098:	f841 3b04 	str.w	r3, [r1], #4
 800609c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060a0:	d2e6      	bcs.n	8006070 <quorem+0xa4>
 80060a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060aa:	b922      	cbnz	r2, 80060b6 <quorem+0xea>
 80060ac:	3b04      	subs	r3, #4
 80060ae:	429d      	cmp	r5, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	d30b      	bcc.n	80060cc <quorem+0x100>
 80060b4:	613c      	str	r4, [r7, #16]
 80060b6:	3601      	adds	r6, #1
 80060b8:	4630      	mov	r0, r6
 80060ba:	b003      	add	sp, #12
 80060bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c0:	6812      	ldr	r2, [r2, #0]
 80060c2:	3b04      	subs	r3, #4
 80060c4:	2a00      	cmp	r2, #0
 80060c6:	d1cb      	bne.n	8006060 <quorem+0x94>
 80060c8:	3c01      	subs	r4, #1
 80060ca:	e7c6      	b.n	800605a <quorem+0x8e>
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	3b04      	subs	r3, #4
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	d1ef      	bne.n	80060b4 <quorem+0xe8>
 80060d4:	3c01      	subs	r4, #1
 80060d6:	e7ea      	b.n	80060ae <quorem+0xe2>
 80060d8:	2000      	movs	r0, #0
 80060da:	e7ee      	b.n	80060ba <quorem+0xee>
 80060dc:	0000      	movs	r0, r0
	...

080060e0 <_dtoa_r>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	69c7      	ldr	r7, [r0, #28]
 80060e6:	b099      	sub	sp, #100	@ 0x64
 80060e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80060ec:	ec55 4b10 	vmov	r4, r5, d0
 80060f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80060f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80060f4:	4683      	mov	fp, r0
 80060f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80060f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060fa:	b97f      	cbnz	r7, 800611c <_dtoa_r+0x3c>
 80060fc:	2010      	movs	r0, #16
 80060fe:	f7fe fe39 	bl	8004d74 <malloc>
 8006102:	4602      	mov	r2, r0
 8006104:	f8cb 001c 	str.w	r0, [fp, #28]
 8006108:	b920      	cbnz	r0, 8006114 <_dtoa_r+0x34>
 800610a:	4ba7      	ldr	r3, [pc, #668]	@ (80063a8 <_dtoa_r+0x2c8>)
 800610c:	21ef      	movs	r1, #239	@ 0xef
 800610e:	48a7      	ldr	r0, [pc, #668]	@ (80063ac <_dtoa_r+0x2cc>)
 8006110:	f002 fd42 	bl	8008b98 <__assert_func>
 8006114:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006118:	6007      	str	r7, [r0, #0]
 800611a:	60c7      	str	r7, [r0, #12]
 800611c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006120:	6819      	ldr	r1, [r3, #0]
 8006122:	b159      	cbz	r1, 800613c <_dtoa_r+0x5c>
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	604a      	str	r2, [r1, #4]
 8006128:	2301      	movs	r3, #1
 800612a:	4093      	lsls	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
 800612e:	4658      	mov	r0, fp
 8006130:	f000 fe24 	bl	8006d7c <_Bfree>
 8006134:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	1e2b      	subs	r3, r5, #0
 800613e:	bfb9      	ittee	lt
 8006140:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006144:	9303      	strlt	r3, [sp, #12]
 8006146:	2300      	movge	r3, #0
 8006148:	6033      	strge	r3, [r6, #0]
 800614a:	9f03      	ldr	r7, [sp, #12]
 800614c:	4b98      	ldr	r3, [pc, #608]	@ (80063b0 <_dtoa_r+0x2d0>)
 800614e:	bfbc      	itt	lt
 8006150:	2201      	movlt	r2, #1
 8006152:	6032      	strlt	r2, [r6, #0]
 8006154:	43bb      	bics	r3, r7
 8006156:	d112      	bne.n	800617e <_dtoa_r+0x9e>
 8006158:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800615a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006164:	4323      	orrs	r3, r4
 8006166:	f000 854d 	beq.w	8006c04 <_dtoa_r+0xb24>
 800616a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800616c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80063c4 <_dtoa_r+0x2e4>
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 854f 	beq.w	8006c14 <_dtoa_r+0xb34>
 8006176:	f10a 0303 	add.w	r3, sl, #3
 800617a:	f000 bd49 	b.w	8006c10 <_dtoa_r+0xb30>
 800617e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006182:	2200      	movs	r2, #0
 8006184:	ec51 0b17 	vmov	r0, r1, d7
 8006188:	2300      	movs	r3, #0
 800618a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800618e:	f7fa fca3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006192:	4680      	mov	r8, r0
 8006194:	b158      	cbz	r0, 80061ae <_dtoa_r+0xce>
 8006196:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006198:	2301      	movs	r3, #1
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800619e:	b113      	cbz	r3, 80061a6 <_dtoa_r+0xc6>
 80061a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061a2:	4b84      	ldr	r3, [pc, #528]	@ (80063b4 <_dtoa_r+0x2d4>)
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80063c8 <_dtoa_r+0x2e8>
 80061aa:	f000 bd33 	b.w	8006c14 <_dtoa_r+0xb34>
 80061ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80061b2:	aa16      	add	r2, sp, #88	@ 0x58
 80061b4:	a917      	add	r1, sp, #92	@ 0x5c
 80061b6:	4658      	mov	r0, fp
 80061b8:	f001 f984 	bl	80074c4 <__d2b>
 80061bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80061c0:	4681      	mov	r9, r0
 80061c2:	2e00      	cmp	r6, #0
 80061c4:	d077      	beq.n	80062b6 <_dtoa_r+0x1d6>
 80061c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80061cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80061d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80061dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80061e0:	4619      	mov	r1, r3
 80061e2:	2200      	movs	r2, #0
 80061e4:	4b74      	ldr	r3, [pc, #464]	@ (80063b8 <_dtoa_r+0x2d8>)
 80061e6:	f7fa f857 	bl	8000298 <__aeabi_dsub>
 80061ea:	a369      	add	r3, pc, #420	@ (adr r3, 8006390 <_dtoa_r+0x2b0>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f7fa fa0a 	bl	8000608 <__aeabi_dmul>
 80061f4:	a368      	add	r3, pc, #416	@ (adr r3, 8006398 <_dtoa_r+0x2b8>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f7fa f84f 	bl	800029c <__adddf3>
 80061fe:	4604      	mov	r4, r0
 8006200:	4630      	mov	r0, r6
 8006202:	460d      	mov	r5, r1
 8006204:	f7fa f996 	bl	8000534 <__aeabi_i2d>
 8006208:	a365      	add	r3, pc, #404	@ (adr r3, 80063a0 <_dtoa_r+0x2c0>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa f9fb 	bl	8000608 <__aeabi_dmul>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4620      	mov	r0, r4
 8006218:	4629      	mov	r1, r5
 800621a:	f7fa f83f 	bl	800029c <__adddf3>
 800621e:	4604      	mov	r4, r0
 8006220:	460d      	mov	r5, r1
 8006222:	f7fa fca1 	bl	8000b68 <__aeabi_d2iz>
 8006226:	2200      	movs	r2, #0
 8006228:	4607      	mov	r7, r0
 800622a:	2300      	movs	r3, #0
 800622c:	4620      	mov	r0, r4
 800622e:	4629      	mov	r1, r5
 8006230:	f7fa fc5c 	bl	8000aec <__aeabi_dcmplt>
 8006234:	b140      	cbz	r0, 8006248 <_dtoa_r+0x168>
 8006236:	4638      	mov	r0, r7
 8006238:	f7fa f97c 	bl	8000534 <__aeabi_i2d>
 800623c:	4622      	mov	r2, r4
 800623e:	462b      	mov	r3, r5
 8006240:	f7fa fc4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006244:	b900      	cbnz	r0, 8006248 <_dtoa_r+0x168>
 8006246:	3f01      	subs	r7, #1
 8006248:	2f16      	cmp	r7, #22
 800624a:	d851      	bhi.n	80062f0 <_dtoa_r+0x210>
 800624c:	4b5b      	ldr	r3, [pc, #364]	@ (80063bc <_dtoa_r+0x2dc>)
 800624e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800625a:	f7fa fc47 	bl	8000aec <__aeabi_dcmplt>
 800625e:	2800      	cmp	r0, #0
 8006260:	d048      	beq.n	80062f4 <_dtoa_r+0x214>
 8006262:	3f01      	subs	r7, #1
 8006264:	2300      	movs	r3, #0
 8006266:	9312      	str	r3, [sp, #72]	@ 0x48
 8006268:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800626a:	1b9b      	subs	r3, r3, r6
 800626c:	1e5a      	subs	r2, r3, #1
 800626e:	bf44      	itt	mi
 8006270:	f1c3 0801 	rsbmi	r8, r3, #1
 8006274:	2300      	movmi	r3, #0
 8006276:	9208      	str	r2, [sp, #32]
 8006278:	bf54      	ite	pl
 800627a:	f04f 0800 	movpl.w	r8, #0
 800627e:	9308      	strmi	r3, [sp, #32]
 8006280:	2f00      	cmp	r7, #0
 8006282:	db39      	blt.n	80062f8 <_dtoa_r+0x218>
 8006284:	9b08      	ldr	r3, [sp, #32]
 8006286:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006288:	443b      	add	r3, r7
 800628a:	9308      	str	r3, [sp, #32]
 800628c:	2300      	movs	r3, #0
 800628e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006292:	2b09      	cmp	r3, #9
 8006294:	d864      	bhi.n	8006360 <_dtoa_r+0x280>
 8006296:	2b05      	cmp	r3, #5
 8006298:	bfc4      	itt	gt
 800629a:	3b04      	subgt	r3, #4
 800629c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800629e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a0:	f1a3 0302 	sub.w	r3, r3, #2
 80062a4:	bfcc      	ite	gt
 80062a6:	2400      	movgt	r4, #0
 80062a8:	2401      	movle	r4, #1
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d863      	bhi.n	8006376 <_dtoa_r+0x296>
 80062ae:	e8df f003 	tbb	[pc, r3]
 80062b2:	372a      	.short	0x372a
 80062b4:	5535      	.short	0x5535
 80062b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80062ba:	441e      	add	r6, r3
 80062bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	bfc1      	itttt	gt
 80062c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80062c8:	409f      	lslgt	r7, r3
 80062ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80062ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80062d2:	bfd6      	itet	le
 80062d4:	f1c3 0320 	rsble	r3, r3, #32
 80062d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80062dc:	fa04 f003 	lslle.w	r0, r4, r3
 80062e0:	f7fa f918 	bl	8000514 <__aeabi_ui2d>
 80062e4:	2201      	movs	r2, #1
 80062e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80062ea:	3e01      	subs	r6, #1
 80062ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80062ee:	e777      	b.n	80061e0 <_dtoa_r+0x100>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e7b8      	b.n	8006266 <_dtoa_r+0x186>
 80062f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80062f6:	e7b7      	b.n	8006268 <_dtoa_r+0x188>
 80062f8:	427b      	negs	r3, r7
 80062fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80062fc:	2300      	movs	r3, #0
 80062fe:	eba8 0807 	sub.w	r8, r8, r7
 8006302:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006304:	e7c4      	b.n	8006290 <_dtoa_r+0x1b0>
 8006306:	2300      	movs	r3, #0
 8006308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800630a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800630c:	2b00      	cmp	r3, #0
 800630e:	dc35      	bgt.n	800637c <_dtoa_r+0x29c>
 8006310:	2301      	movs	r3, #1
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	9307      	str	r3, [sp, #28]
 8006316:	461a      	mov	r2, r3
 8006318:	920e      	str	r2, [sp, #56]	@ 0x38
 800631a:	e00b      	b.n	8006334 <_dtoa_r+0x254>
 800631c:	2301      	movs	r3, #1
 800631e:	e7f3      	b.n	8006308 <_dtoa_r+0x228>
 8006320:	2300      	movs	r3, #0
 8006322:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	3301      	adds	r3, #1
 800632c:	2b01      	cmp	r3, #1
 800632e:	9307      	str	r3, [sp, #28]
 8006330:	bfb8      	it	lt
 8006332:	2301      	movlt	r3, #1
 8006334:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006338:	2100      	movs	r1, #0
 800633a:	2204      	movs	r2, #4
 800633c:	f102 0514 	add.w	r5, r2, #20
 8006340:	429d      	cmp	r5, r3
 8006342:	d91f      	bls.n	8006384 <_dtoa_r+0x2a4>
 8006344:	6041      	str	r1, [r0, #4]
 8006346:	4658      	mov	r0, fp
 8006348:	f000 fcd8 	bl	8006cfc <_Balloc>
 800634c:	4682      	mov	sl, r0
 800634e:	2800      	cmp	r0, #0
 8006350:	d13c      	bne.n	80063cc <_dtoa_r+0x2ec>
 8006352:	4b1b      	ldr	r3, [pc, #108]	@ (80063c0 <_dtoa_r+0x2e0>)
 8006354:	4602      	mov	r2, r0
 8006356:	f240 11af 	movw	r1, #431	@ 0x1af
 800635a:	e6d8      	b.n	800610e <_dtoa_r+0x2e>
 800635c:	2301      	movs	r3, #1
 800635e:	e7e0      	b.n	8006322 <_dtoa_r+0x242>
 8006360:	2401      	movs	r4, #1
 8006362:	2300      	movs	r3, #0
 8006364:	9309      	str	r3, [sp, #36]	@ 0x24
 8006366:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006368:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	9307      	str	r3, [sp, #28]
 8006370:	2200      	movs	r2, #0
 8006372:	2312      	movs	r3, #18
 8006374:	e7d0      	b.n	8006318 <_dtoa_r+0x238>
 8006376:	2301      	movs	r3, #1
 8006378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800637a:	e7f5      	b.n	8006368 <_dtoa_r+0x288>
 800637c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	9307      	str	r3, [sp, #28]
 8006382:	e7d7      	b.n	8006334 <_dtoa_r+0x254>
 8006384:	3101      	adds	r1, #1
 8006386:	0052      	lsls	r2, r2, #1
 8006388:	e7d8      	b.n	800633c <_dtoa_r+0x25c>
 800638a:	bf00      	nop
 800638c:	f3af 8000 	nop.w
 8006390:	636f4361 	.word	0x636f4361
 8006394:	3fd287a7 	.word	0x3fd287a7
 8006398:	8b60c8b3 	.word	0x8b60c8b3
 800639c:	3fc68a28 	.word	0x3fc68a28
 80063a0:	509f79fb 	.word	0x509f79fb
 80063a4:	3fd34413 	.word	0x3fd34413
 80063a8:	08009bae 	.word	0x08009bae
 80063ac:	08009bc5 	.word	0x08009bc5
 80063b0:	7ff00000 	.word	0x7ff00000
 80063b4:	08009b79 	.word	0x08009b79
 80063b8:	3ff80000 	.word	0x3ff80000
 80063bc:	08009cc0 	.word	0x08009cc0
 80063c0:	08009c1d 	.word	0x08009c1d
 80063c4:	08009baa 	.word	0x08009baa
 80063c8:	08009b78 	.word	0x08009b78
 80063cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063d0:	6018      	str	r0, [r3, #0]
 80063d2:	9b07      	ldr	r3, [sp, #28]
 80063d4:	2b0e      	cmp	r3, #14
 80063d6:	f200 80a4 	bhi.w	8006522 <_dtoa_r+0x442>
 80063da:	2c00      	cmp	r4, #0
 80063dc:	f000 80a1 	beq.w	8006522 <_dtoa_r+0x442>
 80063e0:	2f00      	cmp	r7, #0
 80063e2:	dd33      	ble.n	800644c <_dtoa_r+0x36c>
 80063e4:	4bad      	ldr	r3, [pc, #692]	@ (800669c <_dtoa_r+0x5bc>)
 80063e6:	f007 020f 	and.w	r2, r7, #15
 80063ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063ee:	ed93 7b00 	vldr	d7, [r3]
 80063f2:	05f8      	lsls	r0, r7, #23
 80063f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80063f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80063fc:	d516      	bpl.n	800642c <_dtoa_r+0x34c>
 80063fe:	4ba8      	ldr	r3, [pc, #672]	@ (80066a0 <_dtoa_r+0x5c0>)
 8006400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006408:	f7fa fa28 	bl	800085c <__aeabi_ddiv>
 800640c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006410:	f004 040f 	and.w	r4, r4, #15
 8006414:	2603      	movs	r6, #3
 8006416:	4da2      	ldr	r5, [pc, #648]	@ (80066a0 <_dtoa_r+0x5c0>)
 8006418:	b954      	cbnz	r4, 8006430 <_dtoa_r+0x350>
 800641a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800641e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006422:	f7fa fa1b 	bl	800085c <__aeabi_ddiv>
 8006426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800642a:	e028      	b.n	800647e <_dtoa_r+0x39e>
 800642c:	2602      	movs	r6, #2
 800642e:	e7f2      	b.n	8006416 <_dtoa_r+0x336>
 8006430:	07e1      	lsls	r1, r4, #31
 8006432:	d508      	bpl.n	8006446 <_dtoa_r+0x366>
 8006434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006438:	e9d5 2300 	ldrd	r2, r3, [r5]
 800643c:	f7fa f8e4 	bl	8000608 <__aeabi_dmul>
 8006440:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006444:	3601      	adds	r6, #1
 8006446:	1064      	asrs	r4, r4, #1
 8006448:	3508      	adds	r5, #8
 800644a:	e7e5      	b.n	8006418 <_dtoa_r+0x338>
 800644c:	f000 80d2 	beq.w	80065f4 <_dtoa_r+0x514>
 8006450:	427c      	negs	r4, r7
 8006452:	4b92      	ldr	r3, [pc, #584]	@ (800669c <_dtoa_r+0x5bc>)
 8006454:	4d92      	ldr	r5, [pc, #584]	@ (80066a0 <_dtoa_r+0x5c0>)
 8006456:	f004 020f 	and.w	r2, r4, #15
 800645a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800645e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006466:	f7fa f8cf 	bl	8000608 <__aeabi_dmul>
 800646a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800646e:	1124      	asrs	r4, r4, #4
 8006470:	2300      	movs	r3, #0
 8006472:	2602      	movs	r6, #2
 8006474:	2c00      	cmp	r4, #0
 8006476:	f040 80b2 	bne.w	80065de <_dtoa_r+0x4fe>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1d3      	bne.n	8006426 <_dtoa_r+0x346>
 800647e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006480:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80b7 	beq.w	80065f8 <_dtoa_r+0x518>
 800648a:	4b86      	ldr	r3, [pc, #536]	@ (80066a4 <_dtoa_r+0x5c4>)
 800648c:	2200      	movs	r2, #0
 800648e:	4620      	mov	r0, r4
 8006490:	4629      	mov	r1, r5
 8006492:	f7fa fb2b 	bl	8000aec <__aeabi_dcmplt>
 8006496:	2800      	cmp	r0, #0
 8006498:	f000 80ae 	beq.w	80065f8 <_dtoa_r+0x518>
 800649c:	9b07      	ldr	r3, [sp, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 80aa 	beq.w	80065f8 <_dtoa_r+0x518>
 80064a4:	9b00      	ldr	r3, [sp, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dd37      	ble.n	800651a <_dtoa_r+0x43a>
 80064aa:	1e7b      	subs	r3, r7, #1
 80064ac:	9304      	str	r3, [sp, #16]
 80064ae:	4620      	mov	r0, r4
 80064b0:	4b7d      	ldr	r3, [pc, #500]	@ (80066a8 <_dtoa_r+0x5c8>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	4629      	mov	r1, r5
 80064b6:	f7fa f8a7 	bl	8000608 <__aeabi_dmul>
 80064ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064be:	9c00      	ldr	r4, [sp, #0]
 80064c0:	3601      	adds	r6, #1
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7fa f836 	bl	8000534 <__aeabi_i2d>
 80064c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064cc:	f7fa f89c 	bl	8000608 <__aeabi_dmul>
 80064d0:	4b76      	ldr	r3, [pc, #472]	@ (80066ac <_dtoa_r+0x5cc>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	f7f9 fee2 	bl	800029c <__adddf3>
 80064d8:	4605      	mov	r5, r0
 80064da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80064de:	2c00      	cmp	r4, #0
 80064e0:	f040 808d 	bne.w	80065fe <_dtoa_r+0x51e>
 80064e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e8:	4b71      	ldr	r3, [pc, #452]	@ (80066b0 <_dtoa_r+0x5d0>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	f7f9 fed4 	bl	8000298 <__aeabi_dsub>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064f8:	462a      	mov	r2, r5
 80064fa:	4633      	mov	r3, r6
 80064fc:	f7fa fb14 	bl	8000b28 <__aeabi_dcmpgt>
 8006500:	2800      	cmp	r0, #0
 8006502:	f040 828b 	bne.w	8006a1c <_dtoa_r+0x93c>
 8006506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800650a:	462a      	mov	r2, r5
 800650c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006510:	f7fa faec 	bl	8000aec <__aeabi_dcmplt>
 8006514:	2800      	cmp	r0, #0
 8006516:	f040 8128 	bne.w	800676a <_dtoa_r+0x68a>
 800651a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800651e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006522:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006524:	2b00      	cmp	r3, #0
 8006526:	f2c0 815a 	blt.w	80067de <_dtoa_r+0x6fe>
 800652a:	2f0e      	cmp	r7, #14
 800652c:	f300 8157 	bgt.w	80067de <_dtoa_r+0x6fe>
 8006530:	4b5a      	ldr	r3, [pc, #360]	@ (800669c <_dtoa_r+0x5bc>)
 8006532:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006536:	ed93 7b00 	vldr	d7, [r3]
 800653a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	ed8d 7b00 	vstr	d7, [sp]
 8006542:	da03      	bge.n	800654c <_dtoa_r+0x46c>
 8006544:	9b07      	ldr	r3, [sp, #28]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f340 8101 	ble.w	800674e <_dtoa_r+0x66e>
 800654c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006550:	4656      	mov	r6, sl
 8006552:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006556:	4620      	mov	r0, r4
 8006558:	4629      	mov	r1, r5
 800655a:	f7fa f97f 	bl	800085c <__aeabi_ddiv>
 800655e:	f7fa fb03 	bl	8000b68 <__aeabi_d2iz>
 8006562:	4680      	mov	r8, r0
 8006564:	f7f9 ffe6 	bl	8000534 <__aeabi_i2d>
 8006568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800656c:	f7fa f84c 	bl	8000608 <__aeabi_dmul>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4620      	mov	r0, r4
 8006576:	4629      	mov	r1, r5
 8006578:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800657c:	f7f9 fe8c 	bl	8000298 <__aeabi_dsub>
 8006580:	f806 4b01 	strb.w	r4, [r6], #1
 8006584:	9d07      	ldr	r5, [sp, #28]
 8006586:	eba6 040a 	sub.w	r4, r6, sl
 800658a:	42a5      	cmp	r5, r4
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	f040 8117 	bne.w	80067c2 <_dtoa_r+0x6e2>
 8006594:	f7f9 fe82 	bl	800029c <__adddf3>
 8006598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800659c:	4604      	mov	r4, r0
 800659e:	460d      	mov	r5, r1
 80065a0:	f7fa fac2 	bl	8000b28 <__aeabi_dcmpgt>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	f040 80f9 	bne.w	800679c <_dtoa_r+0x6bc>
 80065aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ae:	4620      	mov	r0, r4
 80065b0:	4629      	mov	r1, r5
 80065b2:	f7fa fa91 	bl	8000ad8 <__aeabi_dcmpeq>
 80065b6:	b118      	cbz	r0, 80065c0 <_dtoa_r+0x4e0>
 80065b8:	f018 0f01 	tst.w	r8, #1
 80065bc:	f040 80ee 	bne.w	800679c <_dtoa_r+0x6bc>
 80065c0:	4649      	mov	r1, r9
 80065c2:	4658      	mov	r0, fp
 80065c4:	f000 fbda 	bl	8006d7c <_Bfree>
 80065c8:	2300      	movs	r3, #0
 80065ca:	7033      	strb	r3, [r6, #0]
 80065cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065ce:	3701      	adds	r7, #1
 80065d0:	601f      	str	r7, [r3, #0]
 80065d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 831d 	beq.w	8006c14 <_dtoa_r+0xb34>
 80065da:	601e      	str	r6, [r3, #0]
 80065dc:	e31a      	b.n	8006c14 <_dtoa_r+0xb34>
 80065de:	07e2      	lsls	r2, r4, #31
 80065e0:	d505      	bpl.n	80065ee <_dtoa_r+0x50e>
 80065e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065e6:	f7fa f80f 	bl	8000608 <__aeabi_dmul>
 80065ea:	3601      	adds	r6, #1
 80065ec:	2301      	movs	r3, #1
 80065ee:	1064      	asrs	r4, r4, #1
 80065f0:	3508      	adds	r5, #8
 80065f2:	e73f      	b.n	8006474 <_dtoa_r+0x394>
 80065f4:	2602      	movs	r6, #2
 80065f6:	e742      	b.n	800647e <_dtoa_r+0x39e>
 80065f8:	9c07      	ldr	r4, [sp, #28]
 80065fa:	9704      	str	r7, [sp, #16]
 80065fc:	e761      	b.n	80064c2 <_dtoa_r+0x3e2>
 80065fe:	4b27      	ldr	r3, [pc, #156]	@ (800669c <_dtoa_r+0x5bc>)
 8006600:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006602:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006606:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800660a:	4454      	add	r4, sl
 800660c:	2900      	cmp	r1, #0
 800660e:	d053      	beq.n	80066b8 <_dtoa_r+0x5d8>
 8006610:	4928      	ldr	r1, [pc, #160]	@ (80066b4 <_dtoa_r+0x5d4>)
 8006612:	2000      	movs	r0, #0
 8006614:	f7fa f922 	bl	800085c <__aeabi_ddiv>
 8006618:	4633      	mov	r3, r6
 800661a:	462a      	mov	r2, r5
 800661c:	f7f9 fe3c 	bl	8000298 <__aeabi_dsub>
 8006620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006624:	4656      	mov	r6, sl
 8006626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800662a:	f7fa fa9d 	bl	8000b68 <__aeabi_d2iz>
 800662e:	4605      	mov	r5, r0
 8006630:	f7f9 ff80 	bl	8000534 <__aeabi_i2d>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800663c:	f7f9 fe2c 	bl	8000298 <__aeabi_dsub>
 8006640:	3530      	adds	r5, #48	@ 0x30
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800664a:	f806 5b01 	strb.w	r5, [r6], #1
 800664e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006652:	f7fa fa4b 	bl	8000aec <__aeabi_dcmplt>
 8006656:	2800      	cmp	r0, #0
 8006658:	d171      	bne.n	800673e <_dtoa_r+0x65e>
 800665a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800665e:	4911      	ldr	r1, [pc, #68]	@ (80066a4 <_dtoa_r+0x5c4>)
 8006660:	2000      	movs	r0, #0
 8006662:	f7f9 fe19 	bl	8000298 <__aeabi_dsub>
 8006666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800666a:	f7fa fa3f 	bl	8000aec <__aeabi_dcmplt>
 800666e:	2800      	cmp	r0, #0
 8006670:	f040 8095 	bne.w	800679e <_dtoa_r+0x6be>
 8006674:	42a6      	cmp	r6, r4
 8006676:	f43f af50 	beq.w	800651a <_dtoa_r+0x43a>
 800667a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800667e:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <_dtoa_r+0x5c8>)
 8006680:	2200      	movs	r2, #0
 8006682:	f7f9 ffc1 	bl	8000608 <__aeabi_dmul>
 8006686:	4b08      	ldr	r3, [pc, #32]	@ (80066a8 <_dtoa_r+0x5c8>)
 8006688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800668c:	2200      	movs	r2, #0
 800668e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006692:	f7f9 ffb9 	bl	8000608 <__aeabi_dmul>
 8006696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800669a:	e7c4      	b.n	8006626 <_dtoa_r+0x546>
 800669c:	08009cc0 	.word	0x08009cc0
 80066a0:	08009c98 	.word	0x08009c98
 80066a4:	3ff00000 	.word	0x3ff00000
 80066a8:	40240000 	.word	0x40240000
 80066ac:	401c0000 	.word	0x401c0000
 80066b0:	40140000 	.word	0x40140000
 80066b4:	3fe00000 	.word	0x3fe00000
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	f7f9 ffa4 	bl	8000608 <__aeabi_dmul>
 80066c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80066c6:	4656      	mov	r6, sl
 80066c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066cc:	f7fa fa4c 	bl	8000b68 <__aeabi_d2iz>
 80066d0:	4605      	mov	r5, r0
 80066d2:	f7f9 ff2f 	bl	8000534 <__aeabi_i2d>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066de:	f7f9 fddb 	bl	8000298 <__aeabi_dsub>
 80066e2:	3530      	adds	r5, #48	@ 0x30
 80066e4:	f806 5b01 	strb.w	r5, [r6], #1
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	d124      	bne.n	8006742 <_dtoa_r+0x662>
 80066f8:	4bac      	ldr	r3, [pc, #688]	@ (80069ac <_dtoa_r+0x8cc>)
 80066fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066fe:	f7f9 fdcd 	bl	800029c <__adddf3>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800670a:	f7fa fa0d 	bl	8000b28 <__aeabi_dcmpgt>
 800670e:	2800      	cmp	r0, #0
 8006710:	d145      	bne.n	800679e <_dtoa_r+0x6be>
 8006712:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006716:	49a5      	ldr	r1, [pc, #660]	@ (80069ac <_dtoa_r+0x8cc>)
 8006718:	2000      	movs	r0, #0
 800671a:	f7f9 fdbd 	bl	8000298 <__aeabi_dsub>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006726:	f7fa f9e1 	bl	8000aec <__aeabi_dcmplt>
 800672a:	2800      	cmp	r0, #0
 800672c:	f43f aef5 	beq.w	800651a <_dtoa_r+0x43a>
 8006730:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006732:	1e73      	subs	r3, r6, #1
 8006734:	9315      	str	r3, [sp, #84]	@ 0x54
 8006736:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800673a:	2b30      	cmp	r3, #48	@ 0x30
 800673c:	d0f8      	beq.n	8006730 <_dtoa_r+0x650>
 800673e:	9f04      	ldr	r7, [sp, #16]
 8006740:	e73e      	b.n	80065c0 <_dtoa_r+0x4e0>
 8006742:	4b9b      	ldr	r3, [pc, #620]	@ (80069b0 <_dtoa_r+0x8d0>)
 8006744:	f7f9 ff60 	bl	8000608 <__aeabi_dmul>
 8006748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800674c:	e7bc      	b.n	80066c8 <_dtoa_r+0x5e8>
 800674e:	d10c      	bne.n	800676a <_dtoa_r+0x68a>
 8006750:	4b98      	ldr	r3, [pc, #608]	@ (80069b4 <_dtoa_r+0x8d4>)
 8006752:	2200      	movs	r2, #0
 8006754:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006758:	f7f9 ff56 	bl	8000608 <__aeabi_dmul>
 800675c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006760:	f7fa f9d8 	bl	8000b14 <__aeabi_dcmpge>
 8006764:	2800      	cmp	r0, #0
 8006766:	f000 8157 	beq.w	8006a18 <_dtoa_r+0x938>
 800676a:	2400      	movs	r4, #0
 800676c:	4625      	mov	r5, r4
 800676e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006770:	43db      	mvns	r3, r3
 8006772:	9304      	str	r3, [sp, #16]
 8006774:	4656      	mov	r6, sl
 8006776:	2700      	movs	r7, #0
 8006778:	4621      	mov	r1, r4
 800677a:	4658      	mov	r0, fp
 800677c:	f000 fafe 	bl	8006d7c <_Bfree>
 8006780:	2d00      	cmp	r5, #0
 8006782:	d0dc      	beq.n	800673e <_dtoa_r+0x65e>
 8006784:	b12f      	cbz	r7, 8006792 <_dtoa_r+0x6b2>
 8006786:	42af      	cmp	r7, r5
 8006788:	d003      	beq.n	8006792 <_dtoa_r+0x6b2>
 800678a:	4639      	mov	r1, r7
 800678c:	4658      	mov	r0, fp
 800678e:	f000 faf5 	bl	8006d7c <_Bfree>
 8006792:	4629      	mov	r1, r5
 8006794:	4658      	mov	r0, fp
 8006796:	f000 faf1 	bl	8006d7c <_Bfree>
 800679a:	e7d0      	b.n	800673e <_dtoa_r+0x65e>
 800679c:	9704      	str	r7, [sp, #16]
 800679e:	4633      	mov	r3, r6
 80067a0:	461e      	mov	r6, r3
 80067a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067a6:	2a39      	cmp	r2, #57	@ 0x39
 80067a8:	d107      	bne.n	80067ba <_dtoa_r+0x6da>
 80067aa:	459a      	cmp	sl, r3
 80067ac:	d1f8      	bne.n	80067a0 <_dtoa_r+0x6c0>
 80067ae:	9a04      	ldr	r2, [sp, #16]
 80067b0:	3201      	adds	r2, #1
 80067b2:	9204      	str	r2, [sp, #16]
 80067b4:	2230      	movs	r2, #48	@ 0x30
 80067b6:	f88a 2000 	strb.w	r2, [sl]
 80067ba:	781a      	ldrb	r2, [r3, #0]
 80067bc:	3201      	adds	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e7bd      	b.n	800673e <_dtoa_r+0x65e>
 80067c2:	4b7b      	ldr	r3, [pc, #492]	@ (80069b0 <_dtoa_r+0x8d0>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	f7f9 ff1f 	bl	8000608 <__aeabi_dmul>
 80067ca:	2200      	movs	r2, #0
 80067cc:	2300      	movs	r3, #0
 80067ce:	4604      	mov	r4, r0
 80067d0:	460d      	mov	r5, r1
 80067d2:	f7fa f981 	bl	8000ad8 <__aeabi_dcmpeq>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f43f aebb 	beq.w	8006552 <_dtoa_r+0x472>
 80067dc:	e6f0      	b.n	80065c0 <_dtoa_r+0x4e0>
 80067de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067e0:	2a00      	cmp	r2, #0
 80067e2:	f000 80db 	beq.w	800699c <_dtoa_r+0x8bc>
 80067e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067e8:	2a01      	cmp	r2, #1
 80067ea:	f300 80bf 	bgt.w	800696c <_dtoa_r+0x88c>
 80067ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80067f0:	2a00      	cmp	r2, #0
 80067f2:	f000 80b7 	beq.w	8006964 <_dtoa_r+0x884>
 80067f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80067fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067fc:	4646      	mov	r6, r8
 80067fe:	9a08      	ldr	r2, [sp, #32]
 8006800:	2101      	movs	r1, #1
 8006802:	441a      	add	r2, r3
 8006804:	4658      	mov	r0, fp
 8006806:	4498      	add	r8, r3
 8006808:	9208      	str	r2, [sp, #32]
 800680a:	f000 fbb5 	bl	8006f78 <__i2b>
 800680e:	4605      	mov	r5, r0
 8006810:	b15e      	cbz	r6, 800682a <_dtoa_r+0x74a>
 8006812:	9b08      	ldr	r3, [sp, #32]
 8006814:	2b00      	cmp	r3, #0
 8006816:	dd08      	ble.n	800682a <_dtoa_r+0x74a>
 8006818:	42b3      	cmp	r3, r6
 800681a:	9a08      	ldr	r2, [sp, #32]
 800681c:	bfa8      	it	ge
 800681e:	4633      	movge	r3, r6
 8006820:	eba8 0803 	sub.w	r8, r8, r3
 8006824:	1af6      	subs	r6, r6, r3
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	9308      	str	r3, [sp, #32]
 800682a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800682c:	b1f3      	cbz	r3, 800686c <_dtoa_r+0x78c>
 800682e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80b7 	beq.w	80069a4 <_dtoa_r+0x8c4>
 8006836:	b18c      	cbz	r4, 800685c <_dtoa_r+0x77c>
 8006838:	4629      	mov	r1, r5
 800683a:	4622      	mov	r2, r4
 800683c:	4658      	mov	r0, fp
 800683e:	f000 fc5b 	bl	80070f8 <__pow5mult>
 8006842:	464a      	mov	r2, r9
 8006844:	4601      	mov	r1, r0
 8006846:	4605      	mov	r5, r0
 8006848:	4658      	mov	r0, fp
 800684a:	f000 fbab 	bl	8006fa4 <__multiply>
 800684e:	4649      	mov	r1, r9
 8006850:	9004      	str	r0, [sp, #16]
 8006852:	4658      	mov	r0, fp
 8006854:	f000 fa92 	bl	8006d7c <_Bfree>
 8006858:	9b04      	ldr	r3, [sp, #16]
 800685a:	4699      	mov	r9, r3
 800685c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800685e:	1b1a      	subs	r2, r3, r4
 8006860:	d004      	beq.n	800686c <_dtoa_r+0x78c>
 8006862:	4649      	mov	r1, r9
 8006864:	4658      	mov	r0, fp
 8006866:	f000 fc47 	bl	80070f8 <__pow5mult>
 800686a:	4681      	mov	r9, r0
 800686c:	2101      	movs	r1, #1
 800686e:	4658      	mov	r0, fp
 8006870:	f000 fb82 	bl	8006f78 <__i2b>
 8006874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006876:	4604      	mov	r4, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 81cf 	beq.w	8006c1c <_dtoa_r+0xb3c>
 800687e:	461a      	mov	r2, r3
 8006880:	4601      	mov	r1, r0
 8006882:	4658      	mov	r0, fp
 8006884:	f000 fc38 	bl	80070f8 <__pow5mult>
 8006888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800688a:	2b01      	cmp	r3, #1
 800688c:	4604      	mov	r4, r0
 800688e:	f300 8095 	bgt.w	80069bc <_dtoa_r+0x8dc>
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f040 8087 	bne.w	80069a8 <_dtoa_r+0x8c8>
 800689a:	9b03      	ldr	r3, [sp, #12]
 800689c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f040 8089 	bne.w	80069b8 <_dtoa_r+0x8d8>
 80068a6:	9b03      	ldr	r3, [sp, #12]
 80068a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068ac:	0d1b      	lsrs	r3, r3, #20
 80068ae:	051b      	lsls	r3, r3, #20
 80068b0:	b12b      	cbz	r3, 80068be <_dtoa_r+0x7de>
 80068b2:	9b08      	ldr	r3, [sp, #32]
 80068b4:	3301      	adds	r3, #1
 80068b6:	9308      	str	r3, [sp, #32]
 80068b8:	f108 0801 	add.w	r8, r8, #1
 80068bc:	2301      	movs	r3, #1
 80068be:	930a      	str	r3, [sp, #40]	@ 0x28
 80068c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 81b0 	beq.w	8006c28 <_dtoa_r+0xb48>
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068ce:	6918      	ldr	r0, [r3, #16]
 80068d0:	f000 fb06 	bl	8006ee0 <__hi0bits>
 80068d4:	f1c0 0020 	rsb	r0, r0, #32
 80068d8:	9b08      	ldr	r3, [sp, #32]
 80068da:	4418      	add	r0, r3
 80068dc:	f010 001f 	ands.w	r0, r0, #31
 80068e0:	d077      	beq.n	80069d2 <_dtoa_r+0x8f2>
 80068e2:	f1c0 0320 	rsb	r3, r0, #32
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	dd6b      	ble.n	80069c2 <_dtoa_r+0x8e2>
 80068ea:	9b08      	ldr	r3, [sp, #32]
 80068ec:	f1c0 001c 	rsb	r0, r0, #28
 80068f0:	4403      	add	r3, r0
 80068f2:	4480      	add	r8, r0
 80068f4:	4406      	add	r6, r0
 80068f6:	9308      	str	r3, [sp, #32]
 80068f8:	f1b8 0f00 	cmp.w	r8, #0
 80068fc:	dd05      	ble.n	800690a <_dtoa_r+0x82a>
 80068fe:	4649      	mov	r1, r9
 8006900:	4642      	mov	r2, r8
 8006902:	4658      	mov	r0, fp
 8006904:	f000 fc52 	bl	80071ac <__lshift>
 8006908:	4681      	mov	r9, r0
 800690a:	9b08      	ldr	r3, [sp, #32]
 800690c:	2b00      	cmp	r3, #0
 800690e:	dd05      	ble.n	800691c <_dtoa_r+0x83c>
 8006910:	4621      	mov	r1, r4
 8006912:	461a      	mov	r2, r3
 8006914:	4658      	mov	r0, fp
 8006916:	f000 fc49 	bl	80071ac <__lshift>
 800691a:	4604      	mov	r4, r0
 800691c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800691e:	2b00      	cmp	r3, #0
 8006920:	d059      	beq.n	80069d6 <_dtoa_r+0x8f6>
 8006922:	4621      	mov	r1, r4
 8006924:	4648      	mov	r0, r9
 8006926:	f000 fcad 	bl	8007284 <__mcmp>
 800692a:	2800      	cmp	r0, #0
 800692c:	da53      	bge.n	80069d6 <_dtoa_r+0x8f6>
 800692e:	1e7b      	subs	r3, r7, #1
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	4649      	mov	r1, r9
 8006934:	2300      	movs	r3, #0
 8006936:	220a      	movs	r2, #10
 8006938:	4658      	mov	r0, fp
 800693a:	f000 fa41 	bl	8006dc0 <__multadd>
 800693e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006940:	4681      	mov	r9, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 8172 	beq.w	8006c2c <_dtoa_r+0xb4c>
 8006948:	2300      	movs	r3, #0
 800694a:	4629      	mov	r1, r5
 800694c:	220a      	movs	r2, #10
 800694e:	4658      	mov	r0, fp
 8006950:	f000 fa36 	bl	8006dc0 <__multadd>
 8006954:	9b00      	ldr	r3, [sp, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	4605      	mov	r5, r0
 800695a:	dc67      	bgt.n	8006a2c <_dtoa_r+0x94c>
 800695c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800695e:	2b02      	cmp	r3, #2
 8006960:	dc41      	bgt.n	80069e6 <_dtoa_r+0x906>
 8006962:	e063      	b.n	8006a2c <_dtoa_r+0x94c>
 8006964:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006966:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800696a:	e746      	b.n	80067fa <_dtoa_r+0x71a>
 800696c:	9b07      	ldr	r3, [sp, #28]
 800696e:	1e5c      	subs	r4, r3, #1
 8006970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006972:	42a3      	cmp	r3, r4
 8006974:	bfbf      	itttt	lt
 8006976:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006978:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800697a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800697c:	1ae3      	sublt	r3, r4, r3
 800697e:	bfb4      	ite	lt
 8006980:	18d2      	addlt	r2, r2, r3
 8006982:	1b1c      	subge	r4, r3, r4
 8006984:	9b07      	ldr	r3, [sp, #28]
 8006986:	bfbc      	itt	lt
 8006988:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800698a:	2400      	movlt	r4, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	bfb5      	itete	lt
 8006990:	eba8 0603 	sublt.w	r6, r8, r3
 8006994:	9b07      	ldrge	r3, [sp, #28]
 8006996:	2300      	movlt	r3, #0
 8006998:	4646      	movge	r6, r8
 800699a:	e730      	b.n	80067fe <_dtoa_r+0x71e>
 800699c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800699e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80069a0:	4646      	mov	r6, r8
 80069a2:	e735      	b.n	8006810 <_dtoa_r+0x730>
 80069a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069a6:	e75c      	b.n	8006862 <_dtoa_r+0x782>
 80069a8:	2300      	movs	r3, #0
 80069aa:	e788      	b.n	80068be <_dtoa_r+0x7de>
 80069ac:	3fe00000 	.word	0x3fe00000
 80069b0:	40240000 	.word	0x40240000
 80069b4:	40140000 	.word	0x40140000
 80069b8:	9b02      	ldr	r3, [sp, #8]
 80069ba:	e780      	b.n	80068be <_dtoa_r+0x7de>
 80069bc:	2300      	movs	r3, #0
 80069be:	930a      	str	r3, [sp, #40]	@ 0x28
 80069c0:	e782      	b.n	80068c8 <_dtoa_r+0x7e8>
 80069c2:	d099      	beq.n	80068f8 <_dtoa_r+0x818>
 80069c4:	9a08      	ldr	r2, [sp, #32]
 80069c6:	331c      	adds	r3, #28
 80069c8:	441a      	add	r2, r3
 80069ca:	4498      	add	r8, r3
 80069cc:	441e      	add	r6, r3
 80069ce:	9208      	str	r2, [sp, #32]
 80069d0:	e792      	b.n	80068f8 <_dtoa_r+0x818>
 80069d2:	4603      	mov	r3, r0
 80069d4:	e7f6      	b.n	80069c4 <_dtoa_r+0x8e4>
 80069d6:	9b07      	ldr	r3, [sp, #28]
 80069d8:	9704      	str	r7, [sp, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	dc20      	bgt.n	8006a20 <_dtoa_r+0x940>
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	dd1e      	ble.n	8006a24 <_dtoa_r+0x944>
 80069e6:	9b00      	ldr	r3, [sp, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f47f aec0 	bne.w	800676e <_dtoa_r+0x68e>
 80069ee:	4621      	mov	r1, r4
 80069f0:	2205      	movs	r2, #5
 80069f2:	4658      	mov	r0, fp
 80069f4:	f000 f9e4 	bl	8006dc0 <__multadd>
 80069f8:	4601      	mov	r1, r0
 80069fa:	4604      	mov	r4, r0
 80069fc:	4648      	mov	r0, r9
 80069fe:	f000 fc41 	bl	8007284 <__mcmp>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	f77f aeb3 	ble.w	800676e <_dtoa_r+0x68e>
 8006a08:	4656      	mov	r6, sl
 8006a0a:	2331      	movs	r3, #49	@ 0x31
 8006a0c:	f806 3b01 	strb.w	r3, [r6], #1
 8006a10:	9b04      	ldr	r3, [sp, #16]
 8006a12:	3301      	adds	r3, #1
 8006a14:	9304      	str	r3, [sp, #16]
 8006a16:	e6ae      	b.n	8006776 <_dtoa_r+0x696>
 8006a18:	9c07      	ldr	r4, [sp, #28]
 8006a1a:	9704      	str	r7, [sp, #16]
 8006a1c:	4625      	mov	r5, r4
 8006a1e:	e7f3      	b.n	8006a08 <_dtoa_r+0x928>
 8006a20:	9b07      	ldr	r3, [sp, #28]
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8104 	beq.w	8006c34 <_dtoa_r+0xb54>
 8006a2c:	2e00      	cmp	r6, #0
 8006a2e:	dd05      	ble.n	8006a3c <_dtoa_r+0x95c>
 8006a30:	4629      	mov	r1, r5
 8006a32:	4632      	mov	r2, r6
 8006a34:	4658      	mov	r0, fp
 8006a36:	f000 fbb9 	bl	80071ac <__lshift>
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d05a      	beq.n	8006af8 <_dtoa_r+0xa18>
 8006a42:	6869      	ldr	r1, [r5, #4]
 8006a44:	4658      	mov	r0, fp
 8006a46:	f000 f959 	bl	8006cfc <_Balloc>
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	b928      	cbnz	r0, 8006a5a <_dtoa_r+0x97a>
 8006a4e:	4b84      	ldr	r3, [pc, #528]	@ (8006c60 <_dtoa_r+0xb80>)
 8006a50:	4602      	mov	r2, r0
 8006a52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a56:	f7ff bb5a 	b.w	800610e <_dtoa_r+0x2e>
 8006a5a:	692a      	ldr	r2, [r5, #16]
 8006a5c:	3202      	adds	r2, #2
 8006a5e:	0092      	lsls	r2, r2, #2
 8006a60:	f105 010c 	add.w	r1, r5, #12
 8006a64:	300c      	adds	r0, #12
 8006a66:	f7ff fa9c 	bl	8005fa2 <memcpy>
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4658      	mov	r0, fp
 8006a70:	f000 fb9c 	bl	80071ac <__lshift>
 8006a74:	f10a 0301 	add.w	r3, sl, #1
 8006a78:	9307      	str	r3, [sp, #28]
 8006a7a:	9b00      	ldr	r3, [sp, #0]
 8006a7c:	4453      	add	r3, sl
 8006a7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a80:	9b02      	ldr	r3, [sp, #8]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	462f      	mov	r7, r5
 8006a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	4621      	mov	r1, r4
 8006a90:	3b01      	subs	r3, #1
 8006a92:	4648      	mov	r0, r9
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	f7ff fa99 	bl	8005fcc <quorem>
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	9002      	str	r0, [sp, #8]
 8006a9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006aa2:	4648      	mov	r0, r9
 8006aa4:	f000 fbee 	bl	8007284 <__mcmp>
 8006aa8:	462a      	mov	r2, r5
 8006aaa:	9008      	str	r0, [sp, #32]
 8006aac:	4621      	mov	r1, r4
 8006aae:	4658      	mov	r0, fp
 8006ab0:	f000 fc04 	bl	80072bc <__mdiff>
 8006ab4:	68c2      	ldr	r2, [r0, #12]
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	bb02      	cbnz	r2, 8006afc <_dtoa_r+0xa1c>
 8006aba:	4601      	mov	r1, r0
 8006abc:	4648      	mov	r0, r9
 8006abe:	f000 fbe1 	bl	8007284 <__mcmp>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4658      	mov	r0, fp
 8006ac8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006aca:	f000 f957 	bl	8006d7c <_Bfree>
 8006ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ad2:	9e07      	ldr	r6, [sp, #28]
 8006ad4:	ea43 0102 	orr.w	r1, r3, r2
 8006ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ada:	4319      	orrs	r1, r3
 8006adc:	d110      	bne.n	8006b00 <_dtoa_r+0xa20>
 8006ade:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ae2:	d029      	beq.n	8006b38 <_dtoa_r+0xa58>
 8006ae4:	9b08      	ldr	r3, [sp, #32]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dd02      	ble.n	8006af0 <_dtoa_r+0xa10>
 8006aea:	9b02      	ldr	r3, [sp, #8]
 8006aec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006af0:	9b00      	ldr	r3, [sp, #0]
 8006af2:	f883 8000 	strb.w	r8, [r3]
 8006af6:	e63f      	b.n	8006778 <_dtoa_r+0x698>
 8006af8:	4628      	mov	r0, r5
 8006afa:	e7bb      	b.n	8006a74 <_dtoa_r+0x994>
 8006afc:	2201      	movs	r2, #1
 8006afe:	e7e1      	b.n	8006ac4 <_dtoa_r+0x9e4>
 8006b00:	9b08      	ldr	r3, [sp, #32]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	db04      	blt.n	8006b10 <_dtoa_r+0xa30>
 8006b06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	d120      	bne.n	8006b52 <_dtoa_r+0xa72>
 8006b10:	2a00      	cmp	r2, #0
 8006b12:	dded      	ble.n	8006af0 <_dtoa_r+0xa10>
 8006b14:	4649      	mov	r1, r9
 8006b16:	2201      	movs	r2, #1
 8006b18:	4658      	mov	r0, fp
 8006b1a:	f000 fb47 	bl	80071ac <__lshift>
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4681      	mov	r9, r0
 8006b22:	f000 fbaf 	bl	8007284 <__mcmp>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	dc03      	bgt.n	8006b32 <_dtoa_r+0xa52>
 8006b2a:	d1e1      	bne.n	8006af0 <_dtoa_r+0xa10>
 8006b2c:	f018 0f01 	tst.w	r8, #1
 8006b30:	d0de      	beq.n	8006af0 <_dtoa_r+0xa10>
 8006b32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b36:	d1d8      	bne.n	8006aea <_dtoa_r+0xa0a>
 8006b38:	9a00      	ldr	r2, [sp, #0]
 8006b3a:	2339      	movs	r3, #57	@ 0x39
 8006b3c:	7013      	strb	r3, [r2, #0]
 8006b3e:	4633      	mov	r3, r6
 8006b40:	461e      	mov	r6, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b48:	2a39      	cmp	r2, #57	@ 0x39
 8006b4a:	d052      	beq.n	8006bf2 <_dtoa_r+0xb12>
 8006b4c:	3201      	adds	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	e612      	b.n	8006778 <_dtoa_r+0x698>
 8006b52:	2a00      	cmp	r2, #0
 8006b54:	dd07      	ble.n	8006b66 <_dtoa_r+0xa86>
 8006b56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b5a:	d0ed      	beq.n	8006b38 <_dtoa_r+0xa58>
 8006b5c:	9a00      	ldr	r2, [sp, #0]
 8006b5e:	f108 0301 	add.w	r3, r8, #1
 8006b62:	7013      	strb	r3, [r2, #0]
 8006b64:	e608      	b.n	8006778 <_dtoa_r+0x698>
 8006b66:	9b07      	ldr	r3, [sp, #28]
 8006b68:	9a07      	ldr	r2, [sp, #28]
 8006b6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d028      	beq.n	8006bc6 <_dtoa_r+0xae6>
 8006b74:	4649      	mov	r1, r9
 8006b76:	2300      	movs	r3, #0
 8006b78:	220a      	movs	r2, #10
 8006b7a:	4658      	mov	r0, fp
 8006b7c:	f000 f920 	bl	8006dc0 <__multadd>
 8006b80:	42af      	cmp	r7, r5
 8006b82:	4681      	mov	r9, r0
 8006b84:	f04f 0300 	mov.w	r3, #0
 8006b88:	f04f 020a 	mov.w	r2, #10
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	4658      	mov	r0, fp
 8006b90:	d107      	bne.n	8006ba2 <_dtoa_r+0xac2>
 8006b92:	f000 f915 	bl	8006dc0 <__multadd>
 8006b96:	4607      	mov	r7, r0
 8006b98:	4605      	mov	r5, r0
 8006b9a:	9b07      	ldr	r3, [sp, #28]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	e774      	b.n	8006a8c <_dtoa_r+0x9ac>
 8006ba2:	f000 f90d 	bl	8006dc0 <__multadd>
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	4607      	mov	r7, r0
 8006baa:	2300      	movs	r3, #0
 8006bac:	220a      	movs	r2, #10
 8006bae:	4658      	mov	r0, fp
 8006bb0:	f000 f906 	bl	8006dc0 <__multadd>
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	e7f0      	b.n	8006b9a <_dtoa_r+0xaba>
 8006bb8:	9b00      	ldr	r3, [sp, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bfcc      	ite	gt
 8006bbe:	461e      	movgt	r6, r3
 8006bc0:	2601      	movle	r6, #1
 8006bc2:	4456      	add	r6, sl
 8006bc4:	2700      	movs	r7, #0
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	2201      	movs	r2, #1
 8006bca:	4658      	mov	r0, fp
 8006bcc:	f000 faee 	bl	80071ac <__lshift>
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4681      	mov	r9, r0
 8006bd4:	f000 fb56 	bl	8007284 <__mcmp>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	dcb0      	bgt.n	8006b3e <_dtoa_r+0xa5e>
 8006bdc:	d102      	bne.n	8006be4 <_dtoa_r+0xb04>
 8006bde:	f018 0f01 	tst.w	r8, #1
 8006be2:	d1ac      	bne.n	8006b3e <_dtoa_r+0xa5e>
 8006be4:	4633      	mov	r3, r6
 8006be6:	461e      	mov	r6, r3
 8006be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bec:	2a30      	cmp	r2, #48	@ 0x30
 8006bee:	d0fa      	beq.n	8006be6 <_dtoa_r+0xb06>
 8006bf0:	e5c2      	b.n	8006778 <_dtoa_r+0x698>
 8006bf2:	459a      	cmp	sl, r3
 8006bf4:	d1a4      	bne.n	8006b40 <_dtoa_r+0xa60>
 8006bf6:	9b04      	ldr	r3, [sp, #16]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	2331      	movs	r3, #49	@ 0x31
 8006bfe:	f88a 3000 	strb.w	r3, [sl]
 8006c02:	e5b9      	b.n	8006778 <_dtoa_r+0x698>
 8006c04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006c64 <_dtoa_r+0xb84>
 8006c0a:	b11b      	cbz	r3, 8006c14 <_dtoa_r+0xb34>
 8006c0c:	f10a 0308 	add.w	r3, sl, #8
 8006c10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	4650      	mov	r0, sl
 8006c16:	b019      	add	sp, #100	@ 0x64
 8006c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	f77f ae37 	ble.w	8006892 <_dtoa_r+0x7b2>
 8006c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c28:	2001      	movs	r0, #1
 8006c2a:	e655      	b.n	80068d8 <_dtoa_r+0x7f8>
 8006c2c:	9b00      	ldr	r3, [sp, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f77f aed6 	ble.w	80069e0 <_dtoa_r+0x900>
 8006c34:	4656      	mov	r6, sl
 8006c36:	4621      	mov	r1, r4
 8006c38:	4648      	mov	r0, r9
 8006c3a:	f7ff f9c7 	bl	8005fcc <quorem>
 8006c3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c42:	f806 8b01 	strb.w	r8, [r6], #1
 8006c46:	9b00      	ldr	r3, [sp, #0]
 8006c48:	eba6 020a 	sub.w	r2, r6, sl
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	ddb3      	ble.n	8006bb8 <_dtoa_r+0xad8>
 8006c50:	4649      	mov	r1, r9
 8006c52:	2300      	movs	r3, #0
 8006c54:	220a      	movs	r2, #10
 8006c56:	4658      	mov	r0, fp
 8006c58:	f000 f8b2 	bl	8006dc0 <__multadd>
 8006c5c:	4681      	mov	r9, r0
 8006c5e:	e7ea      	b.n	8006c36 <_dtoa_r+0xb56>
 8006c60:	08009c1d 	.word	0x08009c1d
 8006c64:	08009ba1 	.word	0x08009ba1

08006c68 <_free_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	d041      	beq.n	8006cf4 <_free_r+0x8c>
 8006c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c74:	1f0c      	subs	r4, r1, #4
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	bfb8      	it	lt
 8006c7a:	18e4      	addlt	r4, r4, r3
 8006c7c:	f7fe f924 	bl	8004ec8 <__malloc_lock>
 8006c80:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf8 <_free_r+0x90>)
 8006c82:	6813      	ldr	r3, [r2, #0]
 8006c84:	b933      	cbnz	r3, 8006c94 <_free_r+0x2c>
 8006c86:	6063      	str	r3, [r4, #4]
 8006c88:	6014      	str	r4, [r2, #0]
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c90:	f7fe b920 	b.w	8004ed4 <__malloc_unlock>
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	d908      	bls.n	8006caa <_free_r+0x42>
 8006c98:	6820      	ldr	r0, [r4, #0]
 8006c9a:	1821      	adds	r1, r4, r0
 8006c9c:	428b      	cmp	r3, r1
 8006c9e:	bf01      	itttt	eq
 8006ca0:	6819      	ldreq	r1, [r3, #0]
 8006ca2:	685b      	ldreq	r3, [r3, #4]
 8006ca4:	1809      	addeq	r1, r1, r0
 8006ca6:	6021      	streq	r1, [r4, #0]
 8006ca8:	e7ed      	b.n	8006c86 <_free_r+0x1e>
 8006caa:	461a      	mov	r2, r3
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	b10b      	cbz	r3, 8006cb4 <_free_r+0x4c>
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	d9fa      	bls.n	8006caa <_free_r+0x42>
 8006cb4:	6811      	ldr	r1, [r2, #0]
 8006cb6:	1850      	adds	r0, r2, r1
 8006cb8:	42a0      	cmp	r0, r4
 8006cba:	d10b      	bne.n	8006cd4 <_free_r+0x6c>
 8006cbc:	6820      	ldr	r0, [r4, #0]
 8006cbe:	4401      	add	r1, r0
 8006cc0:	1850      	adds	r0, r2, r1
 8006cc2:	4283      	cmp	r3, r0
 8006cc4:	6011      	str	r1, [r2, #0]
 8006cc6:	d1e0      	bne.n	8006c8a <_free_r+0x22>
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	6053      	str	r3, [r2, #4]
 8006cce:	4408      	add	r0, r1
 8006cd0:	6010      	str	r0, [r2, #0]
 8006cd2:	e7da      	b.n	8006c8a <_free_r+0x22>
 8006cd4:	d902      	bls.n	8006cdc <_free_r+0x74>
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	602b      	str	r3, [r5, #0]
 8006cda:	e7d6      	b.n	8006c8a <_free_r+0x22>
 8006cdc:	6820      	ldr	r0, [r4, #0]
 8006cde:	1821      	adds	r1, r4, r0
 8006ce0:	428b      	cmp	r3, r1
 8006ce2:	bf04      	itt	eq
 8006ce4:	6819      	ldreq	r1, [r3, #0]
 8006ce6:	685b      	ldreq	r3, [r3, #4]
 8006ce8:	6063      	str	r3, [r4, #4]
 8006cea:	bf04      	itt	eq
 8006cec:	1809      	addeq	r1, r1, r0
 8006cee:	6021      	streq	r1, [r4, #0]
 8006cf0:	6054      	str	r4, [r2, #4]
 8006cf2:	e7ca      	b.n	8006c8a <_free_r+0x22>
 8006cf4:	bd38      	pop	{r3, r4, r5, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000aa0 	.word	0x20000aa0

08006cfc <_Balloc>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	69c6      	ldr	r6, [r0, #28]
 8006d00:	4604      	mov	r4, r0
 8006d02:	460d      	mov	r5, r1
 8006d04:	b976      	cbnz	r6, 8006d24 <_Balloc+0x28>
 8006d06:	2010      	movs	r0, #16
 8006d08:	f7fe f834 	bl	8004d74 <malloc>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	61e0      	str	r0, [r4, #28]
 8006d10:	b920      	cbnz	r0, 8006d1c <_Balloc+0x20>
 8006d12:	4b18      	ldr	r3, [pc, #96]	@ (8006d74 <_Balloc+0x78>)
 8006d14:	4818      	ldr	r0, [pc, #96]	@ (8006d78 <_Balloc+0x7c>)
 8006d16:	216b      	movs	r1, #107	@ 0x6b
 8006d18:	f001 ff3e 	bl	8008b98 <__assert_func>
 8006d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d20:	6006      	str	r6, [r0, #0]
 8006d22:	60c6      	str	r6, [r0, #12]
 8006d24:	69e6      	ldr	r6, [r4, #28]
 8006d26:	68f3      	ldr	r3, [r6, #12]
 8006d28:	b183      	cbz	r3, 8006d4c <_Balloc+0x50>
 8006d2a:	69e3      	ldr	r3, [r4, #28]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d32:	b9b8      	cbnz	r0, 8006d64 <_Balloc+0x68>
 8006d34:	2101      	movs	r1, #1
 8006d36:	fa01 f605 	lsl.w	r6, r1, r5
 8006d3a:	1d72      	adds	r2, r6, #5
 8006d3c:	0092      	lsls	r2, r2, #2
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f001 ff48 	bl	8008bd4 <_calloc_r>
 8006d44:	b160      	cbz	r0, 8006d60 <_Balloc+0x64>
 8006d46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d4a:	e00e      	b.n	8006d6a <_Balloc+0x6e>
 8006d4c:	2221      	movs	r2, #33	@ 0x21
 8006d4e:	2104      	movs	r1, #4
 8006d50:	4620      	mov	r0, r4
 8006d52:	f001 ff3f 	bl	8008bd4 <_calloc_r>
 8006d56:	69e3      	ldr	r3, [r4, #28]
 8006d58:	60f0      	str	r0, [r6, #12]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e4      	bne.n	8006d2a <_Balloc+0x2e>
 8006d60:	2000      	movs	r0, #0
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	6802      	ldr	r2, [r0, #0]
 8006d66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d70:	e7f7      	b.n	8006d62 <_Balloc+0x66>
 8006d72:	bf00      	nop
 8006d74:	08009bae 	.word	0x08009bae
 8006d78:	08009c2e 	.word	0x08009c2e

08006d7c <_Bfree>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	69c6      	ldr	r6, [r0, #28]
 8006d80:	4605      	mov	r5, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	b976      	cbnz	r6, 8006da4 <_Bfree+0x28>
 8006d86:	2010      	movs	r0, #16
 8006d88:	f7fd fff4 	bl	8004d74 <malloc>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	61e8      	str	r0, [r5, #28]
 8006d90:	b920      	cbnz	r0, 8006d9c <_Bfree+0x20>
 8006d92:	4b09      	ldr	r3, [pc, #36]	@ (8006db8 <_Bfree+0x3c>)
 8006d94:	4809      	ldr	r0, [pc, #36]	@ (8006dbc <_Bfree+0x40>)
 8006d96:	218f      	movs	r1, #143	@ 0x8f
 8006d98:	f001 fefe 	bl	8008b98 <__assert_func>
 8006d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006da0:	6006      	str	r6, [r0, #0]
 8006da2:	60c6      	str	r6, [r0, #12]
 8006da4:	b13c      	cbz	r4, 8006db6 <_Bfree+0x3a>
 8006da6:	69eb      	ldr	r3, [r5, #28]
 8006da8:	6862      	ldr	r2, [r4, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006db0:	6021      	str	r1, [r4, #0]
 8006db2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	08009bae 	.word	0x08009bae
 8006dbc:	08009c2e 	.word	0x08009c2e

08006dc0 <__multadd>:
 8006dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc4:	690d      	ldr	r5, [r1, #16]
 8006dc6:	4607      	mov	r7, r0
 8006dc8:	460c      	mov	r4, r1
 8006dca:	461e      	mov	r6, r3
 8006dcc:	f101 0c14 	add.w	ip, r1, #20
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	f8dc 3000 	ldr.w	r3, [ip]
 8006dd6:	b299      	uxth	r1, r3
 8006dd8:	fb02 6101 	mla	r1, r2, r1, r6
 8006ddc:	0c1e      	lsrs	r6, r3, #16
 8006dde:	0c0b      	lsrs	r3, r1, #16
 8006de0:	fb02 3306 	mla	r3, r2, r6, r3
 8006de4:	b289      	uxth	r1, r1
 8006de6:	3001      	adds	r0, #1
 8006de8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006dec:	4285      	cmp	r5, r0
 8006dee:	f84c 1b04 	str.w	r1, [ip], #4
 8006df2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006df6:	dcec      	bgt.n	8006dd2 <__multadd+0x12>
 8006df8:	b30e      	cbz	r6, 8006e3e <__multadd+0x7e>
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	42ab      	cmp	r3, r5
 8006dfe:	dc19      	bgt.n	8006e34 <__multadd+0x74>
 8006e00:	6861      	ldr	r1, [r4, #4]
 8006e02:	4638      	mov	r0, r7
 8006e04:	3101      	adds	r1, #1
 8006e06:	f7ff ff79 	bl	8006cfc <_Balloc>
 8006e0a:	4680      	mov	r8, r0
 8006e0c:	b928      	cbnz	r0, 8006e1a <__multadd+0x5a>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	4b0c      	ldr	r3, [pc, #48]	@ (8006e44 <__multadd+0x84>)
 8006e12:	480d      	ldr	r0, [pc, #52]	@ (8006e48 <__multadd+0x88>)
 8006e14:	21ba      	movs	r1, #186	@ 0xba
 8006e16:	f001 febf 	bl	8008b98 <__assert_func>
 8006e1a:	6922      	ldr	r2, [r4, #16]
 8006e1c:	3202      	adds	r2, #2
 8006e1e:	f104 010c 	add.w	r1, r4, #12
 8006e22:	0092      	lsls	r2, r2, #2
 8006e24:	300c      	adds	r0, #12
 8006e26:	f7ff f8bc 	bl	8005fa2 <memcpy>
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	f7ff ffa5 	bl	8006d7c <_Bfree>
 8006e32:	4644      	mov	r4, r8
 8006e34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e38:	3501      	adds	r5, #1
 8006e3a:	615e      	str	r6, [r3, #20]
 8006e3c:	6125      	str	r5, [r4, #16]
 8006e3e:	4620      	mov	r0, r4
 8006e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e44:	08009c1d 	.word	0x08009c1d
 8006e48:	08009c2e 	.word	0x08009c2e

08006e4c <__s2b>:
 8006e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e50:	460c      	mov	r4, r1
 8006e52:	4615      	mov	r5, r2
 8006e54:	461f      	mov	r7, r3
 8006e56:	2209      	movs	r2, #9
 8006e58:	3308      	adds	r3, #8
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e60:	2100      	movs	r1, #0
 8006e62:	2201      	movs	r2, #1
 8006e64:	429a      	cmp	r2, r3
 8006e66:	db09      	blt.n	8006e7c <__s2b+0x30>
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff ff47 	bl	8006cfc <_Balloc>
 8006e6e:	b940      	cbnz	r0, 8006e82 <__s2b+0x36>
 8006e70:	4602      	mov	r2, r0
 8006e72:	4b19      	ldr	r3, [pc, #100]	@ (8006ed8 <__s2b+0x8c>)
 8006e74:	4819      	ldr	r0, [pc, #100]	@ (8006edc <__s2b+0x90>)
 8006e76:	21d3      	movs	r1, #211	@ 0xd3
 8006e78:	f001 fe8e 	bl	8008b98 <__assert_func>
 8006e7c:	0052      	lsls	r2, r2, #1
 8006e7e:	3101      	adds	r1, #1
 8006e80:	e7f0      	b.n	8006e64 <__s2b+0x18>
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	6143      	str	r3, [r0, #20]
 8006e86:	2d09      	cmp	r5, #9
 8006e88:	f04f 0301 	mov.w	r3, #1
 8006e8c:	6103      	str	r3, [r0, #16]
 8006e8e:	dd16      	ble.n	8006ebe <__s2b+0x72>
 8006e90:	f104 0909 	add.w	r9, r4, #9
 8006e94:	46c8      	mov	r8, r9
 8006e96:	442c      	add	r4, r5
 8006e98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e9c:	4601      	mov	r1, r0
 8006e9e:	3b30      	subs	r3, #48	@ 0x30
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7ff ff8c 	bl	8006dc0 <__multadd>
 8006ea8:	45a0      	cmp	r8, r4
 8006eaa:	d1f5      	bne.n	8006e98 <__s2b+0x4c>
 8006eac:	f1a5 0408 	sub.w	r4, r5, #8
 8006eb0:	444c      	add	r4, r9
 8006eb2:	1b2d      	subs	r5, r5, r4
 8006eb4:	1963      	adds	r3, r4, r5
 8006eb6:	42bb      	cmp	r3, r7
 8006eb8:	db04      	blt.n	8006ec4 <__s2b+0x78>
 8006eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ebe:	340a      	adds	r4, #10
 8006ec0:	2509      	movs	r5, #9
 8006ec2:	e7f6      	b.n	8006eb2 <__s2b+0x66>
 8006ec4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ec8:	4601      	mov	r1, r0
 8006eca:	3b30      	subs	r3, #48	@ 0x30
 8006ecc:	220a      	movs	r2, #10
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7ff ff76 	bl	8006dc0 <__multadd>
 8006ed4:	e7ee      	b.n	8006eb4 <__s2b+0x68>
 8006ed6:	bf00      	nop
 8006ed8:	08009c1d 	.word	0x08009c1d
 8006edc:	08009c2e 	.word	0x08009c2e

08006ee0 <__hi0bits>:
 8006ee0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	bf36      	itet	cc
 8006ee8:	0403      	lslcc	r3, r0, #16
 8006eea:	2000      	movcs	r0, #0
 8006eec:	2010      	movcc	r0, #16
 8006eee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ef2:	bf3c      	itt	cc
 8006ef4:	021b      	lslcc	r3, r3, #8
 8006ef6:	3008      	addcc	r0, #8
 8006ef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006efc:	bf3c      	itt	cc
 8006efe:	011b      	lslcc	r3, r3, #4
 8006f00:	3004      	addcc	r0, #4
 8006f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f06:	bf3c      	itt	cc
 8006f08:	009b      	lslcc	r3, r3, #2
 8006f0a:	3002      	addcc	r0, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	db05      	blt.n	8006f1c <__hi0bits+0x3c>
 8006f10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f14:	f100 0001 	add.w	r0, r0, #1
 8006f18:	bf08      	it	eq
 8006f1a:	2020      	moveq	r0, #32
 8006f1c:	4770      	bx	lr

08006f1e <__lo0bits>:
 8006f1e:	6803      	ldr	r3, [r0, #0]
 8006f20:	4602      	mov	r2, r0
 8006f22:	f013 0007 	ands.w	r0, r3, #7
 8006f26:	d00b      	beq.n	8006f40 <__lo0bits+0x22>
 8006f28:	07d9      	lsls	r1, r3, #31
 8006f2a:	d421      	bmi.n	8006f70 <__lo0bits+0x52>
 8006f2c:	0798      	lsls	r0, r3, #30
 8006f2e:	bf49      	itett	mi
 8006f30:	085b      	lsrmi	r3, r3, #1
 8006f32:	089b      	lsrpl	r3, r3, #2
 8006f34:	2001      	movmi	r0, #1
 8006f36:	6013      	strmi	r3, [r2, #0]
 8006f38:	bf5c      	itt	pl
 8006f3a:	6013      	strpl	r3, [r2, #0]
 8006f3c:	2002      	movpl	r0, #2
 8006f3e:	4770      	bx	lr
 8006f40:	b299      	uxth	r1, r3
 8006f42:	b909      	cbnz	r1, 8006f48 <__lo0bits+0x2a>
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	2010      	movs	r0, #16
 8006f48:	b2d9      	uxtb	r1, r3
 8006f4a:	b909      	cbnz	r1, 8006f50 <__lo0bits+0x32>
 8006f4c:	3008      	adds	r0, #8
 8006f4e:	0a1b      	lsrs	r3, r3, #8
 8006f50:	0719      	lsls	r1, r3, #28
 8006f52:	bf04      	itt	eq
 8006f54:	091b      	lsreq	r3, r3, #4
 8006f56:	3004      	addeq	r0, #4
 8006f58:	0799      	lsls	r1, r3, #30
 8006f5a:	bf04      	itt	eq
 8006f5c:	089b      	lsreq	r3, r3, #2
 8006f5e:	3002      	addeq	r0, #2
 8006f60:	07d9      	lsls	r1, r3, #31
 8006f62:	d403      	bmi.n	8006f6c <__lo0bits+0x4e>
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	f100 0001 	add.w	r0, r0, #1
 8006f6a:	d003      	beq.n	8006f74 <__lo0bits+0x56>
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	4770      	bx	lr
 8006f70:	2000      	movs	r0, #0
 8006f72:	4770      	bx	lr
 8006f74:	2020      	movs	r0, #32
 8006f76:	4770      	bx	lr

08006f78 <__i2b>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	f7ff febd 	bl	8006cfc <_Balloc>
 8006f82:	4602      	mov	r2, r0
 8006f84:	b928      	cbnz	r0, 8006f92 <__i2b+0x1a>
 8006f86:	4b05      	ldr	r3, [pc, #20]	@ (8006f9c <__i2b+0x24>)
 8006f88:	4805      	ldr	r0, [pc, #20]	@ (8006fa0 <__i2b+0x28>)
 8006f8a:	f240 1145 	movw	r1, #325	@ 0x145
 8006f8e:	f001 fe03 	bl	8008b98 <__assert_func>
 8006f92:	2301      	movs	r3, #1
 8006f94:	6144      	str	r4, [r0, #20]
 8006f96:	6103      	str	r3, [r0, #16]
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	bf00      	nop
 8006f9c:	08009c1d 	.word	0x08009c1d
 8006fa0:	08009c2e 	.word	0x08009c2e

08006fa4 <__multiply>:
 8006fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa8:	4614      	mov	r4, r2
 8006faa:	690a      	ldr	r2, [r1, #16]
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	bfa8      	it	ge
 8006fb2:	4623      	movge	r3, r4
 8006fb4:	460f      	mov	r7, r1
 8006fb6:	bfa4      	itt	ge
 8006fb8:	460c      	movge	r4, r1
 8006fba:	461f      	movge	r7, r3
 8006fbc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006fc0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006fc4:	68a3      	ldr	r3, [r4, #8]
 8006fc6:	6861      	ldr	r1, [r4, #4]
 8006fc8:	eb0a 0609 	add.w	r6, sl, r9
 8006fcc:	42b3      	cmp	r3, r6
 8006fce:	b085      	sub	sp, #20
 8006fd0:	bfb8      	it	lt
 8006fd2:	3101      	addlt	r1, #1
 8006fd4:	f7ff fe92 	bl	8006cfc <_Balloc>
 8006fd8:	b930      	cbnz	r0, 8006fe8 <__multiply+0x44>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	4b44      	ldr	r3, [pc, #272]	@ (80070f0 <__multiply+0x14c>)
 8006fde:	4845      	ldr	r0, [pc, #276]	@ (80070f4 <__multiply+0x150>)
 8006fe0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006fe4:	f001 fdd8 	bl	8008b98 <__assert_func>
 8006fe8:	f100 0514 	add.w	r5, r0, #20
 8006fec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ff0:	462b      	mov	r3, r5
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4543      	cmp	r3, r8
 8006ff6:	d321      	bcc.n	800703c <__multiply+0x98>
 8006ff8:	f107 0114 	add.w	r1, r7, #20
 8006ffc:	f104 0214 	add.w	r2, r4, #20
 8007000:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007004:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007008:	9302      	str	r3, [sp, #8]
 800700a:	1b13      	subs	r3, r2, r4
 800700c:	3b15      	subs	r3, #21
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	3304      	adds	r3, #4
 8007014:	f104 0715 	add.w	r7, r4, #21
 8007018:	42ba      	cmp	r2, r7
 800701a:	bf38      	it	cc
 800701c:	2304      	movcc	r3, #4
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	9b02      	ldr	r3, [sp, #8]
 8007022:	9103      	str	r1, [sp, #12]
 8007024:	428b      	cmp	r3, r1
 8007026:	d80c      	bhi.n	8007042 <__multiply+0x9e>
 8007028:	2e00      	cmp	r6, #0
 800702a:	dd03      	ble.n	8007034 <__multiply+0x90>
 800702c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007030:	2b00      	cmp	r3, #0
 8007032:	d05b      	beq.n	80070ec <__multiply+0x148>
 8007034:	6106      	str	r6, [r0, #16]
 8007036:	b005      	add	sp, #20
 8007038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703c:	f843 2b04 	str.w	r2, [r3], #4
 8007040:	e7d8      	b.n	8006ff4 <__multiply+0x50>
 8007042:	f8b1 a000 	ldrh.w	sl, [r1]
 8007046:	f1ba 0f00 	cmp.w	sl, #0
 800704a:	d024      	beq.n	8007096 <__multiply+0xf2>
 800704c:	f104 0e14 	add.w	lr, r4, #20
 8007050:	46a9      	mov	r9, r5
 8007052:	f04f 0c00 	mov.w	ip, #0
 8007056:	f85e 7b04 	ldr.w	r7, [lr], #4
 800705a:	f8d9 3000 	ldr.w	r3, [r9]
 800705e:	fa1f fb87 	uxth.w	fp, r7
 8007062:	b29b      	uxth	r3, r3
 8007064:	fb0a 330b 	mla	r3, sl, fp, r3
 8007068:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800706c:	f8d9 7000 	ldr.w	r7, [r9]
 8007070:	4463      	add	r3, ip
 8007072:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007076:	fb0a c70b 	mla	r7, sl, fp, ip
 800707a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800707e:	b29b      	uxth	r3, r3
 8007080:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007084:	4572      	cmp	r2, lr
 8007086:	f849 3b04 	str.w	r3, [r9], #4
 800708a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800708e:	d8e2      	bhi.n	8007056 <__multiply+0xb2>
 8007090:	9b01      	ldr	r3, [sp, #4]
 8007092:	f845 c003 	str.w	ip, [r5, r3]
 8007096:	9b03      	ldr	r3, [sp, #12]
 8007098:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800709c:	3104      	adds	r1, #4
 800709e:	f1b9 0f00 	cmp.w	r9, #0
 80070a2:	d021      	beq.n	80070e8 <__multiply+0x144>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	f104 0c14 	add.w	ip, r4, #20
 80070aa:	46ae      	mov	lr, r5
 80070ac:	f04f 0a00 	mov.w	sl, #0
 80070b0:	f8bc b000 	ldrh.w	fp, [ip]
 80070b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80070b8:	fb09 770b 	mla	r7, r9, fp, r7
 80070bc:	4457      	add	r7, sl
 80070be:	b29b      	uxth	r3, r3
 80070c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070c4:	f84e 3b04 	str.w	r3, [lr], #4
 80070c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070d0:	f8be 3000 	ldrh.w	r3, [lr]
 80070d4:	fb09 330a 	mla	r3, r9, sl, r3
 80070d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80070dc:	4562      	cmp	r2, ip
 80070de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070e2:	d8e5      	bhi.n	80070b0 <__multiply+0x10c>
 80070e4:	9f01      	ldr	r7, [sp, #4]
 80070e6:	51eb      	str	r3, [r5, r7]
 80070e8:	3504      	adds	r5, #4
 80070ea:	e799      	b.n	8007020 <__multiply+0x7c>
 80070ec:	3e01      	subs	r6, #1
 80070ee:	e79b      	b.n	8007028 <__multiply+0x84>
 80070f0:	08009c1d 	.word	0x08009c1d
 80070f4:	08009c2e 	.word	0x08009c2e

080070f8 <__pow5mult>:
 80070f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070fc:	4615      	mov	r5, r2
 80070fe:	f012 0203 	ands.w	r2, r2, #3
 8007102:	4607      	mov	r7, r0
 8007104:	460e      	mov	r6, r1
 8007106:	d007      	beq.n	8007118 <__pow5mult+0x20>
 8007108:	4c25      	ldr	r4, [pc, #148]	@ (80071a0 <__pow5mult+0xa8>)
 800710a:	3a01      	subs	r2, #1
 800710c:	2300      	movs	r3, #0
 800710e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007112:	f7ff fe55 	bl	8006dc0 <__multadd>
 8007116:	4606      	mov	r6, r0
 8007118:	10ad      	asrs	r5, r5, #2
 800711a:	d03d      	beq.n	8007198 <__pow5mult+0xa0>
 800711c:	69fc      	ldr	r4, [r7, #28]
 800711e:	b97c      	cbnz	r4, 8007140 <__pow5mult+0x48>
 8007120:	2010      	movs	r0, #16
 8007122:	f7fd fe27 	bl	8004d74 <malloc>
 8007126:	4602      	mov	r2, r0
 8007128:	61f8      	str	r0, [r7, #28]
 800712a:	b928      	cbnz	r0, 8007138 <__pow5mult+0x40>
 800712c:	4b1d      	ldr	r3, [pc, #116]	@ (80071a4 <__pow5mult+0xac>)
 800712e:	481e      	ldr	r0, [pc, #120]	@ (80071a8 <__pow5mult+0xb0>)
 8007130:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007134:	f001 fd30 	bl	8008b98 <__assert_func>
 8007138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800713c:	6004      	str	r4, [r0, #0]
 800713e:	60c4      	str	r4, [r0, #12]
 8007140:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007148:	b94c      	cbnz	r4, 800715e <__pow5mult+0x66>
 800714a:	f240 2171 	movw	r1, #625	@ 0x271
 800714e:	4638      	mov	r0, r7
 8007150:	f7ff ff12 	bl	8006f78 <__i2b>
 8007154:	2300      	movs	r3, #0
 8007156:	f8c8 0008 	str.w	r0, [r8, #8]
 800715a:	4604      	mov	r4, r0
 800715c:	6003      	str	r3, [r0, #0]
 800715e:	f04f 0900 	mov.w	r9, #0
 8007162:	07eb      	lsls	r3, r5, #31
 8007164:	d50a      	bpl.n	800717c <__pow5mult+0x84>
 8007166:	4631      	mov	r1, r6
 8007168:	4622      	mov	r2, r4
 800716a:	4638      	mov	r0, r7
 800716c:	f7ff ff1a 	bl	8006fa4 <__multiply>
 8007170:	4631      	mov	r1, r6
 8007172:	4680      	mov	r8, r0
 8007174:	4638      	mov	r0, r7
 8007176:	f7ff fe01 	bl	8006d7c <_Bfree>
 800717a:	4646      	mov	r6, r8
 800717c:	106d      	asrs	r5, r5, #1
 800717e:	d00b      	beq.n	8007198 <__pow5mult+0xa0>
 8007180:	6820      	ldr	r0, [r4, #0]
 8007182:	b938      	cbnz	r0, 8007194 <__pow5mult+0x9c>
 8007184:	4622      	mov	r2, r4
 8007186:	4621      	mov	r1, r4
 8007188:	4638      	mov	r0, r7
 800718a:	f7ff ff0b 	bl	8006fa4 <__multiply>
 800718e:	6020      	str	r0, [r4, #0]
 8007190:	f8c0 9000 	str.w	r9, [r0]
 8007194:	4604      	mov	r4, r0
 8007196:	e7e4      	b.n	8007162 <__pow5mult+0x6a>
 8007198:	4630      	mov	r0, r6
 800719a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800719e:	bf00      	nop
 80071a0:	08009c88 	.word	0x08009c88
 80071a4:	08009bae 	.word	0x08009bae
 80071a8:	08009c2e 	.word	0x08009c2e

080071ac <__lshift>:
 80071ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b0:	460c      	mov	r4, r1
 80071b2:	6849      	ldr	r1, [r1, #4]
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	4607      	mov	r7, r0
 80071be:	4691      	mov	r9, r2
 80071c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071c4:	f108 0601 	add.w	r6, r8, #1
 80071c8:	42b3      	cmp	r3, r6
 80071ca:	db0b      	blt.n	80071e4 <__lshift+0x38>
 80071cc:	4638      	mov	r0, r7
 80071ce:	f7ff fd95 	bl	8006cfc <_Balloc>
 80071d2:	4605      	mov	r5, r0
 80071d4:	b948      	cbnz	r0, 80071ea <__lshift+0x3e>
 80071d6:	4602      	mov	r2, r0
 80071d8:	4b28      	ldr	r3, [pc, #160]	@ (800727c <__lshift+0xd0>)
 80071da:	4829      	ldr	r0, [pc, #164]	@ (8007280 <__lshift+0xd4>)
 80071dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80071e0:	f001 fcda 	bl	8008b98 <__assert_func>
 80071e4:	3101      	adds	r1, #1
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	e7ee      	b.n	80071c8 <__lshift+0x1c>
 80071ea:	2300      	movs	r3, #0
 80071ec:	f100 0114 	add.w	r1, r0, #20
 80071f0:	f100 0210 	add.w	r2, r0, #16
 80071f4:	4618      	mov	r0, r3
 80071f6:	4553      	cmp	r3, sl
 80071f8:	db33      	blt.n	8007262 <__lshift+0xb6>
 80071fa:	6920      	ldr	r0, [r4, #16]
 80071fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007200:	f104 0314 	add.w	r3, r4, #20
 8007204:	f019 091f 	ands.w	r9, r9, #31
 8007208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800720c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007210:	d02b      	beq.n	800726a <__lshift+0xbe>
 8007212:	f1c9 0e20 	rsb	lr, r9, #32
 8007216:	468a      	mov	sl, r1
 8007218:	2200      	movs	r2, #0
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	fa00 f009 	lsl.w	r0, r0, r9
 8007220:	4310      	orrs	r0, r2
 8007222:	f84a 0b04 	str.w	r0, [sl], #4
 8007226:	f853 2b04 	ldr.w	r2, [r3], #4
 800722a:	459c      	cmp	ip, r3
 800722c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007230:	d8f3      	bhi.n	800721a <__lshift+0x6e>
 8007232:	ebac 0304 	sub.w	r3, ip, r4
 8007236:	3b15      	subs	r3, #21
 8007238:	f023 0303 	bic.w	r3, r3, #3
 800723c:	3304      	adds	r3, #4
 800723e:	f104 0015 	add.w	r0, r4, #21
 8007242:	4584      	cmp	ip, r0
 8007244:	bf38      	it	cc
 8007246:	2304      	movcc	r3, #4
 8007248:	50ca      	str	r2, [r1, r3]
 800724a:	b10a      	cbz	r2, 8007250 <__lshift+0xa4>
 800724c:	f108 0602 	add.w	r6, r8, #2
 8007250:	3e01      	subs	r6, #1
 8007252:	4638      	mov	r0, r7
 8007254:	612e      	str	r6, [r5, #16]
 8007256:	4621      	mov	r1, r4
 8007258:	f7ff fd90 	bl	8006d7c <_Bfree>
 800725c:	4628      	mov	r0, r5
 800725e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007262:	f842 0f04 	str.w	r0, [r2, #4]!
 8007266:	3301      	adds	r3, #1
 8007268:	e7c5      	b.n	80071f6 <__lshift+0x4a>
 800726a:	3904      	subs	r1, #4
 800726c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007270:	f841 2f04 	str.w	r2, [r1, #4]!
 8007274:	459c      	cmp	ip, r3
 8007276:	d8f9      	bhi.n	800726c <__lshift+0xc0>
 8007278:	e7ea      	b.n	8007250 <__lshift+0xa4>
 800727a:	bf00      	nop
 800727c:	08009c1d 	.word	0x08009c1d
 8007280:	08009c2e 	.word	0x08009c2e

08007284 <__mcmp>:
 8007284:	690a      	ldr	r2, [r1, #16]
 8007286:	4603      	mov	r3, r0
 8007288:	6900      	ldr	r0, [r0, #16]
 800728a:	1a80      	subs	r0, r0, r2
 800728c:	b530      	push	{r4, r5, lr}
 800728e:	d10e      	bne.n	80072ae <__mcmp+0x2a>
 8007290:	3314      	adds	r3, #20
 8007292:	3114      	adds	r1, #20
 8007294:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007298:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800729c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072a4:	4295      	cmp	r5, r2
 80072a6:	d003      	beq.n	80072b0 <__mcmp+0x2c>
 80072a8:	d205      	bcs.n	80072b6 <__mcmp+0x32>
 80072aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072ae:	bd30      	pop	{r4, r5, pc}
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	d3f3      	bcc.n	800729c <__mcmp+0x18>
 80072b4:	e7fb      	b.n	80072ae <__mcmp+0x2a>
 80072b6:	2001      	movs	r0, #1
 80072b8:	e7f9      	b.n	80072ae <__mcmp+0x2a>
	...

080072bc <__mdiff>:
 80072bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	4689      	mov	r9, r1
 80072c2:	4606      	mov	r6, r0
 80072c4:	4611      	mov	r1, r2
 80072c6:	4648      	mov	r0, r9
 80072c8:	4614      	mov	r4, r2
 80072ca:	f7ff ffdb 	bl	8007284 <__mcmp>
 80072ce:	1e05      	subs	r5, r0, #0
 80072d0:	d112      	bne.n	80072f8 <__mdiff+0x3c>
 80072d2:	4629      	mov	r1, r5
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7ff fd11 	bl	8006cfc <_Balloc>
 80072da:	4602      	mov	r2, r0
 80072dc:	b928      	cbnz	r0, 80072ea <__mdiff+0x2e>
 80072de:	4b3f      	ldr	r3, [pc, #252]	@ (80073dc <__mdiff+0x120>)
 80072e0:	f240 2137 	movw	r1, #567	@ 0x237
 80072e4:	483e      	ldr	r0, [pc, #248]	@ (80073e0 <__mdiff+0x124>)
 80072e6:	f001 fc57 	bl	8008b98 <__assert_func>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072f0:	4610      	mov	r0, r2
 80072f2:	b003      	add	sp, #12
 80072f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f8:	bfbc      	itt	lt
 80072fa:	464b      	movlt	r3, r9
 80072fc:	46a1      	movlt	r9, r4
 80072fe:	4630      	mov	r0, r6
 8007300:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007304:	bfba      	itte	lt
 8007306:	461c      	movlt	r4, r3
 8007308:	2501      	movlt	r5, #1
 800730a:	2500      	movge	r5, #0
 800730c:	f7ff fcf6 	bl	8006cfc <_Balloc>
 8007310:	4602      	mov	r2, r0
 8007312:	b918      	cbnz	r0, 800731c <__mdiff+0x60>
 8007314:	4b31      	ldr	r3, [pc, #196]	@ (80073dc <__mdiff+0x120>)
 8007316:	f240 2145 	movw	r1, #581	@ 0x245
 800731a:	e7e3      	b.n	80072e4 <__mdiff+0x28>
 800731c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007320:	6926      	ldr	r6, [r4, #16]
 8007322:	60c5      	str	r5, [r0, #12]
 8007324:	f109 0310 	add.w	r3, r9, #16
 8007328:	f109 0514 	add.w	r5, r9, #20
 800732c:	f104 0e14 	add.w	lr, r4, #20
 8007330:	f100 0b14 	add.w	fp, r0, #20
 8007334:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007338:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	46d9      	mov	r9, fp
 8007340:	f04f 0c00 	mov.w	ip, #0
 8007344:	9b01      	ldr	r3, [sp, #4]
 8007346:	f85e 0b04 	ldr.w	r0, [lr], #4
 800734a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	fa1f f38a 	uxth.w	r3, sl
 8007354:	4619      	mov	r1, r3
 8007356:	b283      	uxth	r3, r0
 8007358:	1acb      	subs	r3, r1, r3
 800735a:	0c00      	lsrs	r0, r0, #16
 800735c:	4463      	add	r3, ip
 800735e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007362:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007366:	b29b      	uxth	r3, r3
 8007368:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800736c:	4576      	cmp	r6, lr
 800736e:	f849 3b04 	str.w	r3, [r9], #4
 8007372:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007376:	d8e5      	bhi.n	8007344 <__mdiff+0x88>
 8007378:	1b33      	subs	r3, r6, r4
 800737a:	3b15      	subs	r3, #21
 800737c:	f023 0303 	bic.w	r3, r3, #3
 8007380:	3415      	adds	r4, #21
 8007382:	3304      	adds	r3, #4
 8007384:	42a6      	cmp	r6, r4
 8007386:	bf38      	it	cc
 8007388:	2304      	movcc	r3, #4
 800738a:	441d      	add	r5, r3
 800738c:	445b      	add	r3, fp
 800738e:	461e      	mov	r6, r3
 8007390:	462c      	mov	r4, r5
 8007392:	4544      	cmp	r4, r8
 8007394:	d30e      	bcc.n	80073b4 <__mdiff+0xf8>
 8007396:	f108 0103 	add.w	r1, r8, #3
 800739a:	1b49      	subs	r1, r1, r5
 800739c:	f021 0103 	bic.w	r1, r1, #3
 80073a0:	3d03      	subs	r5, #3
 80073a2:	45a8      	cmp	r8, r5
 80073a4:	bf38      	it	cc
 80073a6:	2100      	movcc	r1, #0
 80073a8:	440b      	add	r3, r1
 80073aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073ae:	b191      	cbz	r1, 80073d6 <__mdiff+0x11a>
 80073b0:	6117      	str	r7, [r2, #16]
 80073b2:	e79d      	b.n	80072f0 <__mdiff+0x34>
 80073b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80073b8:	46e6      	mov	lr, ip
 80073ba:	0c08      	lsrs	r0, r1, #16
 80073bc:	fa1c fc81 	uxtah	ip, ip, r1
 80073c0:	4471      	add	r1, lr
 80073c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073c6:	b289      	uxth	r1, r1
 80073c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073cc:	f846 1b04 	str.w	r1, [r6], #4
 80073d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073d4:	e7dd      	b.n	8007392 <__mdiff+0xd6>
 80073d6:	3f01      	subs	r7, #1
 80073d8:	e7e7      	b.n	80073aa <__mdiff+0xee>
 80073da:	bf00      	nop
 80073dc:	08009c1d 	.word	0x08009c1d
 80073e0:	08009c2e 	.word	0x08009c2e

080073e4 <__ulp>:
 80073e4:	b082      	sub	sp, #8
 80073e6:	ed8d 0b00 	vstr	d0, [sp]
 80073ea:	9a01      	ldr	r2, [sp, #4]
 80073ec:	4b0f      	ldr	r3, [pc, #60]	@ (800742c <__ulp+0x48>)
 80073ee:	4013      	ands	r3, r2
 80073f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dc08      	bgt.n	800740a <__ulp+0x26>
 80073f8:	425b      	negs	r3, r3
 80073fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80073fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007402:	da04      	bge.n	800740e <__ulp+0x2a>
 8007404:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007408:	4113      	asrs	r3, r2
 800740a:	2200      	movs	r2, #0
 800740c:	e008      	b.n	8007420 <__ulp+0x3c>
 800740e:	f1a2 0314 	sub.w	r3, r2, #20
 8007412:	2b1e      	cmp	r3, #30
 8007414:	bfda      	itte	le
 8007416:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800741a:	40da      	lsrle	r2, r3
 800741c:	2201      	movgt	r2, #1
 800741e:	2300      	movs	r3, #0
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	ec41 0b10 	vmov	d0, r0, r1
 8007428:	b002      	add	sp, #8
 800742a:	4770      	bx	lr
 800742c:	7ff00000 	.word	0x7ff00000

08007430 <__b2d>:
 8007430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007434:	6906      	ldr	r6, [r0, #16]
 8007436:	f100 0814 	add.w	r8, r0, #20
 800743a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800743e:	1f37      	subs	r7, r6, #4
 8007440:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007444:	4610      	mov	r0, r2
 8007446:	f7ff fd4b 	bl	8006ee0 <__hi0bits>
 800744a:	f1c0 0320 	rsb	r3, r0, #32
 800744e:	280a      	cmp	r0, #10
 8007450:	600b      	str	r3, [r1, #0]
 8007452:	491b      	ldr	r1, [pc, #108]	@ (80074c0 <__b2d+0x90>)
 8007454:	dc15      	bgt.n	8007482 <__b2d+0x52>
 8007456:	f1c0 0c0b 	rsb	ip, r0, #11
 800745a:	fa22 f30c 	lsr.w	r3, r2, ip
 800745e:	45b8      	cmp	r8, r7
 8007460:	ea43 0501 	orr.w	r5, r3, r1
 8007464:	bf34      	ite	cc
 8007466:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800746a:	2300      	movcs	r3, #0
 800746c:	3015      	adds	r0, #21
 800746e:	fa02 f000 	lsl.w	r0, r2, r0
 8007472:	fa23 f30c 	lsr.w	r3, r3, ip
 8007476:	4303      	orrs	r3, r0
 8007478:	461c      	mov	r4, r3
 800747a:	ec45 4b10 	vmov	d0, r4, r5
 800747e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007482:	45b8      	cmp	r8, r7
 8007484:	bf3a      	itte	cc
 8007486:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800748a:	f1a6 0708 	subcc.w	r7, r6, #8
 800748e:	2300      	movcs	r3, #0
 8007490:	380b      	subs	r0, #11
 8007492:	d012      	beq.n	80074ba <__b2d+0x8a>
 8007494:	f1c0 0120 	rsb	r1, r0, #32
 8007498:	fa23 f401 	lsr.w	r4, r3, r1
 800749c:	4082      	lsls	r2, r0
 800749e:	4322      	orrs	r2, r4
 80074a0:	4547      	cmp	r7, r8
 80074a2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80074a6:	bf8c      	ite	hi
 80074a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80074ac:	2200      	movls	r2, #0
 80074ae:	4083      	lsls	r3, r0
 80074b0:	40ca      	lsrs	r2, r1
 80074b2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80074b6:	4313      	orrs	r3, r2
 80074b8:	e7de      	b.n	8007478 <__b2d+0x48>
 80074ba:	ea42 0501 	orr.w	r5, r2, r1
 80074be:	e7db      	b.n	8007478 <__b2d+0x48>
 80074c0:	3ff00000 	.word	0x3ff00000

080074c4 <__d2b>:
 80074c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074c8:	460f      	mov	r7, r1
 80074ca:	2101      	movs	r1, #1
 80074cc:	ec59 8b10 	vmov	r8, r9, d0
 80074d0:	4616      	mov	r6, r2
 80074d2:	f7ff fc13 	bl	8006cfc <_Balloc>
 80074d6:	4604      	mov	r4, r0
 80074d8:	b930      	cbnz	r0, 80074e8 <__d2b+0x24>
 80074da:	4602      	mov	r2, r0
 80074dc:	4b23      	ldr	r3, [pc, #140]	@ (800756c <__d2b+0xa8>)
 80074de:	4824      	ldr	r0, [pc, #144]	@ (8007570 <__d2b+0xac>)
 80074e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80074e4:	f001 fb58 	bl	8008b98 <__assert_func>
 80074e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80074ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074f0:	b10d      	cbz	r5, 80074f6 <__d2b+0x32>
 80074f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	f1b8 0300 	subs.w	r3, r8, #0
 80074fc:	d023      	beq.n	8007546 <__d2b+0x82>
 80074fe:	4668      	mov	r0, sp
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	f7ff fd0c 	bl	8006f1e <__lo0bits>
 8007506:	e9dd 1200 	ldrd	r1, r2, [sp]
 800750a:	b1d0      	cbz	r0, 8007542 <__d2b+0x7e>
 800750c:	f1c0 0320 	rsb	r3, r0, #32
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	430b      	orrs	r3, r1
 8007516:	40c2      	lsrs	r2, r0
 8007518:	6163      	str	r3, [r4, #20]
 800751a:	9201      	str	r2, [sp, #4]
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	61a3      	str	r3, [r4, #24]
 8007520:	2b00      	cmp	r3, #0
 8007522:	bf0c      	ite	eq
 8007524:	2201      	moveq	r2, #1
 8007526:	2202      	movne	r2, #2
 8007528:	6122      	str	r2, [r4, #16]
 800752a:	b1a5      	cbz	r5, 8007556 <__d2b+0x92>
 800752c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007530:	4405      	add	r5, r0
 8007532:	603d      	str	r5, [r7, #0]
 8007534:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007538:	6030      	str	r0, [r6, #0]
 800753a:	4620      	mov	r0, r4
 800753c:	b003      	add	sp, #12
 800753e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007542:	6161      	str	r1, [r4, #20]
 8007544:	e7ea      	b.n	800751c <__d2b+0x58>
 8007546:	a801      	add	r0, sp, #4
 8007548:	f7ff fce9 	bl	8006f1e <__lo0bits>
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	6163      	str	r3, [r4, #20]
 8007550:	3020      	adds	r0, #32
 8007552:	2201      	movs	r2, #1
 8007554:	e7e8      	b.n	8007528 <__d2b+0x64>
 8007556:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800755a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800755e:	6038      	str	r0, [r7, #0]
 8007560:	6918      	ldr	r0, [r3, #16]
 8007562:	f7ff fcbd 	bl	8006ee0 <__hi0bits>
 8007566:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800756a:	e7e5      	b.n	8007538 <__d2b+0x74>
 800756c:	08009c1d 	.word	0x08009c1d
 8007570:	08009c2e 	.word	0x08009c2e

08007574 <__ratio>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	b085      	sub	sp, #20
 800757a:	e9cd 1000 	strd	r1, r0, [sp]
 800757e:	a902      	add	r1, sp, #8
 8007580:	f7ff ff56 	bl	8007430 <__b2d>
 8007584:	9800      	ldr	r0, [sp, #0]
 8007586:	a903      	add	r1, sp, #12
 8007588:	ec55 4b10 	vmov	r4, r5, d0
 800758c:	f7ff ff50 	bl	8007430 <__b2d>
 8007590:	9b01      	ldr	r3, [sp, #4]
 8007592:	6919      	ldr	r1, [r3, #16]
 8007594:	9b00      	ldr	r3, [sp, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	1ac9      	subs	r1, r1, r3
 800759a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800759e:	1a9b      	subs	r3, r3, r2
 80075a0:	ec5b ab10 	vmov	sl, fp, d0
 80075a4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bfce      	itee	gt
 80075ac:	462a      	movgt	r2, r5
 80075ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80075b2:	465a      	movle	r2, fp
 80075b4:	462f      	mov	r7, r5
 80075b6:	46d9      	mov	r9, fp
 80075b8:	bfcc      	ite	gt
 80075ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80075be:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80075c2:	464b      	mov	r3, r9
 80075c4:	4652      	mov	r2, sl
 80075c6:	4620      	mov	r0, r4
 80075c8:	4639      	mov	r1, r7
 80075ca:	f7f9 f947 	bl	800085c <__aeabi_ddiv>
 80075ce:	ec41 0b10 	vmov	d0, r0, r1
 80075d2:	b005      	add	sp, #20
 80075d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080075d8 <__copybits>:
 80075d8:	3901      	subs	r1, #1
 80075da:	b570      	push	{r4, r5, r6, lr}
 80075dc:	1149      	asrs	r1, r1, #5
 80075de:	6914      	ldr	r4, [r2, #16]
 80075e0:	3101      	adds	r1, #1
 80075e2:	f102 0314 	add.w	r3, r2, #20
 80075e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80075ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075ee:	1f05      	subs	r5, r0, #4
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d30c      	bcc.n	800760e <__copybits+0x36>
 80075f4:	1aa3      	subs	r3, r4, r2
 80075f6:	3b11      	subs	r3, #17
 80075f8:	f023 0303 	bic.w	r3, r3, #3
 80075fc:	3211      	adds	r2, #17
 80075fe:	42a2      	cmp	r2, r4
 8007600:	bf88      	it	hi
 8007602:	2300      	movhi	r3, #0
 8007604:	4418      	add	r0, r3
 8007606:	2300      	movs	r3, #0
 8007608:	4288      	cmp	r0, r1
 800760a:	d305      	bcc.n	8007618 <__copybits+0x40>
 800760c:	bd70      	pop	{r4, r5, r6, pc}
 800760e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007612:	f845 6f04 	str.w	r6, [r5, #4]!
 8007616:	e7eb      	b.n	80075f0 <__copybits+0x18>
 8007618:	f840 3b04 	str.w	r3, [r0], #4
 800761c:	e7f4      	b.n	8007608 <__copybits+0x30>

0800761e <__any_on>:
 800761e:	f100 0214 	add.w	r2, r0, #20
 8007622:	6900      	ldr	r0, [r0, #16]
 8007624:	114b      	asrs	r3, r1, #5
 8007626:	4298      	cmp	r0, r3
 8007628:	b510      	push	{r4, lr}
 800762a:	db11      	blt.n	8007650 <__any_on+0x32>
 800762c:	dd0a      	ble.n	8007644 <__any_on+0x26>
 800762e:	f011 011f 	ands.w	r1, r1, #31
 8007632:	d007      	beq.n	8007644 <__any_on+0x26>
 8007634:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007638:	fa24 f001 	lsr.w	r0, r4, r1
 800763c:	fa00 f101 	lsl.w	r1, r0, r1
 8007640:	428c      	cmp	r4, r1
 8007642:	d10b      	bne.n	800765c <__any_on+0x3e>
 8007644:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007648:	4293      	cmp	r3, r2
 800764a:	d803      	bhi.n	8007654 <__any_on+0x36>
 800764c:	2000      	movs	r0, #0
 800764e:	bd10      	pop	{r4, pc}
 8007650:	4603      	mov	r3, r0
 8007652:	e7f7      	b.n	8007644 <__any_on+0x26>
 8007654:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007658:	2900      	cmp	r1, #0
 800765a:	d0f5      	beq.n	8007648 <__any_on+0x2a>
 800765c:	2001      	movs	r0, #1
 800765e:	e7f6      	b.n	800764e <__any_on+0x30>

08007660 <_malloc_usable_size_r>:
 8007660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007664:	1f18      	subs	r0, r3, #4
 8007666:	2b00      	cmp	r3, #0
 8007668:	bfbc      	itt	lt
 800766a:	580b      	ldrlt	r3, [r1, r0]
 800766c:	18c0      	addlt	r0, r0, r3
 800766e:	4770      	bx	lr

08007670 <sulp>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	4604      	mov	r4, r0
 8007674:	460d      	mov	r5, r1
 8007676:	ec45 4b10 	vmov	d0, r4, r5
 800767a:	4616      	mov	r6, r2
 800767c:	f7ff feb2 	bl	80073e4 <__ulp>
 8007680:	ec51 0b10 	vmov	r0, r1, d0
 8007684:	b17e      	cbz	r6, 80076a6 <sulp+0x36>
 8007686:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800768a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800768e:	2b00      	cmp	r3, #0
 8007690:	dd09      	ble.n	80076a6 <sulp+0x36>
 8007692:	051b      	lsls	r3, r3, #20
 8007694:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007698:	2400      	movs	r4, #0
 800769a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800769e:	4622      	mov	r2, r4
 80076a0:	462b      	mov	r3, r5
 80076a2:	f7f8 ffb1 	bl	8000608 <__aeabi_dmul>
 80076a6:	ec41 0b10 	vmov	d0, r0, r1
 80076aa:	bd70      	pop	{r4, r5, r6, pc}
 80076ac:	0000      	movs	r0, r0
	...

080076b0 <_strtod_l>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	b09f      	sub	sp, #124	@ 0x7c
 80076b6:	460c      	mov	r4, r1
 80076b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80076ba:	2200      	movs	r2, #0
 80076bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80076be:	9005      	str	r0, [sp, #20]
 80076c0:	f04f 0a00 	mov.w	sl, #0
 80076c4:	f04f 0b00 	mov.w	fp, #0
 80076c8:	460a      	mov	r2, r1
 80076ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80076cc:	7811      	ldrb	r1, [r2, #0]
 80076ce:	292b      	cmp	r1, #43	@ 0x2b
 80076d0:	d04a      	beq.n	8007768 <_strtod_l+0xb8>
 80076d2:	d838      	bhi.n	8007746 <_strtod_l+0x96>
 80076d4:	290d      	cmp	r1, #13
 80076d6:	d832      	bhi.n	800773e <_strtod_l+0x8e>
 80076d8:	2908      	cmp	r1, #8
 80076da:	d832      	bhi.n	8007742 <_strtod_l+0x92>
 80076dc:	2900      	cmp	r1, #0
 80076de:	d03b      	beq.n	8007758 <_strtod_l+0xa8>
 80076e0:	2200      	movs	r2, #0
 80076e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80076e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80076e6:	782a      	ldrb	r2, [r5, #0]
 80076e8:	2a30      	cmp	r2, #48	@ 0x30
 80076ea:	f040 80b3 	bne.w	8007854 <_strtod_l+0x1a4>
 80076ee:	786a      	ldrb	r2, [r5, #1]
 80076f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80076f4:	2a58      	cmp	r2, #88	@ 0x58
 80076f6:	d16e      	bne.n	80077d6 <_strtod_l+0x126>
 80076f8:	9302      	str	r3, [sp, #8]
 80076fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	4a8e      	ldr	r2, [pc, #568]	@ (800793c <_strtod_l+0x28c>)
 8007704:	9805      	ldr	r0, [sp, #20]
 8007706:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007708:	a919      	add	r1, sp, #100	@ 0x64
 800770a:	f001 fadf 	bl	8008ccc <__gethex>
 800770e:	f010 060f 	ands.w	r6, r0, #15
 8007712:	4604      	mov	r4, r0
 8007714:	d005      	beq.n	8007722 <_strtod_l+0x72>
 8007716:	2e06      	cmp	r6, #6
 8007718:	d128      	bne.n	800776c <_strtod_l+0xbc>
 800771a:	3501      	adds	r5, #1
 800771c:	2300      	movs	r3, #0
 800771e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007722:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007724:	2b00      	cmp	r3, #0
 8007726:	f040 858e 	bne.w	8008246 <_strtod_l+0xb96>
 800772a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800772c:	b1cb      	cbz	r3, 8007762 <_strtod_l+0xb2>
 800772e:	4652      	mov	r2, sl
 8007730:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007734:	ec43 2b10 	vmov	d0, r2, r3
 8007738:	b01f      	add	sp, #124	@ 0x7c
 800773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773e:	2920      	cmp	r1, #32
 8007740:	d1ce      	bne.n	80076e0 <_strtod_l+0x30>
 8007742:	3201      	adds	r2, #1
 8007744:	e7c1      	b.n	80076ca <_strtod_l+0x1a>
 8007746:	292d      	cmp	r1, #45	@ 0x2d
 8007748:	d1ca      	bne.n	80076e0 <_strtod_l+0x30>
 800774a:	2101      	movs	r1, #1
 800774c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800774e:	1c51      	adds	r1, r2, #1
 8007750:	9119      	str	r1, [sp, #100]	@ 0x64
 8007752:	7852      	ldrb	r2, [r2, #1]
 8007754:	2a00      	cmp	r2, #0
 8007756:	d1c5      	bne.n	80076e4 <_strtod_l+0x34>
 8007758:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800775a:	9419      	str	r4, [sp, #100]	@ 0x64
 800775c:	2b00      	cmp	r3, #0
 800775e:	f040 8570 	bne.w	8008242 <_strtod_l+0xb92>
 8007762:	4652      	mov	r2, sl
 8007764:	465b      	mov	r3, fp
 8007766:	e7e5      	b.n	8007734 <_strtod_l+0x84>
 8007768:	2100      	movs	r1, #0
 800776a:	e7ef      	b.n	800774c <_strtod_l+0x9c>
 800776c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800776e:	b13a      	cbz	r2, 8007780 <_strtod_l+0xd0>
 8007770:	2135      	movs	r1, #53	@ 0x35
 8007772:	a81c      	add	r0, sp, #112	@ 0x70
 8007774:	f7ff ff30 	bl	80075d8 <__copybits>
 8007778:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800777a:	9805      	ldr	r0, [sp, #20]
 800777c:	f7ff fafe 	bl	8006d7c <_Bfree>
 8007780:	3e01      	subs	r6, #1
 8007782:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007784:	2e04      	cmp	r6, #4
 8007786:	d806      	bhi.n	8007796 <_strtod_l+0xe6>
 8007788:	e8df f006 	tbb	[pc, r6]
 800778c:	201d0314 	.word	0x201d0314
 8007790:	14          	.byte	0x14
 8007791:	00          	.byte	0x00
 8007792:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007796:	05e1      	lsls	r1, r4, #23
 8007798:	bf48      	it	mi
 800779a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800779e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077a2:	0d1b      	lsrs	r3, r3, #20
 80077a4:	051b      	lsls	r3, r3, #20
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1bb      	bne.n	8007722 <_strtod_l+0x72>
 80077aa:	f7fe fbcd 	bl	8005f48 <__errno>
 80077ae:	2322      	movs	r3, #34	@ 0x22
 80077b0:	6003      	str	r3, [r0, #0]
 80077b2:	e7b6      	b.n	8007722 <_strtod_l+0x72>
 80077b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80077b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80077bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80077c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80077c4:	e7e7      	b.n	8007796 <_strtod_l+0xe6>
 80077c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007944 <_strtod_l+0x294>
 80077ca:	e7e4      	b.n	8007796 <_strtod_l+0xe6>
 80077cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80077d0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80077d4:	e7df      	b.n	8007796 <_strtod_l+0xe6>
 80077d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	9219      	str	r2, [sp, #100]	@ 0x64
 80077dc:	785b      	ldrb	r3, [r3, #1]
 80077de:	2b30      	cmp	r3, #48	@ 0x30
 80077e0:	d0f9      	beq.n	80077d6 <_strtod_l+0x126>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d09d      	beq.n	8007722 <_strtod_l+0x72>
 80077e6:	2301      	movs	r3, #1
 80077e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80077ee:	2300      	movs	r3, #0
 80077f0:	9308      	str	r3, [sp, #32]
 80077f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f4:	461f      	mov	r7, r3
 80077f6:	220a      	movs	r2, #10
 80077f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80077fa:	7805      	ldrb	r5, [r0, #0]
 80077fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007800:	b2d9      	uxtb	r1, r3
 8007802:	2909      	cmp	r1, #9
 8007804:	d928      	bls.n	8007858 <_strtod_l+0x1a8>
 8007806:	494e      	ldr	r1, [pc, #312]	@ (8007940 <_strtod_l+0x290>)
 8007808:	2201      	movs	r2, #1
 800780a:	f001 f9ab 	bl	8008b64 <strncmp>
 800780e:	2800      	cmp	r0, #0
 8007810:	d032      	beq.n	8007878 <_strtod_l+0x1c8>
 8007812:	2000      	movs	r0, #0
 8007814:	462a      	mov	r2, r5
 8007816:	4681      	mov	r9, r0
 8007818:	463d      	mov	r5, r7
 800781a:	4603      	mov	r3, r0
 800781c:	2a65      	cmp	r2, #101	@ 0x65
 800781e:	d001      	beq.n	8007824 <_strtod_l+0x174>
 8007820:	2a45      	cmp	r2, #69	@ 0x45
 8007822:	d114      	bne.n	800784e <_strtod_l+0x19e>
 8007824:	b91d      	cbnz	r5, 800782e <_strtod_l+0x17e>
 8007826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007828:	4302      	orrs	r2, r0
 800782a:	d095      	beq.n	8007758 <_strtod_l+0xa8>
 800782c:	2500      	movs	r5, #0
 800782e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007830:	1c62      	adds	r2, r4, #1
 8007832:	9219      	str	r2, [sp, #100]	@ 0x64
 8007834:	7862      	ldrb	r2, [r4, #1]
 8007836:	2a2b      	cmp	r2, #43	@ 0x2b
 8007838:	d077      	beq.n	800792a <_strtod_l+0x27a>
 800783a:	2a2d      	cmp	r2, #45	@ 0x2d
 800783c:	d07b      	beq.n	8007936 <_strtod_l+0x286>
 800783e:	f04f 0c00 	mov.w	ip, #0
 8007842:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007846:	2909      	cmp	r1, #9
 8007848:	f240 8082 	bls.w	8007950 <_strtod_l+0x2a0>
 800784c:	9419      	str	r4, [sp, #100]	@ 0x64
 800784e:	f04f 0800 	mov.w	r8, #0
 8007852:	e0a2      	b.n	800799a <_strtod_l+0x2ea>
 8007854:	2300      	movs	r3, #0
 8007856:	e7c7      	b.n	80077e8 <_strtod_l+0x138>
 8007858:	2f08      	cmp	r7, #8
 800785a:	bfd5      	itete	le
 800785c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800785e:	9908      	ldrgt	r1, [sp, #32]
 8007860:	fb02 3301 	mlale	r3, r2, r1, r3
 8007864:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007868:	f100 0001 	add.w	r0, r0, #1
 800786c:	bfd4      	ite	le
 800786e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007870:	9308      	strgt	r3, [sp, #32]
 8007872:	3701      	adds	r7, #1
 8007874:	9019      	str	r0, [sp, #100]	@ 0x64
 8007876:	e7bf      	b.n	80077f8 <_strtod_l+0x148>
 8007878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	9219      	str	r2, [sp, #100]	@ 0x64
 800787e:	785a      	ldrb	r2, [r3, #1]
 8007880:	b37f      	cbz	r7, 80078e2 <_strtod_l+0x232>
 8007882:	4681      	mov	r9, r0
 8007884:	463d      	mov	r5, r7
 8007886:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800788a:	2b09      	cmp	r3, #9
 800788c:	d912      	bls.n	80078b4 <_strtod_l+0x204>
 800788e:	2301      	movs	r3, #1
 8007890:	e7c4      	b.n	800781c <_strtod_l+0x16c>
 8007892:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	9219      	str	r2, [sp, #100]	@ 0x64
 8007898:	785a      	ldrb	r2, [r3, #1]
 800789a:	3001      	adds	r0, #1
 800789c:	2a30      	cmp	r2, #48	@ 0x30
 800789e:	d0f8      	beq.n	8007892 <_strtod_l+0x1e2>
 80078a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	f200 84d3 	bhi.w	8008250 <_strtod_l+0xba0>
 80078aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80078ae:	4681      	mov	r9, r0
 80078b0:	2000      	movs	r0, #0
 80078b2:	4605      	mov	r5, r0
 80078b4:	3a30      	subs	r2, #48	@ 0x30
 80078b6:	f100 0301 	add.w	r3, r0, #1
 80078ba:	d02a      	beq.n	8007912 <_strtod_l+0x262>
 80078bc:	4499      	add	r9, r3
 80078be:	eb00 0c05 	add.w	ip, r0, r5
 80078c2:	462b      	mov	r3, r5
 80078c4:	210a      	movs	r1, #10
 80078c6:	4563      	cmp	r3, ip
 80078c8:	d10d      	bne.n	80078e6 <_strtod_l+0x236>
 80078ca:	1c69      	adds	r1, r5, #1
 80078cc:	4401      	add	r1, r0
 80078ce:	4428      	add	r0, r5
 80078d0:	2808      	cmp	r0, #8
 80078d2:	dc16      	bgt.n	8007902 <_strtod_l+0x252>
 80078d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80078d6:	230a      	movs	r3, #10
 80078d8:	fb03 2300 	mla	r3, r3, r0, r2
 80078dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80078de:	2300      	movs	r3, #0
 80078e0:	e018      	b.n	8007914 <_strtod_l+0x264>
 80078e2:	4638      	mov	r0, r7
 80078e4:	e7da      	b.n	800789c <_strtod_l+0x1ec>
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	f103 0301 	add.w	r3, r3, #1
 80078ec:	dc03      	bgt.n	80078f6 <_strtod_l+0x246>
 80078ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80078f0:	434e      	muls	r6, r1
 80078f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80078f4:	e7e7      	b.n	80078c6 <_strtod_l+0x216>
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	bfde      	ittt	le
 80078fa:	9e08      	ldrle	r6, [sp, #32]
 80078fc:	434e      	mulle	r6, r1
 80078fe:	9608      	strle	r6, [sp, #32]
 8007900:	e7e1      	b.n	80078c6 <_strtod_l+0x216>
 8007902:	280f      	cmp	r0, #15
 8007904:	dceb      	bgt.n	80078de <_strtod_l+0x22e>
 8007906:	9808      	ldr	r0, [sp, #32]
 8007908:	230a      	movs	r3, #10
 800790a:	fb03 2300 	mla	r3, r3, r0, r2
 800790e:	9308      	str	r3, [sp, #32]
 8007910:	e7e5      	b.n	80078de <_strtod_l+0x22e>
 8007912:	4629      	mov	r1, r5
 8007914:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007916:	1c50      	adds	r0, r2, #1
 8007918:	9019      	str	r0, [sp, #100]	@ 0x64
 800791a:	7852      	ldrb	r2, [r2, #1]
 800791c:	4618      	mov	r0, r3
 800791e:	460d      	mov	r5, r1
 8007920:	e7b1      	b.n	8007886 <_strtod_l+0x1d6>
 8007922:	f04f 0900 	mov.w	r9, #0
 8007926:	2301      	movs	r3, #1
 8007928:	e77d      	b.n	8007826 <_strtod_l+0x176>
 800792a:	f04f 0c00 	mov.w	ip, #0
 800792e:	1ca2      	adds	r2, r4, #2
 8007930:	9219      	str	r2, [sp, #100]	@ 0x64
 8007932:	78a2      	ldrb	r2, [r4, #2]
 8007934:	e785      	b.n	8007842 <_strtod_l+0x192>
 8007936:	f04f 0c01 	mov.w	ip, #1
 800793a:	e7f8      	b.n	800792e <_strtod_l+0x27e>
 800793c:	08009da0 	.word	0x08009da0
 8007940:	08009d88 	.word	0x08009d88
 8007944:	7ff00000 	.word	0x7ff00000
 8007948:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800794a:	1c51      	adds	r1, r2, #1
 800794c:	9119      	str	r1, [sp, #100]	@ 0x64
 800794e:	7852      	ldrb	r2, [r2, #1]
 8007950:	2a30      	cmp	r2, #48	@ 0x30
 8007952:	d0f9      	beq.n	8007948 <_strtod_l+0x298>
 8007954:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007958:	2908      	cmp	r1, #8
 800795a:	f63f af78 	bhi.w	800784e <_strtod_l+0x19e>
 800795e:	3a30      	subs	r2, #48	@ 0x30
 8007960:	920e      	str	r2, [sp, #56]	@ 0x38
 8007962:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007964:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007966:	f04f 080a 	mov.w	r8, #10
 800796a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800796c:	1c56      	adds	r6, r2, #1
 800796e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007970:	7852      	ldrb	r2, [r2, #1]
 8007972:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007976:	f1be 0f09 	cmp.w	lr, #9
 800797a:	d939      	bls.n	80079f0 <_strtod_l+0x340>
 800797c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800797e:	1a76      	subs	r6, r6, r1
 8007980:	2e08      	cmp	r6, #8
 8007982:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007986:	dc03      	bgt.n	8007990 <_strtod_l+0x2e0>
 8007988:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800798a:	4588      	cmp	r8, r1
 800798c:	bfa8      	it	ge
 800798e:	4688      	movge	r8, r1
 8007990:	f1bc 0f00 	cmp.w	ip, #0
 8007994:	d001      	beq.n	800799a <_strtod_l+0x2ea>
 8007996:	f1c8 0800 	rsb	r8, r8, #0
 800799a:	2d00      	cmp	r5, #0
 800799c:	d14e      	bne.n	8007a3c <_strtod_l+0x38c>
 800799e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079a0:	4308      	orrs	r0, r1
 80079a2:	f47f aebe 	bne.w	8007722 <_strtod_l+0x72>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f47f aed6 	bne.w	8007758 <_strtod_l+0xa8>
 80079ac:	2a69      	cmp	r2, #105	@ 0x69
 80079ae:	d028      	beq.n	8007a02 <_strtod_l+0x352>
 80079b0:	dc25      	bgt.n	80079fe <_strtod_l+0x34e>
 80079b2:	2a49      	cmp	r2, #73	@ 0x49
 80079b4:	d025      	beq.n	8007a02 <_strtod_l+0x352>
 80079b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80079b8:	f47f aece 	bne.w	8007758 <_strtod_l+0xa8>
 80079bc:	499b      	ldr	r1, [pc, #620]	@ (8007c2c <_strtod_l+0x57c>)
 80079be:	a819      	add	r0, sp, #100	@ 0x64
 80079c0:	f001 fba6 	bl	8009110 <__match>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f43f aec7 	beq.w	8007758 <_strtod_l+0xa8>
 80079ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b28      	cmp	r3, #40	@ 0x28
 80079d0:	d12e      	bne.n	8007a30 <_strtod_l+0x380>
 80079d2:	4997      	ldr	r1, [pc, #604]	@ (8007c30 <_strtod_l+0x580>)
 80079d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80079d6:	a819      	add	r0, sp, #100	@ 0x64
 80079d8:	f001 fbae 	bl	8009138 <__hexnan>
 80079dc:	2805      	cmp	r0, #5
 80079de:	d127      	bne.n	8007a30 <_strtod_l+0x380>
 80079e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80079e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80079e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80079ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80079ee:	e698      	b.n	8007722 <_strtod_l+0x72>
 80079f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80079f2:	fb08 2101 	mla	r1, r8, r1, r2
 80079f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80079fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80079fc:	e7b5      	b.n	800796a <_strtod_l+0x2ba>
 80079fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8007a00:	e7da      	b.n	80079b8 <_strtod_l+0x308>
 8007a02:	498c      	ldr	r1, [pc, #560]	@ (8007c34 <_strtod_l+0x584>)
 8007a04:	a819      	add	r0, sp, #100	@ 0x64
 8007a06:	f001 fb83 	bl	8009110 <__match>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f43f aea4 	beq.w	8007758 <_strtod_l+0xa8>
 8007a10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a12:	4989      	ldr	r1, [pc, #548]	@ (8007c38 <_strtod_l+0x588>)
 8007a14:	3b01      	subs	r3, #1
 8007a16:	a819      	add	r0, sp, #100	@ 0x64
 8007a18:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a1a:	f001 fb79 	bl	8009110 <__match>
 8007a1e:	b910      	cbnz	r0, 8007a26 <_strtod_l+0x376>
 8007a20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a22:	3301      	adds	r3, #1
 8007a24:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a26:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007c48 <_strtod_l+0x598>
 8007a2a:	f04f 0a00 	mov.w	sl, #0
 8007a2e:	e678      	b.n	8007722 <_strtod_l+0x72>
 8007a30:	4882      	ldr	r0, [pc, #520]	@ (8007c3c <_strtod_l+0x58c>)
 8007a32:	f001 f8a9 	bl	8008b88 <nan>
 8007a36:	ec5b ab10 	vmov	sl, fp, d0
 8007a3a:	e672      	b.n	8007722 <_strtod_l+0x72>
 8007a3c:	eba8 0309 	sub.w	r3, r8, r9
 8007a40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a44:	2f00      	cmp	r7, #0
 8007a46:	bf08      	it	eq
 8007a48:	462f      	moveq	r7, r5
 8007a4a:	2d10      	cmp	r5, #16
 8007a4c:	462c      	mov	r4, r5
 8007a4e:	bfa8      	it	ge
 8007a50:	2410      	movge	r4, #16
 8007a52:	f7f8 fd5f 	bl	8000514 <__aeabi_ui2d>
 8007a56:	2d09      	cmp	r5, #9
 8007a58:	4682      	mov	sl, r0
 8007a5a:	468b      	mov	fp, r1
 8007a5c:	dc13      	bgt.n	8007a86 <_strtod_l+0x3d6>
 8007a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f43f ae5e 	beq.w	8007722 <_strtod_l+0x72>
 8007a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a68:	dd78      	ble.n	8007b5c <_strtod_l+0x4ac>
 8007a6a:	2b16      	cmp	r3, #22
 8007a6c:	dc5f      	bgt.n	8007b2e <_strtod_l+0x47e>
 8007a6e:	4974      	ldr	r1, [pc, #464]	@ (8007c40 <_strtod_l+0x590>)
 8007a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a78:	4652      	mov	r2, sl
 8007a7a:	465b      	mov	r3, fp
 8007a7c:	f7f8 fdc4 	bl	8000608 <__aeabi_dmul>
 8007a80:	4682      	mov	sl, r0
 8007a82:	468b      	mov	fp, r1
 8007a84:	e64d      	b.n	8007722 <_strtod_l+0x72>
 8007a86:	4b6e      	ldr	r3, [pc, #440]	@ (8007c40 <_strtod_l+0x590>)
 8007a88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007a90:	f7f8 fdba 	bl	8000608 <__aeabi_dmul>
 8007a94:	4682      	mov	sl, r0
 8007a96:	9808      	ldr	r0, [sp, #32]
 8007a98:	468b      	mov	fp, r1
 8007a9a:	f7f8 fd3b 	bl	8000514 <__aeabi_ui2d>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4650      	mov	r0, sl
 8007aa4:	4659      	mov	r1, fp
 8007aa6:	f7f8 fbf9 	bl	800029c <__adddf3>
 8007aaa:	2d0f      	cmp	r5, #15
 8007aac:	4682      	mov	sl, r0
 8007aae:	468b      	mov	fp, r1
 8007ab0:	ddd5      	ble.n	8007a5e <_strtod_l+0x3ae>
 8007ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab4:	1b2c      	subs	r4, r5, r4
 8007ab6:	441c      	add	r4, r3
 8007ab8:	2c00      	cmp	r4, #0
 8007aba:	f340 8096 	ble.w	8007bea <_strtod_l+0x53a>
 8007abe:	f014 030f 	ands.w	r3, r4, #15
 8007ac2:	d00a      	beq.n	8007ada <_strtod_l+0x42a>
 8007ac4:	495e      	ldr	r1, [pc, #376]	@ (8007c40 <_strtod_l+0x590>)
 8007ac6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007aca:	4652      	mov	r2, sl
 8007acc:	465b      	mov	r3, fp
 8007ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ad2:	f7f8 fd99 	bl	8000608 <__aeabi_dmul>
 8007ad6:	4682      	mov	sl, r0
 8007ad8:	468b      	mov	fp, r1
 8007ada:	f034 040f 	bics.w	r4, r4, #15
 8007ade:	d073      	beq.n	8007bc8 <_strtod_l+0x518>
 8007ae0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007ae4:	dd48      	ble.n	8007b78 <_strtod_l+0x4c8>
 8007ae6:	2400      	movs	r4, #0
 8007ae8:	46a0      	mov	r8, r4
 8007aea:	940a      	str	r4, [sp, #40]	@ 0x28
 8007aec:	46a1      	mov	r9, r4
 8007aee:	9a05      	ldr	r2, [sp, #20]
 8007af0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007c48 <_strtod_l+0x598>
 8007af4:	2322      	movs	r3, #34	@ 0x22
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	f04f 0a00 	mov.w	sl, #0
 8007afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f43f ae0f 	beq.w	8007722 <_strtod_l+0x72>
 8007b04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b06:	9805      	ldr	r0, [sp, #20]
 8007b08:	f7ff f938 	bl	8006d7c <_Bfree>
 8007b0c:	9805      	ldr	r0, [sp, #20]
 8007b0e:	4649      	mov	r1, r9
 8007b10:	f7ff f934 	bl	8006d7c <_Bfree>
 8007b14:	9805      	ldr	r0, [sp, #20]
 8007b16:	4641      	mov	r1, r8
 8007b18:	f7ff f930 	bl	8006d7c <_Bfree>
 8007b1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b1e:	9805      	ldr	r0, [sp, #20]
 8007b20:	f7ff f92c 	bl	8006d7c <_Bfree>
 8007b24:	9805      	ldr	r0, [sp, #20]
 8007b26:	4621      	mov	r1, r4
 8007b28:	f7ff f928 	bl	8006d7c <_Bfree>
 8007b2c:	e5f9      	b.n	8007722 <_strtod_l+0x72>
 8007b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007b34:	4293      	cmp	r3, r2
 8007b36:	dbbc      	blt.n	8007ab2 <_strtod_l+0x402>
 8007b38:	4c41      	ldr	r4, [pc, #260]	@ (8007c40 <_strtod_l+0x590>)
 8007b3a:	f1c5 050f 	rsb	r5, r5, #15
 8007b3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007b42:	4652      	mov	r2, sl
 8007b44:	465b      	mov	r3, fp
 8007b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b4a:	f7f8 fd5d 	bl	8000608 <__aeabi_dmul>
 8007b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b50:	1b5d      	subs	r5, r3, r5
 8007b52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007b56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b5a:	e78f      	b.n	8007a7c <_strtod_l+0x3cc>
 8007b5c:	3316      	adds	r3, #22
 8007b5e:	dba8      	blt.n	8007ab2 <_strtod_l+0x402>
 8007b60:	4b37      	ldr	r3, [pc, #220]	@ (8007c40 <_strtod_l+0x590>)
 8007b62:	eba9 0808 	sub.w	r8, r9, r8
 8007b66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007b6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007b6e:	4650      	mov	r0, sl
 8007b70:	4659      	mov	r1, fp
 8007b72:	f7f8 fe73 	bl	800085c <__aeabi_ddiv>
 8007b76:	e783      	b.n	8007a80 <_strtod_l+0x3d0>
 8007b78:	4b32      	ldr	r3, [pc, #200]	@ (8007c44 <_strtod_l+0x594>)
 8007b7a:	9308      	str	r3, [sp, #32]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	1124      	asrs	r4, r4, #4
 8007b80:	4650      	mov	r0, sl
 8007b82:	4659      	mov	r1, fp
 8007b84:	461e      	mov	r6, r3
 8007b86:	2c01      	cmp	r4, #1
 8007b88:	dc21      	bgt.n	8007bce <_strtod_l+0x51e>
 8007b8a:	b10b      	cbz	r3, 8007b90 <_strtod_l+0x4e0>
 8007b8c:	4682      	mov	sl, r0
 8007b8e:	468b      	mov	fp, r1
 8007b90:	492c      	ldr	r1, [pc, #176]	@ (8007c44 <_strtod_l+0x594>)
 8007b92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007b96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	465b      	mov	r3, fp
 8007b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ba2:	f7f8 fd31 	bl	8000608 <__aeabi_dmul>
 8007ba6:	4b28      	ldr	r3, [pc, #160]	@ (8007c48 <_strtod_l+0x598>)
 8007ba8:	460a      	mov	r2, r1
 8007baa:	400b      	ands	r3, r1
 8007bac:	4927      	ldr	r1, [pc, #156]	@ (8007c4c <_strtod_l+0x59c>)
 8007bae:	428b      	cmp	r3, r1
 8007bb0:	4682      	mov	sl, r0
 8007bb2:	d898      	bhi.n	8007ae6 <_strtod_l+0x436>
 8007bb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007bb8:	428b      	cmp	r3, r1
 8007bba:	bf86      	itte	hi
 8007bbc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007c50 <_strtod_l+0x5a0>
 8007bc0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007bc4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9308      	str	r3, [sp, #32]
 8007bcc:	e07a      	b.n	8007cc4 <_strtod_l+0x614>
 8007bce:	07e2      	lsls	r2, r4, #31
 8007bd0:	d505      	bpl.n	8007bde <_strtod_l+0x52e>
 8007bd2:	9b08      	ldr	r3, [sp, #32]
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f7f8 fd16 	bl	8000608 <__aeabi_dmul>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	9a08      	ldr	r2, [sp, #32]
 8007be0:	3208      	adds	r2, #8
 8007be2:	3601      	adds	r6, #1
 8007be4:	1064      	asrs	r4, r4, #1
 8007be6:	9208      	str	r2, [sp, #32]
 8007be8:	e7cd      	b.n	8007b86 <_strtod_l+0x4d6>
 8007bea:	d0ed      	beq.n	8007bc8 <_strtod_l+0x518>
 8007bec:	4264      	negs	r4, r4
 8007bee:	f014 020f 	ands.w	r2, r4, #15
 8007bf2:	d00a      	beq.n	8007c0a <_strtod_l+0x55a>
 8007bf4:	4b12      	ldr	r3, [pc, #72]	@ (8007c40 <_strtod_l+0x590>)
 8007bf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	4659      	mov	r1, fp
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 fe2b 	bl	800085c <__aeabi_ddiv>
 8007c06:	4682      	mov	sl, r0
 8007c08:	468b      	mov	fp, r1
 8007c0a:	1124      	asrs	r4, r4, #4
 8007c0c:	d0dc      	beq.n	8007bc8 <_strtod_l+0x518>
 8007c0e:	2c1f      	cmp	r4, #31
 8007c10:	dd20      	ble.n	8007c54 <_strtod_l+0x5a4>
 8007c12:	2400      	movs	r4, #0
 8007c14:	46a0      	mov	r8, r4
 8007c16:	940a      	str	r4, [sp, #40]	@ 0x28
 8007c18:	46a1      	mov	r9, r4
 8007c1a:	9a05      	ldr	r2, [sp, #20]
 8007c1c:	2322      	movs	r3, #34	@ 0x22
 8007c1e:	f04f 0a00 	mov.w	sl, #0
 8007c22:	f04f 0b00 	mov.w	fp, #0
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	e768      	b.n	8007afc <_strtod_l+0x44c>
 8007c2a:	bf00      	nop
 8007c2c:	08009b75 	.word	0x08009b75
 8007c30:	08009d8c 	.word	0x08009d8c
 8007c34:	08009b6d 	.word	0x08009b6d
 8007c38:	08009ba4 	.word	0x08009ba4
 8007c3c:	08009f35 	.word	0x08009f35
 8007c40:	08009cc0 	.word	0x08009cc0
 8007c44:	08009c98 	.word	0x08009c98
 8007c48:	7ff00000 	.word	0x7ff00000
 8007c4c:	7ca00000 	.word	0x7ca00000
 8007c50:	7fefffff 	.word	0x7fefffff
 8007c54:	f014 0310 	ands.w	r3, r4, #16
 8007c58:	bf18      	it	ne
 8007c5a:	236a      	movne	r3, #106	@ 0x6a
 8007c5c:	4ea9      	ldr	r6, [pc, #676]	@ (8007f04 <_strtod_l+0x854>)
 8007c5e:	9308      	str	r3, [sp, #32]
 8007c60:	4650      	mov	r0, sl
 8007c62:	4659      	mov	r1, fp
 8007c64:	2300      	movs	r3, #0
 8007c66:	07e2      	lsls	r2, r4, #31
 8007c68:	d504      	bpl.n	8007c74 <_strtod_l+0x5c4>
 8007c6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c6e:	f7f8 fccb 	bl	8000608 <__aeabi_dmul>
 8007c72:	2301      	movs	r3, #1
 8007c74:	1064      	asrs	r4, r4, #1
 8007c76:	f106 0608 	add.w	r6, r6, #8
 8007c7a:	d1f4      	bne.n	8007c66 <_strtod_l+0x5b6>
 8007c7c:	b10b      	cbz	r3, 8007c82 <_strtod_l+0x5d2>
 8007c7e:	4682      	mov	sl, r0
 8007c80:	468b      	mov	fp, r1
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	b1b3      	cbz	r3, 8007cb4 <_strtod_l+0x604>
 8007c86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	4659      	mov	r1, fp
 8007c92:	dd0f      	ble.n	8007cb4 <_strtod_l+0x604>
 8007c94:	2b1f      	cmp	r3, #31
 8007c96:	dd55      	ble.n	8007d44 <_strtod_l+0x694>
 8007c98:	2b34      	cmp	r3, #52	@ 0x34
 8007c9a:	bfde      	ittt	le
 8007c9c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007ca0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007ca4:	4093      	lslle	r3, r2
 8007ca6:	f04f 0a00 	mov.w	sl, #0
 8007caa:	bfcc      	ite	gt
 8007cac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007cb0:	ea03 0b01 	andle.w	fp, r3, r1
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4650      	mov	r0, sl
 8007cba:	4659      	mov	r1, fp
 8007cbc:	f7f8 ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d1a6      	bne.n	8007c12 <_strtod_l+0x562>
 8007cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007cca:	9805      	ldr	r0, [sp, #20]
 8007ccc:	462b      	mov	r3, r5
 8007cce:	463a      	mov	r2, r7
 8007cd0:	f7ff f8bc 	bl	8006e4c <__s2b>
 8007cd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	f43f af05 	beq.w	8007ae6 <_strtod_l+0x436>
 8007cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cde:	2a00      	cmp	r2, #0
 8007ce0:	eba9 0308 	sub.w	r3, r9, r8
 8007ce4:	bfa8      	it	ge
 8007ce6:	2300      	movge	r3, #0
 8007ce8:	9312      	str	r3, [sp, #72]	@ 0x48
 8007cea:	2400      	movs	r4, #0
 8007cec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007cf0:	9316      	str	r3, [sp, #88]	@ 0x58
 8007cf2:	46a0      	mov	r8, r4
 8007cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cf6:	9805      	ldr	r0, [sp, #20]
 8007cf8:	6859      	ldr	r1, [r3, #4]
 8007cfa:	f7fe ffff 	bl	8006cfc <_Balloc>
 8007cfe:	4681      	mov	r9, r0
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f43f aef4 	beq.w	8007aee <_strtod_l+0x43e>
 8007d06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d08:	691a      	ldr	r2, [r3, #16]
 8007d0a:	3202      	adds	r2, #2
 8007d0c:	f103 010c 	add.w	r1, r3, #12
 8007d10:	0092      	lsls	r2, r2, #2
 8007d12:	300c      	adds	r0, #12
 8007d14:	f7fe f945 	bl	8005fa2 <memcpy>
 8007d18:	ec4b ab10 	vmov	d0, sl, fp
 8007d1c:	9805      	ldr	r0, [sp, #20]
 8007d1e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007d20:	a91b      	add	r1, sp, #108	@ 0x6c
 8007d22:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007d26:	f7ff fbcd 	bl	80074c4 <__d2b>
 8007d2a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	f43f aede 	beq.w	8007aee <_strtod_l+0x43e>
 8007d32:	9805      	ldr	r0, [sp, #20]
 8007d34:	2101      	movs	r1, #1
 8007d36:	f7ff f91f 	bl	8006f78 <__i2b>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	b948      	cbnz	r0, 8007d52 <_strtod_l+0x6a2>
 8007d3e:	f04f 0800 	mov.w	r8, #0
 8007d42:	e6d4      	b.n	8007aee <_strtod_l+0x43e>
 8007d44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d48:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4c:	ea03 0a0a 	and.w	sl, r3, sl
 8007d50:	e7b0      	b.n	8007cb4 <_strtod_l+0x604>
 8007d52:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007d54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	bfab      	itete	ge
 8007d5a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007d5c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007d5e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007d60:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007d62:	bfac      	ite	ge
 8007d64:	18ef      	addge	r7, r5, r3
 8007d66:	1b5e      	sublt	r6, r3, r5
 8007d68:	9b08      	ldr	r3, [sp, #32]
 8007d6a:	1aed      	subs	r5, r5, r3
 8007d6c:	4415      	add	r5, r2
 8007d6e:	4b66      	ldr	r3, [pc, #408]	@ (8007f08 <_strtod_l+0x858>)
 8007d70:	3d01      	subs	r5, #1
 8007d72:	429d      	cmp	r5, r3
 8007d74:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007d78:	da50      	bge.n	8007e1c <_strtod_l+0x76c>
 8007d7a:	1b5b      	subs	r3, r3, r5
 8007d7c:	2b1f      	cmp	r3, #31
 8007d7e:	eba2 0203 	sub.w	r2, r2, r3
 8007d82:	f04f 0101 	mov.w	r1, #1
 8007d86:	dc3d      	bgt.n	8007e04 <_strtod_l+0x754>
 8007d88:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d8e:	2300      	movs	r3, #0
 8007d90:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d92:	18bd      	adds	r5, r7, r2
 8007d94:	9b08      	ldr	r3, [sp, #32]
 8007d96:	42af      	cmp	r7, r5
 8007d98:	4416      	add	r6, r2
 8007d9a:	441e      	add	r6, r3
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	bfa8      	it	ge
 8007da0:	462b      	movge	r3, r5
 8007da2:	42b3      	cmp	r3, r6
 8007da4:	bfa8      	it	ge
 8007da6:	4633      	movge	r3, r6
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bfc2      	ittt	gt
 8007dac:	1aed      	subgt	r5, r5, r3
 8007dae:	1af6      	subgt	r6, r6, r3
 8007db0:	1aff      	subgt	r7, r7, r3
 8007db2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	dd16      	ble.n	8007de6 <_strtod_l+0x736>
 8007db8:	4641      	mov	r1, r8
 8007dba:	9805      	ldr	r0, [sp, #20]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	f7ff f99b 	bl	80070f8 <__pow5mult>
 8007dc2:	4680      	mov	r8, r0
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d0ba      	beq.n	8007d3e <_strtod_l+0x68e>
 8007dc8:	4601      	mov	r1, r0
 8007dca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007dcc:	9805      	ldr	r0, [sp, #20]
 8007dce:	f7ff f8e9 	bl	8006fa4 <__multiply>
 8007dd2:	900e      	str	r0, [sp, #56]	@ 0x38
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f43f ae8a 	beq.w	8007aee <_strtod_l+0x43e>
 8007dda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ddc:	9805      	ldr	r0, [sp, #20]
 8007dde:	f7fe ffcd 	bl	8006d7c <_Bfree>
 8007de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007de4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	dc1d      	bgt.n	8007e26 <_strtod_l+0x776>
 8007dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	dd23      	ble.n	8007e38 <_strtod_l+0x788>
 8007df0:	4649      	mov	r1, r9
 8007df2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007df4:	9805      	ldr	r0, [sp, #20]
 8007df6:	f7ff f97f 	bl	80070f8 <__pow5mult>
 8007dfa:	4681      	mov	r9, r0
 8007dfc:	b9e0      	cbnz	r0, 8007e38 <_strtod_l+0x788>
 8007dfe:	f04f 0900 	mov.w	r9, #0
 8007e02:	e674      	b.n	8007aee <_strtod_l+0x43e>
 8007e04:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007e08:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007e0c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007e10:	35e2      	adds	r5, #226	@ 0xe2
 8007e12:	fa01 f305 	lsl.w	r3, r1, r5
 8007e16:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e18:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007e1a:	e7ba      	b.n	8007d92 <_strtod_l+0x6e2>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e20:	2301      	movs	r3, #1
 8007e22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e24:	e7b5      	b.n	8007d92 <_strtod_l+0x6e2>
 8007e26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e28:	9805      	ldr	r0, [sp, #20]
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	f7ff f9be 	bl	80071ac <__lshift>
 8007e30:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d1d9      	bne.n	8007dea <_strtod_l+0x73a>
 8007e36:	e65a      	b.n	8007aee <_strtod_l+0x43e>
 8007e38:	2e00      	cmp	r6, #0
 8007e3a:	dd07      	ble.n	8007e4c <_strtod_l+0x79c>
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	9805      	ldr	r0, [sp, #20]
 8007e40:	4632      	mov	r2, r6
 8007e42:	f7ff f9b3 	bl	80071ac <__lshift>
 8007e46:	4681      	mov	r9, r0
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d0d8      	beq.n	8007dfe <_strtod_l+0x74e>
 8007e4c:	2f00      	cmp	r7, #0
 8007e4e:	dd08      	ble.n	8007e62 <_strtod_l+0x7b2>
 8007e50:	4641      	mov	r1, r8
 8007e52:	9805      	ldr	r0, [sp, #20]
 8007e54:	463a      	mov	r2, r7
 8007e56:	f7ff f9a9 	bl	80071ac <__lshift>
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f43f ae46 	beq.w	8007aee <_strtod_l+0x43e>
 8007e62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e64:	9805      	ldr	r0, [sp, #20]
 8007e66:	464a      	mov	r2, r9
 8007e68:	f7ff fa28 	bl	80072bc <__mdiff>
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f43f ae3d 	beq.w	8007aee <_strtod_l+0x43e>
 8007e74:	68c3      	ldr	r3, [r0, #12]
 8007e76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60c3      	str	r3, [r0, #12]
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	f7ff fa01 	bl	8007284 <__mcmp>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	da46      	bge.n	8007f14 <_strtod_l+0x864>
 8007e86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e88:	ea53 030a 	orrs.w	r3, r3, sl
 8007e8c:	d16c      	bne.n	8007f68 <_strtod_l+0x8b8>
 8007e8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d168      	bne.n	8007f68 <_strtod_l+0x8b8>
 8007e96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e9a:	0d1b      	lsrs	r3, r3, #20
 8007e9c:	051b      	lsls	r3, r3, #20
 8007e9e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ea2:	d961      	bls.n	8007f68 <_strtod_l+0x8b8>
 8007ea4:	6963      	ldr	r3, [r4, #20]
 8007ea6:	b913      	cbnz	r3, 8007eae <_strtod_l+0x7fe>
 8007ea8:	6923      	ldr	r3, [r4, #16]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	dd5c      	ble.n	8007f68 <_strtod_l+0x8b8>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	9805      	ldr	r0, [sp, #20]
 8007eb4:	f7ff f97a 	bl	80071ac <__lshift>
 8007eb8:	4641      	mov	r1, r8
 8007eba:	4604      	mov	r4, r0
 8007ebc:	f7ff f9e2 	bl	8007284 <__mcmp>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	dd51      	ble.n	8007f68 <_strtod_l+0x8b8>
 8007ec4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ec8:	9a08      	ldr	r2, [sp, #32]
 8007eca:	0d1b      	lsrs	r3, r3, #20
 8007ecc:	051b      	lsls	r3, r3, #20
 8007ece:	2a00      	cmp	r2, #0
 8007ed0:	d06b      	beq.n	8007faa <_strtod_l+0x8fa>
 8007ed2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ed6:	d868      	bhi.n	8007faa <_strtod_l+0x8fa>
 8007ed8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007edc:	f67f ae9d 	bls.w	8007c1a <_strtod_l+0x56a>
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8007f0c <_strtod_l+0x85c>)
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f7f8 fb8e 	bl	8000608 <__aeabi_dmul>
 8007eec:	4b08      	ldr	r3, [pc, #32]	@ (8007f10 <_strtod_l+0x860>)
 8007eee:	400b      	ands	r3, r1
 8007ef0:	4682      	mov	sl, r0
 8007ef2:	468b      	mov	fp, r1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f47f ae05 	bne.w	8007b04 <_strtod_l+0x454>
 8007efa:	9a05      	ldr	r2, [sp, #20]
 8007efc:	2322      	movs	r3, #34	@ 0x22
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	e600      	b.n	8007b04 <_strtod_l+0x454>
 8007f02:	bf00      	nop
 8007f04:	08009db8 	.word	0x08009db8
 8007f08:	fffffc02 	.word	0xfffffc02
 8007f0c:	39500000 	.word	0x39500000
 8007f10:	7ff00000 	.word	0x7ff00000
 8007f14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007f18:	d165      	bne.n	8007fe6 <_strtod_l+0x936>
 8007f1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007f1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f20:	b35a      	cbz	r2, 8007f7a <_strtod_l+0x8ca>
 8007f22:	4a9f      	ldr	r2, [pc, #636]	@ (80081a0 <_strtod_l+0xaf0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d12b      	bne.n	8007f80 <_strtod_l+0x8d0>
 8007f28:	9b08      	ldr	r3, [sp, #32]
 8007f2a:	4651      	mov	r1, sl
 8007f2c:	b303      	cbz	r3, 8007f70 <_strtod_l+0x8c0>
 8007f2e:	4b9d      	ldr	r3, [pc, #628]	@ (80081a4 <_strtod_l+0xaf4>)
 8007f30:	465a      	mov	r2, fp
 8007f32:	4013      	ands	r3, r2
 8007f34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f3c:	d81b      	bhi.n	8007f76 <_strtod_l+0x8c6>
 8007f3e:	0d1b      	lsrs	r3, r3, #20
 8007f40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f44:	fa02 f303 	lsl.w	r3, r2, r3
 8007f48:	4299      	cmp	r1, r3
 8007f4a:	d119      	bne.n	8007f80 <_strtod_l+0x8d0>
 8007f4c:	4b96      	ldr	r3, [pc, #600]	@ (80081a8 <_strtod_l+0xaf8>)
 8007f4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d102      	bne.n	8007f5a <_strtod_l+0x8aa>
 8007f54:	3101      	adds	r1, #1
 8007f56:	f43f adca 	beq.w	8007aee <_strtod_l+0x43e>
 8007f5a:	4b92      	ldr	r3, [pc, #584]	@ (80081a4 <_strtod_l+0xaf4>)
 8007f5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f5e:	401a      	ands	r2, r3
 8007f60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007f64:	f04f 0a00 	mov.w	sl, #0
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1b8      	bne.n	8007ee0 <_strtod_l+0x830>
 8007f6e:	e5c9      	b.n	8007b04 <_strtod_l+0x454>
 8007f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f74:	e7e8      	b.n	8007f48 <_strtod_l+0x898>
 8007f76:	4613      	mov	r3, r2
 8007f78:	e7e6      	b.n	8007f48 <_strtod_l+0x898>
 8007f7a:	ea53 030a 	orrs.w	r3, r3, sl
 8007f7e:	d0a1      	beq.n	8007ec4 <_strtod_l+0x814>
 8007f80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f82:	b1db      	cbz	r3, 8007fbc <_strtod_l+0x90c>
 8007f84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f86:	4213      	tst	r3, r2
 8007f88:	d0ee      	beq.n	8007f68 <_strtod_l+0x8b8>
 8007f8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f8c:	9a08      	ldr	r2, [sp, #32]
 8007f8e:	4650      	mov	r0, sl
 8007f90:	4659      	mov	r1, fp
 8007f92:	b1bb      	cbz	r3, 8007fc4 <_strtod_l+0x914>
 8007f94:	f7ff fb6c 	bl	8007670 <sulp>
 8007f98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f9c:	ec53 2b10 	vmov	r2, r3, d0
 8007fa0:	f7f8 f97c 	bl	800029c <__adddf3>
 8007fa4:	4682      	mov	sl, r0
 8007fa6:	468b      	mov	fp, r1
 8007fa8:	e7de      	b.n	8007f68 <_strtod_l+0x8b8>
 8007faa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007fae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007fb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007fb6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007fba:	e7d5      	b.n	8007f68 <_strtod_l+0x8b8>
 8007fbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fbe:	ea13 0f0a 	tst.w	r3, sl
 8007fc2:	e7e1      	b.n	8007f88 <_strtod_l+0x8d8>
 8007fc4:	f7ff fb54 	bl	8007670 <sulp>
 8007fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fcc:	ec53 2b10 	vmov	r2, r3, d0
 8007fd0:	f7f8 f962 	bl	8000298 <__aeabi_dsub>
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	4682      	mov	sl, r0
 8007fda:	468b      	mov	fp, r1
 8007fdc:	f7f8 fd7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d0c1      	beq.n	8007f68 <_strtod_l+0x8b8>
 8007fe4:	e619      	b.n	8007c1a <_strtod_l+0x56a>
 8007fe6:	4641      	mov	r1, r8
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f7ff fac3 	bl	8007574 <__ratio>
 8007fee:	ec57 6b10 	vmov	r6, r7, d0
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f7f8 fd80 	bl	8000b00 <__aeabi_dcmple>
 8008000:	2800      	cmp	r0, #0
 8008002:	d06f      	beq.n	80080e4 <_strtod_l+0xa34>
 8008004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d17a      	bne.n	8008100 <_strtod_l+0xa50>
 800800a:	f1ba 0f00 	cmp.w	sl, #0
 800800e:	d158      	bne.n	80080c2 <_strtod_l+0xa12>
 8008010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008016:	2b00      	cmp	r3, #0
 8008018:	d15a      	bne.n	80080d0 <_strtod_l+0xa20>
 800801a:	4b64      	ldr	r3, [pc, #400]	@ (80081ac <_strtod_l+0xafc>)
 800801c:	2200      	movs	r2, #0
 800801e:	4630      	mov	r0, r6
 8008020:	4639      	mov	r1, r7
 8008022:	f7f8 fd63 	bl	8000aec <__aeabi_dcmplt>
 8008026:	2800      	cmp	r0, #0
 8008028:	d159      	bne.n	80080de <_strtod_l+0xa2e>
 800802a:	4630      	mov	r0, r6
 800802c:	4639      	mov	r1, r7
 800802e:	4b60      	ldr	r3, [pc, #384]	@ (80081b0 <_strtod_l+0xb00>)
 8008030:	2200      	movs	r2, #0
 8008032:	f7f8 fae9 	bl	8000608 <__aeabi_dmul>
 8008036:	4606      	mov	r6, r0
 8008038:	460f      	mov	r7, r1
 800803a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800803e:	9606      	str	r6, [sp, #24]
 8008040:	9307      	str	r3, [sp, #28]
 8008042:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008046:	4d57      	ldr	r5, [pc, #348]	@ (80081a4 <_strtod_l+0xaf4>)
 8008048:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800804c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800804e:	401d      	ands	r5, r3
 8008050:	4b58      	ldr	r3, [pc, #352]	@ (80081b4 <_strtod_l+0xb04>)
 8008052:	429d      	cmp	r5, r3
 8008054:	f040 80b2 	bne.w	80081bc <_strtod_l+0xb0c>
 8008058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800805a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800805e:	ec4b ab10 	vmov	d0, sl, fp
 8008062:	f7ff f9bf 	bl	80073e4 <__ulp>
 8008066:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800806a:	ec51 0b10 	vmov	r0, r1, d0
 800806e:	f7f8 facb 	bl	8000608 <__aeabi_dmul>
 8008072:	4652      	mov	r2, sl
 8008074:	465b      	mov	r3, fp
 8008076:	f7f8 f911 	bl	800029c <__adddf3>
 800807a:	460b      	mov	r3, r1
 800807c:	4949      	ldr	r1, [pc, #292]	@ (80081a4 <_strtod_l+0xaf4>)
 800807e:	4a4e      	ldr	r2, [pc, #312]	@ (80081b8 <_strtod_l+0xb08>)
 8008080:	4019      	ands	r1, r3
 8008082:	4291      	cmp	r1, r2
 8008084:	4682      	mov	sl, r0
 8008086:	d942      	bls.n	800810e <_strtod_l+0xa5e>
 8008088:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800808a:	4b47      	ldr	r3, [pc, #284]	@ (80081a8 <_strtod_l+0xaf8>)
 800808c:	429a      	cmp	r2, r3
 800808e:	d103      	bne.n	8008098 <_strtod_l+0x9e8>
 8008090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008092:	3301      	adds	r3, #1
 8008094:	f43f ad2b 	beq.w	8007aee <_strtod_l+0x43e>
 8008098:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80081a8 <_strtod_l+0xaf8>
 800809c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80080a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080a2:	9805      	ldr	r0, [sp, #20]
 80080a4:	f7fe fe6a 	bl	8006d7c <_Bfree>
 80080a8:	9805      	ldr	r0, [sp, #20]
 80080aa:	4649      	mov	r1, r9
 80080ac:	f7fe fe66 	bl	8006d7c <_Bfree>
 80080b0:	9805      	ldr	r0, [sp, #20]
 80080b2:	4641      	mov	r1, r8
 80080b4:	f7fe fe62 	bl	8006d7c <_Bfree>
 80080b8:	9805      	ldr	r0, [sp, #20]
 80080ba:	4621      	mov	r1, r4
 80080bc:	f7fe fe5e 	bl	8006d7c <_Bfree>
 80080c0:	e618      	b.n	8007cf4 <_strtod_l+0x644>
 80080c2:	f1ba 0f01 	cmp.w	sl, #1
 80080c6:	d103      	bne.n	80080d0 <_strtod_l+0xa20>
 80080c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f43f ada5 	beq.w	8007c1a <_strtod_l+0x56a>
 80080d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008180 <_strtod_l+0xad0>
 80080d4:	4f35      	ldr	r7, [pc, #212]	@ (80081ac <_strtod_l+0xafc>)
 80080d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080da:	2600      	movs	r6, #0
 80080dc:	e7b1      	b.n	8008042 <_strtod_l+0x992>
 80080de:	4f34      	ldr	r7, [pc, #208]	@ (80081b0 <_strtod_l+0xb00>)
 80080e0:	2600      	movs	r6, #0
 80080e2:	e7aa      	b.n	800803a <_strtod_l+0x98a>
 80080e4:	4b32      	ldr	r3, [pc, #200]	@ (80081b0 <_strtod_l+0xb00>)
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	2200      	movs	r2, #0
 80080ec:	f7f8 fa8c 	bl	8000608 <__aeabi_dmul>
 80080f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080f2:	4606      	mov	r6, r0
 80080f4:	460f      	mov	r7, r1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d09f      	beq.n	800803a <_strtod_l+0x98a>
 80080fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80080fe:	e7a0      	b.n	8008042 <_strtod_l+0x992>
 8008100:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008188 <_strtod_l+0xad8>
 8008104:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008108:	ec57 6b17 	vmov	r6, r7, d7
 800810c:	e799      	b.n	8008042 <_strtod_l+0x992>
 800810e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1c1      	bne.n	80080a0 <_strtod_l+0x9f0>
 800811c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008120:	0d1b      	lsrs	r3, r3, #20
 8008122:	051b      	lsls	r3, r3, #20
 8008124:	429d      	cmp	r5, r3
 8008126:	d1bb      	bne.n	80080a0 <_strtod_l+0x9f0>
 8008128:	4630      	mov	r0, r6
 800812a:	4639      	mov	r1, r7
 800812c:	f7f8 fdcc 	bl	8000cc8 <__aeabi_d2lz>
 8008130:	f7f8 fa3c 	bl	80005ac <__aeabi_l2d>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 f8ac 	bl	8000298 <__aeabi_dsub>
 8008140:	460b      	mov	r3, r1
 8008142:	4602      	mov	r2, r0
 8008144:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008148:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800814c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800814e:	ea46 060a 	orr.w	r6, r6, sl
 8008152:	431e      	orrs	r6, r3
 8008154:	d06f      	beq.n	8008236 <_strtod_l+0xb86>
 8008156:	a30e      	add	r3, pc, #56	@ (adr r3, 8008190 <_strtod_l+0xae0>)
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f7f8 fcc6 	bl	8000aec <__aeabi_dcmplt>
 8008160:	2800      	cmp	r0, #0
 8008162:	f47f accf 	bne.w	8007b04 <_strtod_l+0x454>
 8008166:	a30c      	add	r3, pc, #48	@ (adr r3, 8008198 <_strtod_l+0xae8>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008170:	f7f8 fcda 	bl	8000b28 <__aeabi_dcmpgt>
 8008174:	2800      	cmp	r0, #0
 8008176:	d093      	beq.n	80080a0 <_strtod_l+0x9f0>
 8008178:	e4c4      	b.n	8007b04 <_strtod_l+0x454>
 800817a:	bf00      	nop
 800817c:	f3af 8000 	nop.w
 8008180:	00000000 	.word	0x00000000
 8008184:	bff00000 	.word	0xbff00000
 8008188:	00000000 	.word	0x00000000
 800818c:	3ff00000 	.word	0x3ff00000
 8008190:	94a03595 	.word	0x94a03595
 8008194:	3fdfffff 	.word	0x3fdfffff
 8008198:	35afe535 	.word	0x35afe535
 800819c:	3fe00000 	.word	0x3fe00000
 80081a0:	000fffff 	.word	0x000fffff
 80081a4:	7ff00000 	.word	0x7ff00000
 80081a8:	7fefffff 	.word	0x7fefffff
 80081ac:	3ff00000 	.word	0x3ff00000
 80081b0:	3fe00000 	.word	0x3fe00000
 80081b4:	7fe00000 	.word	0x7fe00000
 80081b8:	7c9fffff 	.word	0x7c9fffff
 80081bc:	9b08      	ldr	r3, [sp, #32]
 80081be:	b323      	cbz	r3, 800820a <_strtod_l+0xb5a>
 80081c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80081c4:	d821      	bhi.n	800820a <_strtod_l+0xb5a>
 80081c6:	a328      	add	r3, pc, #160	@ (adr r3, 8008268 <_strtod_l+0xbb8>)
 80081c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081cc:	4630      	mov	r0, r6
 80081ce:	4639      	mov	r1, r7
 80081d0:	f7f8 fc96 	bl	8000b00 <__aeabi_dcmple>
 80081d4:	b1a0      	cbz	r0, 8008200 <_strtod_l+0xb50>
 80081d6:	4639      	mov	r1, r7
 80081d8:	4630      	mov	r0, r6
 80081da:	f7f8 fced 	bl	8000bb8 <__aeabi_d2uiz>
 80081de:	2801      	cmp	r0, #1
 80081e0:	bf38      	it	cc
 80081e2:	2001      	movcc	r0, #1
 80081e4:	f7f8 f996 	bl	8000514 <__aeabi_ui2d>
 80081e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ea:	4606      	mov	r6, r0
 80081ec:	460f      	mov	r7, r1
 80081ee:	b9fb      	cbnz	r3, 8008230 <_strtod_l+0xb80>
 80081f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80081f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80081f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80081fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008200:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008202:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008206:	1b5b      	subs	r3, r3, r5
 8008208:	9311      	str	r3, [sp, #68]	@ 0x44
 800820a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800820e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008212:	f7ff f8e7 	bl	80073e4 <__ulp>
 8008216:	4650      	mov	r0, sl
 8008218:	ec53 2b10 	vmov	r2, r3, d0
 800821c:	4659      	mov	r1, fp
 800821e:	f7f8 f9f3 	bl	8000608 <__aeabi_dmul>
 8008222:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008226:	f7f8 f839 	bl	800029c <__adddf3>
 800822a:	4682      	mov	sl, r0
 800822c:	468b      	mov	fp, r1
 800822e:	e770      	b.n	8008112 <_strtod_l+0xa62>
 8008230:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008234:	e7e0      	b.n	80081f8 <_strtod_l+0xb48>
 8008236:	a30e      	add	r3, pc, #56	@ (adr r3, 8008270 <_strtod_l+0xbc0>)
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	f7f8 fc56 	bl	8000aec <__aeabi_dcmplt>
 8008240:	e798      	b.n	8008174 <_strtod_l+0xac4>
 8008242:	2300      	movs	r3, #0
 8008244:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008246:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008248:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	f7ff ba6d 	b.w	800772a <_strtod_l+0x7a>
 8008250:	2a65      	cmp	r2, #101	@ 0x65
 8008252:	f43f ab66 	beq.w	8007922 <_strtod_l+0x272>
 8008256:	2a45      	cmp	r2, #69	@ 0x45
 8008258:	f43f ab63 	beq.w	8007922 <_strtod_l+0x272>
 800825c:	2301      	movs	r3, #1
 800825e:	f7ff bb9e 	b.w	800799e <_strtod_l+0x2ee>
 8008262:	bf00      	nop
 8008264:	f3af 8000 	nop.w
 8008268:	ffc00000 	.word	0xffc00000
 800826c:	41dfffff 	.word	0x41dfffff
 8008270:	94a03595 	.word	0x94a03595
 8008274:	3fcfffff 	.word	0x3fcfffff

08008278 <_strtod_r>:
 8008278:	4b01      	ldr	r3, [pc, #4]	@ (8008280 <_strtod_r+0x8>)
 800827a:	f7ff ba19 	b.w	80076b0 <_strtod_l>
 800827e:	bf00      	nop
 8008280:	200006fc 	.word	0x200006fc

08008284 <_strtol_l.constprop.0>:
 8008284:	2b24      	cmp	r3, #36	@ 0x24
 8008286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800828a:	4686      	mov	lr, r0
 800828c:	4690      	mov	r8, r2
 800828e:	d801      	bhi.n	8008294 <_strtol_l.constprop.0+0x10>
 8008290:	2b01      	cmp	r3, #1
 8008292:	d106      	bne.n	80082a2 <_strtol_l.constprop.0+0x1e>
 8008294:	f7fd fe58 	bl	8005f48 <__errno>
 8008298:	2316      	movs	r3, #22
 800829a:	6003      	str	r3, [r0, #0]
 800829c:	2000      	movs	r0, #0
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	4834      	ldr	r0, [pc, #208]	@ (8008374 <_strtol_l.constprop.0+0xf0>)
 80082a4:	460d      	mov	r5, r1
 80082a6:	462a      	mov	r2, r5
 80082a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082ac:	5d06      	ldrb	r6, [r0, r4]
 80082ae:	f016 0608 	ands.w	r6, r6, #8
 80082b2:	d1f8      	bne.n	80082a6 <_strtol_l.constprop.0+0x22>
 80082b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80082b6:	d12d      	bne.n	8008314 <_strtol_l.constprop.0+0x90>
 80082b8:	782c      	ldrb	r4, [r5, #0]
 80082ba:	2601      	movs	r6, #1
 80082bc:	1c95      	adds	r5, r2, #2
 80082be:	f033 0210 	bics.w	r2, r3, #16
 80082c2:	d109      	bne.n	80082d8 <_strtol_l.constprop.0+0x54>
 80082c4:	2c30      	cmp	r4, #48	@ 0x30
 80082c6:	d12a      	bne.n	800831e <_strtol_l.constprop.0+0x9a>
 80082c8:	782a      	ldrb	r2, [r5, #0]
 80082ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80082ce:	2a58      	cmp	r2, #88	@ 0x58
 80082d0:	d125      	bne.n	800831e <_strtol_l.constprop.0+0x9a>
 80082d2:	786c      	ldrb	r4, [r5, #1]
 80082d4:	2310      	movs	r3, #16
 80082d6:	3502      	adds	r5, #2
 80082d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80082dc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80082e0:	2200      	movs	r2, #0
 80082e2:	fbbc f9f3 	udiv	r9, ip, r3
 80082e6:	4610      	mov	r0, r2
 80082e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80082ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80082f0:	2f09      	cmp	r7, #9
 80082f2:	d81b      	bhi.n	800832c <_strtol_l.constprop.0+0xa8>
 80082f4:	463c      	mov	r4, r7
 80082f6:	42a3      	cmp	r3, r4
 80082f8:	dd27      	ble.n	800834a <_strtol_l.constprop.0+0xc6>
 80082fa:	1c57      	adds	r7, r2, #1
 80082fc:	d007      	beq.n	800830e <_strtol_l.constprop.0+0x8a>
 80082fe:	4581      	cmp	r9, r0
 8008300:	d320      	bcc.n	8008344 <_strtol_l.constprop.0+0xc0>
 8008302:	d101      	bne.n	8008308 <_strtol_l.constprop.0+0x84>
 8008304:	45a2      	cmp	sl, r4
 8008306:	db1d      	blt.n	8008344 <_strtol_l.constprop.0+0xc0>
 8008308:	fb00 4003 	mla	r0, r0, r3, r4
 800830c:	2201      	movs	r2, #1
 800830e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008312:	e7eb      	b.n	80082ec <_strtol_l.constprop.0+0x68>
 8008314:	2c2b      	cmp	r4, #43	@ 0x2b
 8008316:	bf04      	itt	eq
 8008318:	782c      	ldrbeq	r4, [r5, #0]
 800831a:	1c95      	addeq	r5, r2, #2
 800831c:	e7cf      	b.n	80082be <_strtol_l.constprop.0+0x3a>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1da      	bne.n	80082d8 <_strtol_l.constprop.0+0x54>
 8008322:	2c30      	cmp	r4, #48	@ 0x30
 8008324:	bf0c      	ite	eq
 8008326:	2308      	moveq	r3, #8
 8008328:	230a      	movne	r3, #10
 800832a:	e7d5      	b.n	80082d8 <_strtol_l.constprop.0+0x54>
 800832c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008330:	2f19      	cmp	r7, #25
 8008332:	d801      	bhi.n	8008338 <_strtol_l.constprop.0+0xb4>
 8008334:	3c37      	subs	r4, #55	@ 0x37
 8008336:	e7de      	b.n	80082f6 <_strtol_l.constprop.0+0x72>
 8008338:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800833c:	2f19      	cmp	r7, #25
 800833e:	d804      	bhi.n	800834a <_strtol_l.constprop.0+0xc6>
 8008340:	3c57      	subs	r4, #87	@ 0x57
 8008342:	e7d8      	b.n	80082f6 <_strtol_l.constprop.0+0x72>
 8008344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008348:	e7e1      	b.n	800830e <_strtol_l.constprop.0+0x8a>
 800834a:	1c53      	adds	r3, r2, #1
 800834c:	d108      	bne.n	8008360 <_strtol_l.constprop.0+0xdc>
 800834e:	2322      	movs	r3, #34	@ 0x22
 8008350:	f8ce 3000 	str.w	r3, [lr]
 8008354:	4660      	mov	r0, ip
 8008356:	f1b8 0f00 	cmp.w	r8, #0
 800835a:	d0a0      	beq.n	800829e <_strtol_l.constprop.0+0x1a>
 800835c:	1e69      	subs	r1, r5, #1
 800835e:	e006      	b.n	800836e <_strtol_l.constprop.0+0xea>
 8008360:	b106      	cbz	r6, 8008364 <_strtol_l.constprop.0+0xe0>
 8008362:	4240      	negs	r0, r0
 8008364:	f1b8 0f00 	cmp.w	r8, #0
 8008368:	d099      	beq.n	800829e <_strtol_l.constprop.0+0x1a>
 800836a:	2a00      	cmp	r2, #0
 800836c:	d1f6      	bne.n	800835c <_strtol_l.constprop.0+0xd8>
 800836e:	f8c8 1000 	str.w	r1, [r8]
 8008372:	e794      	b.n	800829e <_strtol_l.constprop.0+0x1a>
 8008374:	08009de1 	.word	0x08009de1

08008378 <_strtol_r>:
 8008378:	f7ff bf84 	b.w	8008284 <_strtol_l.constprop.0>

0800837c <__ssputs_r>:
 800837c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008380:	688e      	ldr	r6, [r1, #8]
 8008382:	461f      	mov	r7, r3
 8008384:	42be      	cmp	r6, r7
 8008386:	680b      	ldr	r3, [r1, #0]
 8008388:	4682      	mov	sl, r0
 800838a:	460c      	mov	r4, r1
 800838c:	4690      	mov	r8, r2
 800838e:	d82d      	bhi.n	80083ec <__ssputs_r+0x70>
 8008390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008394:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008398:	d026      	beq.n	80083e8 <__ssputs_r+0x6c>
 800839a:	6965      	ldr	r5, [r4, #20]
 800839c:	6909      	ldr	r1, [r1, #16]
 800839e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083a2:	eba3 0901 	sub.w	r9, r3, r1
 80083a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083aa:	1c7b      	adds	r3, r7, #1
 80083ac:	444b      	add	r3, r9
 80083ae:	106d      	asrs	r5, r5, #1
 80083b0:	429d      	cmp	r5, r3
 80083b2:	bf38      	it	cc
 80083b4:	461d      	movcc	r5, r3
 80083b6:	0553      	lsls	r3, r2, #21
 80083b8:	d527      	bpl.n	800840a <__ssputs_r+0x8e>
 80083ba:	4629      	mov	r1, r5
 80083bc:	f7fc fd04 	bl	8004dc8 <_malloc_r>
 80083c0:	4606      	mov	r6, r0
 80083c2:	b360      	cbz	r0, 800841e <__ssputs_r+0xa2>
 80083c4:	6921      	ldr	r1, [r4, #16]
 80083c6:	464a      	mov	r2, r9
 80083c8:	f7fd fdeb 	bl	8005fa2 <memcpy>
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d6:	81a3      	strh	r3, [r4, #12]
 80083d8:	6126      	str	r6, [r4, #16]
 80083da:	6165      	str	r5, [r4, #20]
 80083dc:	444e      	add	r6, r9
 80083de:	eba5 0509 	sub.w	r5, r5, r9
 80083e2:	6026      	str	r6, [r4, #0]
 80083e4:	60a5      	str	r5, [r4, #8]
 80083e6:	463e      	mov	r6, r7
 80083e8:	42be      	cmp	r6, r7
 80083ea:	d900      	bls.n	80083ee <__ssputs_r+0x72>
 80083ec:	463e      	mov	r6, r7
 80083ee:	6820      	ldr	r0, [r4, #0]
 80083f0:	4632      	mov	r2, r6
 80083f2:	4641      	mov	r1, r8
 80083f4:	f000 fb9c 	bl	8008b30 <memmove>
 80083f8:	68a3      	ldr	r3, [r4, #8]
 80083fa:	1b9b      	subs	r3, r3, r6
 80083fc:	60a3      	str	r3, [r4, #8]
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	4433      	add	r3, r6
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	2000      	movs	r0, #0
 8008406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840a:	462a      	mov	r2, r5
 800840c:	f7fc fd68 	bl	8004ee0 <_realloc_r>
 8008410:	4606      	mov	r6, r0
 8008412:	2800      	cmp	r0, #0
 8008414:	d1e0      	bne.n	80083d8 <__ssputs_r+0x5c>
 8008416:	6921      	ldr	r1, [r4, #16]
 8008418:	4650      	mov	r0, sl
 800841a:	f7fe fc25 	bl	8006c68 <_free_r>
 800841e:	230c      	movs	r3, #12
 8008420:	f8ca 3000 	str.w	r3, [sl]
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800842a:	81a3      	strh	r3, [r4, #12]
 800842c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008430:	e7e9      	b.n	8008406 <__ssputs_r+0x8a>
	...

08008434 <_svfiprintf_r>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	4698      	mov	r8, r3
 800843a:	898b      	ldrh	r3, [r1, #12]
 800843c:	061b      	lsls	r3, r3, #24
 800843e:	b09d      	sub	sp, #116	@ 0x74
 8008440:	4607      	mov	r7, r0
 8008442:	460d      	mov	r5, r1
 8008444:	4614      	mov	r4, r2
 8008446:	d510      	bpl.n	800846a <_svfiprintf_r+0x36>
 8008448:	690b      	ldr	r3, [r1, #16]
 800844a:	b973      	cbnz	r3, 800846a <_svfiprintf_r+0x36>
 800844c:	2140      	movs	r1, #64	@ 0x40
 800844e:	f7fc fcbb 	bl	8004dc8 <_malloc_r>
 8008452:	6028      	str	r0, [r5, #0]
 8008454:	6128      	str	r0, [r5, #16]
 8008456:	b930      	cbnz	r0, 8008466 <_svfiprintf_r+0x32>
 8008458:	230c      	movs	r3, #12
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008460:	b01d      	add	sp, #116	@ 0x74
 8008462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008466:	2340      	movs	r3, #64	@ 0x40
 8008468:	616b      	str	r3, [r5, #20]
 800846a:	2300      	movs	r3, #0
 800846c:	9309      	str	r3, [sp, #36]	@ 0x24
 800846e:	2320      	movs	r3, #32
 8008470:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008474:	f8cd 800c 	str.w	r8, [sp, #12]
 8008478:	2330      	movs	r3, #48	@ 0x30
 800847a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008618 <_svfiprintf_r+0x1e4>
 800847e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008482:	f04f 0901 	mov.w	r9, #1
 8008486:	4623      	mov	r3, r4
 8008488:	469a      	mov	sl, r3
 800848a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800848e:	b10a      	cbz	r2, 8008494 <_svfiprintf_r+0x60>
 8008490:	2a25      	cmp	r2, #37	@ 0x25
 8008492:	d1f9      	bne.n	8008488 <_svfiprintf_r+0x54>
 8008494:	ebba 0b04 	subs.w	fp, sl, r4
 8008498:	d00b      	beq.n	80084b2 <_svfiprintf_r+0x7e>
 800849a:	465b      	mov	r3, fp
 800849c:	4622      	mov	r2, r4
 800849e:	4629      	mov	r1, r5
 80084a0:	4638      	mov	r0, r7
 80084a2:	f7ff ff6b 	bl	800837c <__ssputs_r>
 80084a6:	3001      	adds	r0, #1
 80084a8:	f000 80a7 	beq.w	80085fa <_svfiprintf_r+0x1c6>
 80084ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084ae:	445a      	add	r2, fp
 80084b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80084b2:	f89a 3000 	ldrb.w	r3, [sl]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f000 809f 	beq.w	80085fa <_svfiprintf_r+0x1c6>
 80084bc:	2300      	movs	r3, #0
 80084be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c6:	f10a 0a01 	add.w	sl, sl, #1
 80084ca:	9304      	str	r3, [sp, #16]
 80084cc:	9307      	str	r3, [sp, #28]
 80084ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80084d4:	4654      	mov	r4, sl
 80084d6:	2205      	movs	r2, #5
 80084d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084dc:	484e      	ldr	r0, [pc, #312]	@ (8008618 <_svfiprintf_r+0x1e4>)
 80084de:	f7f7 fe7f 	bl	80001e0 <memchr>
 80084e2:	9a04      	ldr	r2, [sp, #16]
 80084e4:	b9d8      	cbnz	r0, 800851e <_svfiprintf_r+0xea>
 80084e6:	06d0      	lsls	r0, r2, #27
 80084e8:	bf44      	itt	mi
 80084ea:	2320      	movmi	r3, #32
 80084ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f0:	0711      	lsls	r1, r2, #28
 80084f2:	bf44      	itt	mi
 80084f4:	232b      	movmi	r3, #43	@ 0x2b
 80084f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084fa:	f89a 3000 	ldrb.w	r3, [sl]
 80084fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008500:	d015      	beq.n	800852e <_svfiprintf_r+0xfa>
 8008502:	9a07      	ldr	r2, [sp, #28]
 8008504:	4654      	mov	r4, sl
 8008506:	2000      	movs	r0, #0
 8008508:	f04f 0c0a 	mov.w	ip, #10
 800850c:	4621      	mov	r1, r4
 800850e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008512:	3b30      	subs	r3, #48	@ 0x30
 8008514:	2b09      	cmp	r3, #9
 8008516:	d94b      	bls.n	80085b0 <_svfiprintf_r+0x17c>
 8008518:	b1b0      	cbz	r0, 8008548 <_svfiprintf_r+0x114>
 800851a:	9207      	str	r2, [sp, #28]
 800851c:	e014      	b.n	8008548 <_svfiprintf_r+0x114>
 800851e:	eba0 0308 	sub.w	r3, r0, r8
 8008522:	fa09 f303 	lsl.w	r3, r9, r3
 8008526:	4313      	orrs	r3, r2
 8008528:	9304      	str	r3, [sp, #16]
 800852a:	46a2      	mov	sl, r4
 800852c:	e7d2      	b.n	80084d4 <_svfiprintf_r+0xa0>
 800852e:	9b03      	ldr	r3, [sp, #12]
 8008530:	1d19      	adds	r1, r3, #4
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	9103      	str	r1, [sp, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	bfbb      	ittet	lt
 800853a:	425b      	neglt	r3, r3
 800853c:	f042 0202 	orrlt.w	r2, r2, #2
 8008540:	9307      	strge	r3, [sp, #28]
 8008542:	9307      	strlt	r3, [sp, #28]
 8008544:	bfb8      	it	lt
 8008546:	9204      	strlt	r2, [sp, #16]
 8008548:	7823      	ldrb	r3, [r4, #0]
 800854a:	2b2e      	cmp	r3, #46	@ 0x2e
 800854c:	d10a      	bne.n	8008564 <_svfiprintf_r+0x130>
 800854e:	7863      	ldrb	r3, [r4, #1]
 8008550:	2b2a      	cmp	r3, #42	@ 0x2a
 8008552:	d132      	bne.n	80085ba <_svfiprintf_r+0x186>
 8008554:	9b03      	ldr	r3, [sp, #12]
 8008556:	1d1a      	adds	r2, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	9203      	str	r2, [sp, #12]
 800855c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008560:	3402      	adds	r4, #2
 8008562:	9305      	str	r3, [sp, #20]
 8008564:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008628 <_svfiprintf_r+0x1f4>
 8008568:	7821      	ldrb	r1, [r4, #0]
 800856a:	2203      	movs	r2, #3
 800856c:	4650      	mov	r0, sl
 800856e:	f7f7 fe37 	bl	80001e0 <memchr>
 8008572:	b138      	cbz	r0, 8008584 <_svfiprintf_r+0x150>
 8008574:	9b04      	ldr	r3, [sp, #16]
 8008576:	eba0 000a 	sub.w	r0, r0, sl
 800857a:	2240      	movs	r2, #64	@ 0x40
 800857c:	4082      	lsls	r2, r0
 800857e:	4313      	orrs	r3, r2
 8008580:	3401      	adds	r4, #1
 8008582:	9304      	str	r3, [sp, #16]
 8008584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008588:	4824      	ldr	r0, [pc, #144]	@ (800861c <_svfiprintf_r+0x1e8>)
 800858a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800858e:	2206      	movs	r2, #6
 8008590:	f7f7 fe26 	bl	80001e0 <memchr>
 8008594:	2800      	cmp	r0, #0
 8008596:	d036      	beq.n	8008606 <_svfiprintf_r+0x1d2>
 8008598:	4b21      	ldr	r3, [pc, #132]	@ (8008620 <_svfiprintf_r+0x1ec>)
 800859a:	bb1b      	cbnz	r3, 80085e4 <_svfiprintf_r+0x1b0>
 800859c:	9b03      	ldr	r3, [sp, #12]
 800859e:	3307      	adds	r3, #7
 80085a0:	f023 0307 	bic.w	r3, r3, #7
 80085a4:	3308      	adds	r3, #8
 80085a6:	9303      	str	r3, [sp, #12]
 80085a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085aa:	4433      	add	r3, r6
 80085ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ae:	e76a      	b.n	8008486 <_svfiprintf_r+0x52>
 80085b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80085b4:	460c      	mov	r4, r1
 80085b6:	2001      	movs	r0, #1
 80085b8:	e7a8      	b.n	800850c <_svfiprintf_r+0xd8>
 80085ba:	2300      	movs	r3, #0
 80085bc:	3401      	adds	r4, #1
 80085be:	9305      	str	r3, [sp, #20]
 80085c0:	4619      	mov	r1, r3
 80085c2:	f04f 0c0a 	mov.w	ip, #10
 80085c6:	4620      	mov	r0, r4
 80085c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085cc:	3a30      	subs	r2, #48	@ 0x30
 80085ce:	2a09      	cmp	r2, #9
 80085d0:	d903      	bls.n	80085da <_svfiprintf_r+0x1a6>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0c6      	beq.n	8008564 <_svfiprintf_r+0x130>
 80085d6:	9105      	str	r1, [sp, #20]
 80085d8:	e7c4      	b.n	8008564 <_svfiprintf_r+0x130>
 80085da:	fb0c 2101 	mla	r1, ip, r1, r2
 80085de:	4604      	mov	r4, r0
 80085e0:	2301      	movs	r3, #1
 80085e2:	e7f0      	b.n	80085c6 <_svfiprintf_r+0x192>
 80085e4:	ab03      	add	r3, sp, #12
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	462a      	mov	r2, r5
 80085ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008624 <_svfiprintf_r+0x1f0>)
 80085ec:	a904      	add	r1, sp, #16
 80085ee:	4638      	mov	r0, r7
 80085f0:	f7fc fd44 	bl	800507c <_printf_float>
 80085f4:	1c42      	adds	r2, r0, #1
 80085f6:	4606      	mov	r6, r0
 80085f8:	d1d6      	bne.n	80085a8 <_svfiprintf_r+0x174>
 80085fa:	89ab      	ldrh	r3, [r5, #12]
 80085fc:	065b      	lsls	r3, r3, #25
 80085fe:	f53f af2d 	bmi.w	800845c <_svfiprintf_r+0x28>
 8008602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008604:	e72c      	b.n	8008460 <_svfiprintf_r+0x2c>
 8008606:	ab03      	add	r3, sp, #12
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	462a      	mov	r2, r5
 800860c:	4b05      	ldr	r3, [pc, #20]	@ (8008624 <_svfiprintf_r+0x1f0>)
 800860e:	a904      	add	r1, sp, #16
 8008610:	4638      	mov	r0, r7
 8008612:	f7fc ffcb 	bl	80055ac <_printf_i>
 8008616:	e7ed      	b.n	80085f4 <_svfiprintf_r+0x1c0>
 8008618:	08009ee1 	.word	0x08009ee1
 800861c:	08009eeb 	.word	0x08009eeb
 8008620:	0800507d 	.word	0x0800507d
 8008624:	0800837d 	.word	0x0800837d
 8008628:	08009ee7 	.word	0x08009ee7

0800862c <__sfputc_r>:
 800862c:	6893      	ldr	r3, [r2, #8]
 800862e:	3b01      	subs	r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	b410      	push	{r4}
 8008634:	6093      	str	r3, [r2, #8]
 8008636:	da08      	bge.n	800864a <__sfputc_r+0x1e>
 8008638:	6994      	ldr	r4, [r2, #24]
 800863a:	42a3      	cmp	r3, r4
 800863c:	db01      	blt.n	8008642 <__sfputc_r+0x16>
 800863e:	290a      	cmp	r1, #10
 8008640:	d103      	bne.n	800864a <__sfputc_r+0x1e>
 8008642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008646:	f000 b9df 	b.w	8008a08 <__swbuf_r>
 800864a:	6813      	ldr	r3, [r2, #0]
 800864c:	1c58      	adds	r0, r3, #1
 800864e:	6010      	str	r0, [r2, #0]
 8008650:	7019      	strb	r1, [r3, #0]
 8008652:	4608      	mov	r0, r1
 8008654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008658:	4770      	bx	lr

0800865a <__sfputs_r>:
 800865a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865c:	4606      	mov	r6, r0
 800865e:	460f      	mov	r7, r1
 8008660:	4614      	mov	r4, r2
 8008662:	18d5      	adds	r5, r2, r3
 8008664:	42ac      	cmp	r4, r5
 8008666:	d101      	bne.n	800866c <__sfputs_r+0x12>
 8008668:	2000      	movs	r0, #0
 800866a:	e007      	b.n	800867c <__sfputs_r+0x22>
 800866c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008670:	463a      	mov	r2, r7
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff ffda 	bl	800862c <__sfputc_r>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d1f3      	bne.n	8008664 <__sfputs_r+0xa>
 800867c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008680 <_vfiprintf_r>:
 8008680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	460d      	mov	r5, r1
 8008686:	b09d      	sub	sp, #116	@ 0x74
 8008688:	4614      	mov	r4, r2
 800868a:	4698      	mov	r8, r3
 800868c:	4606      	mov	r6, r0
 800868e:	b118      	cbz	r0, 8008698 <_vfiprintf_r+0x18>
 8008690:	6a03      	ldr	r3, [r0, #32]
 8008692:	b90b      	cbnz	r3, 8008698 <_vfiprintf_r+0x18>
 8008694:	f7fd fb4a 	bl	8005d2c <__sinit>
 8008698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800869a:	07d9      	lsls	r1, r3, #31
 800869c:	d405      	bmi.n	80086aa <_vfiprintf_r+0x2a>
 800869e:	89ab      	ldrh	r3, [r5, #12]
 80086a0:	059a      	lsls	r2, r3, #22
 80086a2:	d402      	bmi.n	80086aa <_vfiprintf_r+0x2a>
 80086a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086a6:	f7fd fc7a 	bl	8005f9e <__retarget_lock_acquire_recursive>
 80086aa:	89ab      	ldrh	r3, [r5, #12]
 80086ac:	071b      	lsls	r3, r3, #28
 80086ae:	d501      	bpl.n	80086b4 <_vfiprintf_r+0x34>
 80086b0:	692b      	ldr	r3, [r5, #16]
 80086b2:	b99b      	cbnz	r3, 80086dc <_vfiprintf_r+0x5c>
 80086b4:	4629      	mov	r1, r5
 80086b6:	4630      	mov	r0, r6
 80086b8:	f000 f9e4 	bl	8008a84 <__swsetup_r>
 80086bc:	b170      	cbz	r0, 80086dc <_vfiprintf_r+0x5c>
 80086be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086c0:	07dc      	lsls	r4, r3, #31
 80086c2:	d504      	bpl.n	80086ce <_vfiprintf_r+0x4e>
 80086c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086c8:	b01d      	add	sp, #116	@ 0x74
 80086ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ce:	89ab      	ldrh	r3, [r5, #12]
 80086d0:	0598      	lsls	r0, r3, #22
 80086d2:	d4f7      	bmi.n	80086c4 <_vfiprintf_r+0x44>
 80086d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086d6:	f7fd fc63 	bl	8005fa0 <__retarget_lock_release_recursive>
 80086da:	e7f3      	b.n	80086c4 <_vfiprintf_r+0x44>
 80086dc:	2300      	movs	r3, #0
 80086de:	9309      	str	r3, [sp, #36]	@ 0x24
 80086e0:	2320      	movs	r3, #32
 80086e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ea:	2330      	movs	r3, #48	@ 0x30
 80086ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800889c <_vfiprintf_r+0x21c>
 80086f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086f4:	f04f 0901 	mov.w	r9, #1
 80086f8:	4623      	mov	r3, r4
 80086fa:	469a      	mov	sl, r3
 80086fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008700:	b10a      	cbz	r2, 8008706 <_vfiprintf_r+0x86>
 8008702:	2a25      	cmp	r2, #37	@ 0x25
 8008704:	d1f9      	bne.n	80086fa <_vfiprintf_r+0x7a>
 8008706:	ebba 0b04 	subs.w	fp, sl, r4
 800870a:	d00b      	beq.n	8008724 <_vfiprintf_r+0xa4>
 800870c:	465b      	mov	r3, fp
 800870e:	4622      	mov	r2, r4
 8008710:	4629      	mov	r1, r5
 8008712:	4630      	mov	r0, r6
 8008714:	f7ff ffa1 	bl	800865a <__sfputs_r>
 8008718:	3001      	adds	r0, #1
 800871a:	f000 80a7 	beq.w	800886c <_vfiprintf_r+0x1ec>
 800871e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008720:	445a      	add	r2, fp
 8008722:	9209      	str	r2, [sp, #36]	@ 0x24
 8008724:	f89a 3000 	ldrb.w	r3, [sl]
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 809f 	beq.w	800886c <_vfiprintf_r+0x1ec>
 800872e:	2300      	movs	r3, #0
 8008730:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008738:	f10a 0a01 	add.w	sl, sl, #1
 800873c:	9304      	str	r3, [sp, #16]
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008744:	931a      	str	r3, [sp, #104]	@ 0x68
 8008746:	4654      	mov	r4, sl
 8008748:	2205      	movs	r2, #5
 800874a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874e:	4853      	ldr	r0, [pc, #332]	@ (800889c <_vfiprintf_r+0x21c>)
 8008750:	f7f7 fd46 	bl	80001e0 <memchr>
 8008754:	9a04      	ldr	r2, [sp, #16]
 8008756:	b9d8      	cbnz	r0, 8008790 <_vfiprintf_r+0x110>
 8008758:	06d1      	lsls	r1, r2, #27
 800875a:	bf44      	itt	mi
 800875c:	2320      	movmi	r3, #32
 800875e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008762:	0713      	lsls	r3, r2, #28
 8008764:	bf44      	itt	mi
 8008766:	232b      	movmi	r3, #43	@ 0x2b
 8008768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800876c:	f89a 3000 	ldrb.w	r3, [sl]
 8008770:	2b2a      	cmp	r3, #42	@ 0x2a
 8008772:	d015      	beq.n	80087a0 <_vfiprintf_r+0x120>
 8008774:	9a07      	ldr	r2, [sp, #28]
 8008776:	4654      	mov	r4, sl
 8008778:	2000      	movs	r0, #0
 800877a:	f04f 0c0a 	mov.w	ip, #10
 800877e:	4621      	mov	r1, r4
 8008780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008784:	3b30      	subs	r3, #48	@ 0x30
 8008786:	2b09      	cmp	r3, #9
 8008788:	d94b      	bls.n	8008822 <_vfiprintf_r+0x1a2>
 800878a:	b1b0      	cbz	r0, 80087ba <_vfiprintf_r+0x13a>
 800878c:	9207      	str	r2, [sp, #28]
 800878e:	e014      	b.n	80087ba <_vfiprintf_r+0x13a>
 8008790:	eba0 0308 	sub.w	r3, r0, r8
 8008794:	fa09 f303 	lsl.w	r3, r9, r3
 8008798:	4313      	orrs	r3, r2
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	46a2      	mov	sl, r4
 800879e:	e7d2      	b.n	8008746 <_vfiprintf_r+0xc6>
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	1d19      	adds	r1, r3, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	9103      	str	r1, [sp, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bfbb      	ittet	lt
 80087ac:	425b      	neglt	r3, r3
 80087ae:	f042 0202 	orrlt.w	r2, r2, #2
 80087b2:	9307      	strge	r3, [sp, #28]
 80087b4:	9307      	strlt	r3, [sp, #28]
 80087b6:	bfb8      	it	lt
 80087b8:	9204      	strlt	r2, [sp, #16]
 80087ba:	7823      	ldrb	r3, [r4, #0]
 80087bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80087be:	d10a      	bne.n	80087d6 <_vfiprintf_r+0x156>
 80087c0:	7863      	ldrb	r3, [r4, #1]
 80087c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80087c4:	d132      	bne.n	800882c <_vfiprintf_r+0x1ac>
 80087c6:	9b03      	ldr	r3, [sp, #12]
 80087c8:	1d1a      	adds	r2, r3, #4
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	9203      	str	r2, [sp, #12]
 80087ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087d2:	3402      	adds	r4, #2
 80087d4:	9305      	str	r3, [sp, #20]
 80087d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088ac <_vfiprintf_r+0x22c>
 80087da:	7821      	ldrb	r1, [r4, #0]
 80087dc:	2203      	movs	r2, #3
 80087de:	4650      	mov	r0, sl
 80087e0:	f7f7 fcfe 	bl	80001e0 <memchr>
 80087e4:	b138      	cbz	r0, 80087f6 <_vfiprintf_r+0x176>
 80087e6:	9b04      	ldr	r3, [sp, #16]
 80087e8:	eba0 000a 	sub.w	r0, r0, sl
 80087ec:	2240      	movs	r2, #64	@ 0x40
 80087ee:	4082      	lsls	r2, r0
 80087f0:	4313      	orrs	r3, r2
 80087f2:	3401      	adds	r4, #1
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fa:	4829      	ldr	r0, [pc, #164]	@ (80088a0 <_vfiprintf_r+0x220>)
 80087fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008800:	2206      	movs	r2, #6
 8008802:	f7f7 fced 	bl	80001e0 <memchr>
 8008806:	2800      	cmp	r0, #0
 8008808:	d03f      	beq.n	800888a <_vfiprintf_r+0x20a>
 800880a:	4b26      	ldr	r3, [pc, #152]	@ (80088a4 <_vfiprintf_r+0x224>)
 800880c:	bb1b      	cbnz	r3, 8008856 <_vfiprintf_r+0x1d6>
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	3307      	adds	r3, #7
 8008812:	f023 0307 	bic.w	r3, r3, #7
 8008816:	3308      	adds	r3, #8
 8008818:	9303      	str	r3, [sp, #12]
 800881a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881c:	443b      	add	r3, r7
 800881e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008820:	e76a      	b.n	80086f8 <_vfiprintf_r+0x78>
 8008822:	fb0c 3202 	mla	r2, ip, r2, r3
 8008826:	460c      	mov	r4, r1
 8008828:	2001      	movs	r0, #1
 800882a:	e7a8      	b.n	800877e <_vfiprintf_r+0xfe>
 800882c:	2300      	movs	r3, #0
 800882e:	3401      	adds	r4, #1
 8008830:	9305      	str	r3, [sp, #20]
 8008832:	4619      	mov	r1, r3
 8008834:	f04f 0c0a 	mov.w	ip, #10
 8008838:	4620      	mov	r0, r4
 800883a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800883e:	3a30      	subs	r2, #48	@ 0x30
 8008840:	2a09      	cmp	r2, #9
 8008842:	d903      	bls.n	800884c <_vfiprintf_r+0x1cc>
 8008844:	2b00      	cmp	r3, #0
 8008846:	d0c6      	beq.n	80087d6 <_vfiprintf_r+0x156>
 8008848:	9105      	str	r1, [sp, #20]
 800884a:	e7c4      	b.n	80087d6 <_vfiprintf_r+0x156>
 800884c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008850:	4604      	mov	r4, r0
 8008852:	2301      	movs	r3, #1
 8008854:	e7f0      	b.n	8008838 <_vfiprintf_r+0x1b8>
 8008856:	ab03      	add	r3, sp, #12
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	462a      	mov	r2, r5
 800885c:	4b12      	ldr	r3, [pc, #72]	@ (80088a8 <_vfiprintf_r+0x228>)
 800885e:	a904      	add	r1, sp, #16
 8008860:	4630      	mov	r0, r6
 8008862:	f7fc fc0b 	bl	800507c <_printf_float>
 8008866:	4607      	mov	r7, r0
 8008868:	1c78      	adds	r0, r7, #1
 800886a:	d1d6      	bne.n	800881a <_vfiprintf_r+0x19a>
 800886c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800886e:	07d9      	lsls	r1, r3, #31
 8008870:	d405      	bmi.n	800887e <_vfiprintf_r+0x1fe>
 8008872:	89ab      	ldrh	r3, [r5, #12]
 8008874:	059a      	lsls	r2, r3, #22
 8008876:	d402      	bmi.n	800887e <_vfiprintf_r+0x1fe>
 8008878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800887a:	f7fd fb91 	bl	8005fa0 <__retarget_lock_release_recursive>
 800887e:	89ab      	ldrh	r3, [r5, #12]
 8008880:	065b      	lsls	r3, r3, #25
 8008882:	f53f af1f 	bmi.w	80086c4 <_vfiprintf_r+0x44>
 8008886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008888:	e71e      	b.n	80086c8 <_vfiprintf_r+0x48>
 800888a:	ab03      	add	r3, sp, #12
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	462a      	mov	r2, r5
 8008890:	4b05      	ldr	r3, [pc, #20]	@ (80088a8 <_vfiprintf_r+0x228>)
 8008892:	a904      	add	r1, sp, #16
 8008894:	4630      	mov	r0, r6
 8008896:	f7fc fe89 	bl	80055ac <_printf_i>
 800889a:	e7e4      	b.n	8008866 <_vfiprintf_r+0x1e6>
 800889c:	08009ee1 	.word	0x08009ee1
 80088a0:	08009eeb 	.word	0x08009eeb
 80088a4:	0800507d 	.word	0x0800507d
 80088a8:	0800865b 	.word	0x0800865b
 80088ac:	08009ee7 	.word	0x08009ee7

080088b0 <__sflush_r>:
 80088b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b8:	0716      	lsls	r6, r2, #28
 80088ba:	4605      	mov	r5, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	d454      	bmi.n	800896a <__sflush_r+0xba>
 80088c0:	684b      	ldr	r3, [r1, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dc02      	bgt.n	80088cc <__sflush_r+0x1c>
 80088c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	dd48      	ble.n	800895e <__sflush_r+0xae>
 80088cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088ce:	2e00      	cmp	r6, #0
 80088d0:	d045      	beq.n	800895e <__sflush_r+0xae>
 80088d2:	2300      	movs	r3, #0
 80088d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088d8:	682f      	ldr	r7, [r5, #0]
 80088da:	6a21      	ldr	r1, [r4, #32]
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	d030      	beq.n	8008942 <__sflush_r+0x92>
 80088e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	0759      	lsls	r1, r3, #29
 80088e6:	d505      	bpl.n	80088f4 <__sflush_r+0x44>
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	1ad2      	subs	r2, r2, r3
 80088ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088ee:	b10b      	cbz	r3, 80088f4 <__sflush_r+0x44>
 80088f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088f2:	1ad2      	subs	r2, r2, r3
 80088f4:	2300      	movs	r3, #0
 80088f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088f8:	6a21      	ldr	r1, [r4, #32]
 80088fa:	4628      	mov	r0, r5
 80088fc:	47b0      	blx	r6
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	d106      	bne.n	8008912 <__sflush_r+0x62>
 8008904:	6829      	ldr	r1, [r5, #0]
 8008906:	291d      	cmp	r1, #29
 8008908:	d82b      	bhi.n	8008962 <__sflush_r+0xb2>
 800890a:	4a2a      	ldr	r2, [pc, #168]	@ (80089b4 <__sflush_r+0x104>)
 800890c:	410a      	asrs	r2, r1
 800890e:	07d6      	lsls	r6, r2, #31
 8008910:	d427      	bmi.n	8008962 <__sflush_r+0xb2>
 8008912:	2200      	movs	r2, #0
 8008914:	6062      	str	r2, [r4, #4]
 8008916:	04d9      	lsls	r1, r3, #19
 8008918:	6922      	ldr	r2, [r4, #16]
 800891a:	6022      	str	r2, [r4, #0]
 800891c:	d504      	bpl.n	8008928 <__sflush_r+0x78>
 800891e:	1c42      	adds	r2, r0, #1
 8008920:	d101      	bne.n	8008926 <__sflush_r+0x76>
 8008922:	682b      	ldr	r3, [r5, #0]
 8008924:	b903      	cbnz	r3, 8008928 <__sflush_r+0x78>
 8008926:	6560      	str	r0, [r4, #84]	@ 0x54
 8008928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800892a:	602f      	str	r7, [r5, #0]
 800892c:	b1b9      	cbz	r1, 800895e <__sflush_r+0xae>
 800892e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008932:	4299      	cmp	r1, r3
 8008934:	d002      	beq.n	800893c <__sflush_r+0x8c>
 8008936:	4628      	mov	r0, r5
 8008938:	f7fe f996 	bl	8006c68 <_free_r>
 800893c:	2300      	movs	r3, #0
 800893e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008940:	e00d      	b.n	800895e <__sflush_r+0xae>
 8008942:	2301      	movs	r3, #1
 8008944:	4628      	mov	r0, r5
 8008946:	47b0      	blx	r6
 8008948:	4602      	mov	r2, r0
 800894a:	1c50      	adds	r0, r2, #1
 800894c:	d1c9      	bne.n	80088e2 <__sflush_r+0x32>
 800894e:	682b      	ldr	r3, [r5, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0c6      	beq.n	80088e2 <__sflush_r+0x32>
 8008954:	2b1d      	cmp	r3, #29
 8008956:	d001      	beq.n	800895c <__sflush_r+0xac>
 8008958:	2b16      	cmp	r3, #22
 800895a:	d11e      	bne.n	800899a <__sflush_r+0xea>
 800895c:	602f      	str	r7, [r5, #0]
 800895e:	2000      	movs	r0, #0
 8008960:	e022      	b.n	80089a8 <__sflush_r+0xf8>
 8008962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008966:	b21b      	sxth	r3, r3
 8008968:	e01b      	b.n	80089a2 <__sflush_r+0xf2>
 800896a:	690f      	ldr	r7, [r1, #16]
 800896c:	2f00      	cmp	r7, #0
 800896e:	d0f6      	beq.n	800895e <__sflush_r+0xae>
 8008970:	0793      	lsls	r3, r2, #30
 8008972:	680e      	ldr	r6, [r1, #0]
 8008974:	bf08      	it	eq
 8008976:	694b      	ldreq	r3, [r1, #20]
 8008978:	600f      	str	r7, [r1, #0]
 800897a:	bf18      	it	ne
 800897c:	2300      	movne	r3, #0
 800897e:	eba6 0807 	sub.w	r8, r6, r7
 8008982:	608b      	str	r3, [r1, #8]
 8008984:	f1b8 0f00 	cmp.w	r8, #0
 8008988:	dde9      	ble.n	800895e <__sflush_r+0xae>
 800898a:	6a21      	ldr	r1, [r4, #32]
 800898c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800898e:	4643      	mov	r3, r8
 8008990:	463a      	mov	r2, r7
 8008992:	4628      	mov	r0, r5
 8008994:	47b0      	blx	r6
 8008996:	2800      	cmp	r0, #0
 8008998:	dc08      	bgt.n	80089ac <__sflush_r+0xfc>
 800899a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800899e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089a2:	81a3      	strh	r3, [r4, #12]
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ac:	4407      	add	r7, r0
 80089ae:	eba8 0800 	sub.w	r8, r8, r0
 80089b2:	e7e7      	b.n	8008984 <__sflush_r+0xd4>
 80089b4:	dfbffffe 	.word	0xdfbffffe

080089b8 <_fflush_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	690b      	ldr	r3, [r1, #16]
 80089bc:	4605      	mov	r5, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b913      	cbnz	r3, 80089c8 <_fflush_r+0x10>
 80089c2:	2500      	movs	r5, #0
 80089c4:	4628      	mov	r0, r5
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	b118      	cbz	r0, 80089d2 <_fflush_r+0x1a>
 80089ca:	6a03      	ldr	r3, [r0, #32]
 80089cc:	b90b      	cbnz	r3, 80089d2 <_fflush_r+0x1a>
 80089ce:	f7fd f9ad 	bl	8005d2c <__sinit>
 80089d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0f3      	beq.n	80089c2 <_fflush_r+0xa>
 80089da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089dc:	07d0      	lsls	r0, r2, #31
 80089de:	d404      	bmi.n	80089ea <_fflush_r+0x32>
 80089e0:	0599      	lsls	r1, r3, #22
 80089e2:	d402      	bmi.n	80089ea <_fflush_r+0x32>
 80089e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089e6:	f7fd fada 	bl	8005f9e <__retarget_lock_acquire_recursive>
 80089ea:	4628      	mov	r0, r5
 80089ec:	4621      	mov	r1, r4
 80089ee:	f7ff ff5f 	bl	80088b0 <__sflush_r>
 80089f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089f4:	07da      	lsls	r2, r3, #31
 80089f6:	4605      	mov	r5, r0
 80089f8:	d4e4      	bmi.n	80089c4 <_fflush_r+0xc>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	059b      	lsls	r3, r3, #22
 80089fe:	d4e1      	bmi.n	80089c4 <_fflush_r+0xc>
 8008a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a02:	f7fd facd 	bl	8005fa0 <__retarget_lock_release_recursive>
 8008a06:	e7dd      	b.n	80089c4 <_fflush_r+0xc>

08008a08 <__swbuf_r>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	460e      	mov	r6, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	4605      	mov	r5, r0
 8008a10:	b118      	cbz	r0, 8008a1a <__swbuf_r+0x12>
 8008a12:	6a03      	ldr	r3, [r0, #32]
 8008a14:	b90b      	cbnz	r3, 8008a1a <__swbuf_r+0x12>
 8008a16:	f7fd f989 	bl	8005d2c <__sinit>
 8008a1a:	69a3      	ldr	r3, [r4, #24]
 8008a1c:	60a3      	str	r3, [r4, #8]
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	071a      	lsls	r2, r3, #28
 8008a22:	d501      	bpl.n	8008a28 <__swbuf_r+0x20>
 8008a24:	6923      	ldr	r3, [r4, #16]
 8008a26:	b943      	cbnz	r3, 8008a3a <__swbuf_r+0x32>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f000 f82a 	bl	8008a84 <__swsetup_r>
 8008a30:	b118      	cbz	r0, 8008a3a <__swbuf_r+0x32>
 8008a32:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008a36:	4638      	mov	r0, r7
 8008a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	6922      	ldr	r2, [r4, #16]
 8008a3e:	1a98      	subs	r0, r3, r2
 8008a40:	6963      	ldr	r3, [r4, #20]
 8008a42:	b2f6      	uxtb	r6, r6
 8008a44:	4283      	cmp	r3, r0
 8008a46:	4637      	mov	r7, r6
 8008a48:	dc05      	bgt.n	8008a56 <__swbuf_r+0x4e>
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f7ff ffb3 	bl	80089b8 <_fflush_r>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d1ed      	bne.n	8008a32 <__swbuf_r+0x2a>
 8008a56:	68a3      	ldr	r3, [r4, #8]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	60a3      	str	r3, [r4, #8]
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	6022      	str	r2, [r4, #0]
 8008a62:	701e      	strb	r6, [r3, #0]
 8008a64:	6962      	ldr	r2, [r4, #20]
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d004      	beq.n	8008a76 <__swbuf_r+0x6e>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	07db      	lsls	r3, r3, #31
 8008a70:	d5e1      	bpl.n	8008a36 <__swbuf_r+0x2e>
 8008a72:	2e0a      	cmp	r6, #10
 8008a74:	d1df      	bne.n	8008a36 <__swbuf_r+0x2e>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f7ff ff9d 	bl	80089b8 <_fflush_r>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d0d9      	beq.n	8008a36 <__swbuf_r+0x2e>
 8008a82:	e7d6      	b.n	8008a32 <__swbuf_r+0x2a>

08008a84 <__swsetup_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4b29      	ldr	r3, [pc, #164]	@ (8008b2c <__swsetup_r+0xa8>)
 8008a88:	4605      	mov	r5, r0
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	b118      	cbz	r0, 8008a98 <__swsetup_r+0x14>
 8008a90:	6a03      	ldr	r3, [r0, #32]
 8008a92:	b90b      	cbnz	r3, 8008a98 <__swsetup_r+0x14>
 8008a94:	f7fd f94a 	bl	8005d2c <__sinit>
 8008a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9c:	0719      	lsls	r1, r3, #28
 8008a9e:	d422      	bmi.n	8008ae6 <__swsetup_r+0x62>
 8008aa0:	06da      	lsls	r2, r3, #27
 8008aa2:	d407      	bmi.n	8008ab4 <__swsetup_r+0x30>
 8008aa4:	2209      	movs	r2, #9
 8008aa6:	602a      	str	r2, [r5, #0]
 8008aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aac:	81a3      	strh	r3, [r4, #12]
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ab2:	e033      	b.n	8008b1c <__swsetup_r+0x98>
 8008ab4:	0758      	lsls	r0, r3, #29
 8008ab6:	d512      	bpl.n	8008ade <__swsetup_r+0x5a>
 8008ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aba:	b141      	cbz	r1, 8008ace <__swsetup_r+0x4a>
 8008abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ac0:	4299      	cmp	r1, r3
 8008ac2:	d002      	beq.n	8008aca <__swsetup_r+0x46>
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f7fe f8cf 	bl	8006c68 <_free_r>
 8008aca:	2300      	movs	r3, #0
 8008acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ad4:	81a3      	strh	r3, [r4, #12]
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	6063      	str	r3, [r4, #4]
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	f043 0308 	orr.w	r3, r3, #8
 8008ae4:	81a3      	strh	r3, [r4, #12]
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	b94b      	cbnz	r3, 8008afe <__swsetup_r+0x7a>
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008af4:	d003      	beq.n	8008afe <__swsetup_r+0x7a>
 8008af6:	4621      	mov	r1, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f000 fc0f 	bl	800931c <__smakebuf_r>
 8008afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b02:	f013 0201 	ands.w	r2, r3, #1
 8008b06:	d00a      	beq.n	8008b1e <__swsetup_r+0x9a>
 8008b08:	2200      	movs	r2, #0
 8008b0a:	60a2      	str	r2, [r4, #8]
 8008b0c:	6962      	ldr	r2, [r4, #20]
 8008b0e:	4252      	negs	r2, r2
 8008b10:	61a2      	str	r2, [r4, #24]
 8008b12:	6922      	ldr	r2, [r4, #16]
 8008b14:	b942      	cbnz	r2, 8008b28 <__swsetup_r+0xa4>
 8008b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b1a:	d1c5      	bne.n	8008aa8 <__swsetup_r+0x24>
 8008b1c:	bd38      	pop	{r3, r4, r5, pc}
 8008b1e:	0799      	lsls	r1, r3, #30
 8008b20:	bf58      	it	pl
 8008b22:	6962      	ldrpl	r2, [r4, #20]
 8008b24:	60a2      	str	r2, [r4, #8]
 8008b26:	e7f4      	b.n	8008b12 <__swsetup_r+0x8e>
 8008b28:	2000      	movs	r0, #0
 8008b2a:	e7f7      	b.n	8008b1c <__swsetup_r+0x98>
 8008b2c:	200006ac 	.word	0x200006ac

08008b30 <memmove>:
 8008b30:	4288      	cmp	r0, r1
 8008b32:	b510      	push	{r4, lr}
 8008b34:	eb01 0402 	add.w	r4, r1, r2
 8008b38:	d902      	bls.n	8008b40 <memmove+0x10>
 8008b3a:	4284      	cmp	r4, r0
 8008b3c:	4623      	mov	r3, r4
 8008b3e:	d807      	bhi.n	8008b50 <memmove+0x20>
 8008b40:	1e43      	subs	r3, r0, #1
 8008b42:	42a1      	cmp	r1, r4
 8008b44:	d008      	beq.n	8008b58 <memmove+0x28>
 8008b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b4e:	e7f8      	b.n	8008b42 <memmove+0x12>
 8008b50:	4402      	add	r2, r0
 8008b52:	4601      	mov	r1, r0
 8008b54:	428a      	cmp	r2, r1
 8008b56:	d100      	bne.n	8008b5a <memmove+0x2a>
 8008b58:	bd10      	pop	{r4, pc}
 8008b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b62:	e7f7      	b.n	8008b54 <memmove+0x24>

08008b64 <strncmp>:
 8008b64:	b510      	push	{r4, lr}
 8008b66:	b16a      	cbz	r2, 8008b84 <strncmp+0x20>
 8008b68:	3901      	subs	r1, #1
 8008b6a:	1884      	adds	r4, r0, r2
 8008b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d103      	bne.n	8008b80 <strncmp+0x1c>
 8008b78:	42a0      	cmp	r0, r4
 8008b7a:	d001      	beq.n	8008b80 <strncmp+0x1c>
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	d1f5      	bne.n	8008b6c <strncmp+0x8>
 8008b80:	1ad0      	subs	r0, r2, r3
 8008b82:	bd10      	pop	{r4, pc}
 8008b84:	4610      	mov	r0, r2
 8008b86:	e7fc      	b.n	8008b82 <strncmp+0x1e>

08008b88 <nan>:
 8008b88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008b90 <nan+0x8>
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	00000000 	.word	0x00000000
 8008b94:	7ff80000 	.word	0x7ff80000

08008b98 <__assert_func>:
 8008b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b9a:	4614      	mov	r4, r2
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	4b09      	ldr	r3, [pc, #36]	@ (8008bc4 <__assert_func+0x2c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	68d8      	ldr	r0, [r3, #12]
 8008ba6:	b954      	cbnz	r4, 8008bbe <__assert_func+0x26>
 8008ba8:	4b07      	ldr	r3, [pc, #28]	@ (8008bc8 <__assert_func+0x30>)
 8008baa:	461c      	mov	r4, r3
 8008bac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bb0:	9100      	str	r1, [sp, #0]
 8008bb2:	462b      	mov	r3, r5
 8008bb4:	4905      	ldr	r1, [pc, #20]	@ (8008bcc <__assert_func+0x34>)
 8008bb6:	f000 fb79 	bl	80092ac <fiprintf>
 8008bba:	f000 fc0d 	bl	80093d8 <abort>
 8008bbe:	4b04      	ldr	r3, [pc, #16]	@ (8008bd0 <__assert_func+0x38>)
 8008bc0:	e7f4      	b.n	8008bac <__assert_func+0x14>
 8008bc2:	bf00      	nop
 8008bc4:	200006ac 	.word	0x200006ac
 8008bc8:	08009f35 	.word	0x08009f35
 8008bcc:	08009f07 	.word	0x08009f07
 8008bd0:	08009efa 	.word	0x08009efa

08008bd4 <_calloc_r>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	fba1 5402 	umull	r5, r4, r1, r2
 8008bda:	b93c      	cbnz	r4, 8008bec <_calloc_r+0x18>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	f7fc f8f3 	bl	8004dc8 <_malloc_r>
 8008be2:	4606      	mov	r6, r0
 8008be4:	b928      	cbnz	r0, 8008bf2 <_calloc_r+0x1e>
 8008be6:	2600      	movs	r6, #0
 8008be8:	4630      	mov	r0, r6
 8008bea:	bd70      	pop	{r4, r5, r6, pc}
 8008bec:	220c      	movs	r2, #12
 8008bee:	6002      	str	r2, [r0, #0]
 8008bf0:	e7f9      	b.n	8008be6 <_calloc_r+0x12>
 8008bf2:	462a      	mov	r2, r5
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	f7fd f944 	bl	8005e82 <memset>
 8008bfa:	e7f5      	b.n	8008be8 <_calloc_r+0x14>

08008bfc <rshift>:
 8008bfc:	6903      	ldr	r3, [r0, #16]
 8008bfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c0a:	f100 0414 	add.w	r4, r0, #20
 8008c0e:	dd45      	ble.n	8008c9c <rshift+0xa0>
 8008c10:	f011 011f 	ands.w	r1, r1, #31
 8008c14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c1c:	d10c      	bne.n	8008c38 <rshift+0x3c>
 8008c1e:	f100 0710 	add.w	r7, r0, #16
 8008c22:	4629      	mov	r1, r5
 8008c24:	42b1      	cmp	r1, r6
 8008c26:	d334      	bcc.n	8008c92 <rshift+0x96>
 8008c28:	1a9b      	subs	r3, r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	1eea      	subs	r2, r5, #3
 8008c2e:	4296      	cmp	r6, r2
 8008c30:	bf38      	it	cc
 8008c32:	2300      	movcc	r3, #0
 8008c34:	4423      	add	r3, r4
 8008c36:	e015      	b.n	8008c64 <rshift+0x68>
 8008c38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c3c:	f1c1 0820 	rsb	r8, r1, #32
 8008c40:	40cf      	lsrs	r7, r1
 8008c42:	f105 0e04 	add.w	lr, r5, #4
 8008c46:	46a1      	mov	r9, r4
 8008c48:	4576      	cmp	r6, lr
 8008c4a:	46f4      	mov	ip, lr
 8008c4c:	d815      	bhi.n	8008c7a <rshift+0x7e>
 8008c4e:	1a9a      	subs	r2, r3, r2
 8008c50:	0092      	lsls	r2, r2, #2
 8008c52:	3a04      	subs	r2, #4
 8008c54:	3501      	adds	r5, #1
 8008c56:	42ae      	cmp	r6, r5
 8008c58:	bf38      	it	cc
 8008c5a:	2200      	movcc	r2, #0
 8008c5c:	18a3      	adds	r3, r4, r2
 8008c5e:	50a7      	str	r7, [r4, r2]
 8008c60:	b107      	cbz	r7, 8008c64 <rshift+0x68>
 8008c62:	3304      	adds	r3, #4
 8008c64:	1b1a      	subs	r2, r3, r4
 8008c66:	42a3      	cmp	r3, r4
 8008c68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c6c:	bf08      	it	eq
 8008c6e:	2300      	moveq	r3, #0
 8008c70:	6102      	str	r2, [r0, #16]
 8008c72:	bf08      	it	eq
 8008c74:	6143      	streq	r3, [r0, #20]
 8008c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c7a:	f8dc c000 	ldr.w	ip, [ip]
 8008c7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c82:	ea4c 0707 	orr.w	r7, ip, r7
 8008c86:	f849 7b04 	str.w	r7, [r9], #4
 8008c8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c8e:	40cf      	lsrs	r7, r1
 8008c90:	e7da      	b.n	8008c48 <rshift+0x4c>
 8008c92:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c96:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c9a:	e7c3      	b.n	8008c24 <rshift+0x28>
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	e7e1      	b.n	8008c64 <rshift+0x68>

08008ca0 <__hexdig_fun>:
 8008ca0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008ca4:	2b09      	cmp	r3, #9
 8008ca6:	d802      	bhi.n	8008cae <__hexdig_fun+0xe>
 8008ca8:	3820      	subs	r0, #32
 8008caa:	b2c0      	uxtb	r0, r0
 8008cac:	4770      	bx	lr
 8008cae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008cb2:	2b05      	cmp	r3, #5
 8008cb4:	d801      	bhi.n	8008cba <__hexdig_fun+0x1a>
 8008cb6:	3847      	subs	r0, #71	@ 0x47
 8008cb8:	e7f7      	b.n	8008caa <__hexdig_fun+0xa>
 8008cba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008cbe:	2b05      	cmp	r3, #5
 8008cc0:	d801      	bhi.n	8008cc6 <__hexdig_fun+0x26>
 8008cc2:	3827      	subs	r0, #39	@ 0x27
 8008cc4:	e7f1      	b.n	8008caa <__hexdig_fun+0xa>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	4770      	bx	lr
	...

08008ccc <__gethex>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	468a      	mov	sl, r1
 8008cd4:	9302      	str	r3, [sp, #8]
 8008cd6:	680b      	ldr	r3, [r1, #0]
 8008cd8:	9001      	str	r0, [sp, #4]
 8008cda:	4690      	mov	r8, r2
 8008cdc:	1c9c      	adds	r4, r3, #2
 8008cde:	46a1      	mov	r9, r4
 8008ce0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008ce4:	2830      	cmp	r0, #48	@ 0x30
 8008ce6:	d0fa      	beq.n	8008cde <__gethex+0x12>
 8008ce8:	eba9 0303 	sub.w	r3, r9, r3
 8008cec:	f1a3 0b02 	sub.w	fp, r3, #2
 8008cf0:	f7ff ffd6 	bl	8008ca0 <__hexdig_fun>
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d168      	bne.n	8008dcc <__gethex+0x100>
 8008cfa:	49a0      	ldr	r1, [pc, #640]	@ (8008f7c <__gethex+0x2b0>)
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	4648      	mov	r0, r9
 8008d00:	f7ff ff30 	bl	8008b64 <strncmp>
 8008d04:	4607      	mov	r7, r0
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d167      	bne.n	8008dda <__gethex+0x10e>
 8008d0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008d0e:	4626      	mov	r6, r4
 8008d10:	f7ff ffc6 	bl	8008ca0 <__hexdig_fun>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d062      	beq.n	8008dde <__gethex+0x112>
 8008d18:	4623      	mov	r3, r4
 8008d1a:	7818      	ldrb	r0, [r3, #0]
 8008d1c:	2830      	cmp	r0, #48	@ 0x30
 8008d1e:	4699      	mov	r9, r3
 8008d20:	f103 0301 	add.w	r3, r3, #1
 8008d24:	d0f9      	beq.n	8008d1a <__gethex+0x4e>
 8008d26:	f7ff ffbb 	bl	8008ca0 <__hexdig_fun>
 8008d2a:	fab0 f580 	clz	r5, r0
 8008d2e:	096d      	lsrs	r5, r5, #5
 8008d30:	f04f 0b01 	mov.w	fp, #1
 8008d34:	464a      	mov	r2, r9
 8008d36:	4616      	mov	r6, r2
 8008d38:	3201      	adds	r2, #1
 8008d3a:	7830      	ldrb	r0, [r6, #0]
 8008d3c:	f7ff ffb0 	bl	8008ca0 <__hexdig_fun>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d1f8      	bne.n	8008d36 <__gethex+0x6a>
 8008d44:	498d      	ldr	r1, [pc, #564]	@ (8008f7c <__gethex+0x2b0>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7ff ff0b 	bl	8008b64 <strncmp>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d13f      	bne.n	8008dd2 <__gethex+0x106>
 8008d52:	b944      	cbnz	r4, 8008d66 <__gethex+0x9a>
 8008d54:	1c74      	adds	r4, r6, #1
 8008d56:	4622      	mov	r2, r4
 8008d58:	4616      	mov	r6, r2
 8008d5a:	3201      	adds	r2, #1
 8008d5c:	7830      	ldrb	r0, [r6, #0]
 8008d5e:	f7ff ff9f 	bl	8008ca0 <__hexdig_fun>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d1f8      	bne.n	8008d58 <__gethex+0x8c>
 8008d66:	1ba4      	subs	r4, r4, r6
 8008d68:	00a7      	lsls	r7, r4, #2
 8008d6a:	7833      	ldrb	r3, [r6, #0]
 8008d6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008d70:	2b50      	cmp	r3, #80	@ 0x50
 8008d72:	d13e      	bne.n	8008df2 <__gethex+0x126>
 8008d74:	7873      	ldrb	r3, [r6, #1]
 8008d76:	2b2b      	cmp	r3, #43	@ 0x2b
 8008d78:	d033      	beq.n	8008de2 <__gethex+0x116>
 8008d7a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008d7c:	d034      	beq.n	8008de8 <__gethex+0x11c>
 8008d7e:	1c71      	adds	r1, r6, #1
 8008d80:	2400      	movs	r4, #0
 8008d82:	7808      	ldrb	r0, [r1, #0]
 8008d84:	f7ff ff8c 	bl	8008ca0 <__hexdig_fun>
 8008d88:	1e43      	subs	r3, r0, #1
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b18      	cmp	r3, #24
 8008d8e:	d830      	bhi.n	8008df2 <__gethex+0x126>
 8008d90:	f1a0 0210 	sub.w	r2, r0, #16
 8008d94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d98:	f7ff ff82 	bl	8008ca0 <__hexdig_fun>
 8008d9c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008da0:	fa5f fc8c 	uxtb.w	ip, ip
 8008da4:	f1bc 0f18 	cmp.w	ip, #24
 8008da8:	f04f 030a 	mov.w	r3, #10
 8008dac:	d91e      	bls.n	8008dec <__gethex+0x120>
 8008dae:	b104      	cbz	r4, 8008db2 <__gethex+0xe6>
 8008db0:	4252      	negs	r2, r2
 8008db2:	4417      	add	r7, r2
 8008db4:	f8ca 1000 	str.w	r1, [sl]
 8008db8:	b1ed      	cbz	r5, 8008df6 <__gethex+0x12a>
 8008dba:	f1bb 0f00 	cmp.w	fp, #0
 8008dbe:	bf0c      	ite	eq
 8008dc0:	2506      	moveq	r5, #6
 8008dc2:	2500      	movne	r5, #0
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	b005      	add	sp, #20
 8008dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dcc:	2500      	movs	r5, #0
 8008dce:	462c      	mov	r4, r5
 8008dd0:	e7b0      	b.n	8008d34 <__gethex+0x68>
 8008dd2:	2c00      	cmp	r4, #0
 8008dd4:	d1c7      	bne.n	8008d66 <__gethex+0x9a>
 8008dd6:	4627      	mov	r7, r4
 8008dd8:	e7c7      	b.n	8008d6a <__gethex+0x9e>
 8008dda:	464e      	mov	r6, r9
 8008ddc:	462f      	mov	r7, r5
 8008dde:	2501      	movs	r5, #1
 8008de0:	e7c3      	b.n	8008d6a <__gethex+0x9e>
 8008de2:	2400      	movs	r4, #0
 8008de4:	1cb1      	adds	r1, r6, #2
 8008de6:	e7cc      	b.n	8008d82 <__gethex+0xb6>
 8008de8:	2401      	movs	r4, #1
 8008dea:	e7fb      	b.n	8008de4 <__gethex+0x118>
 8008dec:	fb03 0002 	mla	r0, r3, r2, r0
 8008df0:	e7ce      	b.n	8008d90 <__gethex+0xc4>
 8008df2:	4631      	mov	r1, r6
 8008df4:	e7de      	b.n	8008db4 <__gethex+0xe8>
 8008df6:	eba6 0309 	sub.w	r3, r6, r9
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	2b07      	cmp	r3, #7
 8008e00:	dc0a      	bgt.n	8008e18 <__gethex+0x14c>
 8008e02:	9801      	ldr	r0, [sp, #4]
 8008e04:	f7fd ff7a 	bl	8006cfc <_Balloc>
 8008e08:	4604      	mov	r4, r0
 8008e0a:	b940      	cbnz	r0, 8008e1e <__gethex+0x152>
 8008e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8008f80 <__gethex+0x2b4>)
 8008e0e:	4602      	mov	r2, r0
 8008e10:	21e4      	movs	r1, #228	@ 0xe4
 8008e12:	485c      	ldr	r0, [pc, #368]	@ (8008f84 <__gethex+0x2b8>)
 8008e14:	f7ff fec0 	bl	8008b98 <__assert_func>
 8008e18:	3101      	adds	r1, #1
 8008e1a:	105b      	asrs	r3, r3, #1
 8008e1c:	e7ef      	b.n	8008dfe <__gethex+0x132>
 8008e1e:	f100 0a14 	add.w	sl, r0, #20
 8008e22:	2300      	movs	r3, #0
 8008e24:	4655      	mov	r5, sl
 8008e26:	469b      	mov	fp, r3
 8008e28:	45b1      	cmp	r9, r6
 8008e2a:	d337      	bcc.n	8008e9c <__gethex+0x1d0>
 8008e2c:	f845 bb04 	str.w	fp, [r5], #4
 8008e30:	eba5 050a 	sub.w	r5, r5, sl
 8008e34:	10ad      	asrs	r5, r5, #2
 8008e36:	6125      	str	r5, [r4, #16]
 8008e38:	4658      	mov	r0, fp
 8008e3a:	f7fe f851 	bl	8006ee0 <__hi0bits>
 8008e3e:	016d      	lsls	r5, r5, #5
 8008e40:	f8d8 6000 	ldr.w	r6, [r8]
 8008e44:	1a2d      	subs	r5, r5, r0
 8008e46:	42b5      	cmp	r5, r6
 8008e48:	dd54      	ble.n	8008ef4 <__gethex+0x228>
 8008e4a:	1bad      	subs	r5, r5, r6
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f7fe fbe5 	bl	800761e <__any_on>
 8008e54:	4681      	mov	r9, r0
 8008e56:	b178      	cbz	r0, 8008e78 <__gethex+0x1ac>
 8008e58:	1e6b      	subs	r3, r5, #1
 8008e5a:	1159      	asrs	r1, r3, #5
 8008e5c:	f003 021f 	and.w	r2, r3, #31
 8008e60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e64:	f04f 0901 	mov.w	r9, #1
 8008e68:	fa09 f202 	lsl.w	r2, r9, r2
 8008e6c:	420a      	tst	r2, r1
 8008e6e:	d003      	beq.n	8008e78 <__gethex+0x1ac>
 8008e70:	454b      	cmp	r3, r9
 8008e72:	dc36      	bgt.n	8008ee2 <__gethex+0x216>
 8008e74:	f04f 0902 	mov.w	r9, #2
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f7ff febe 	bl	8008bfc <rshift>
 8008e80:	442f      	add	r7, r5
 8008e82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e86:	42bb      	cmp	r3, r7
 8008e88:	da42      	bge.n	8008f10 <__gethex+0x244>
 8008e8a:	9801      	ldr	r0, [sp, #4]
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	f7fd ff75 	bl	8006d7c <_Bfree>
 8008e92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e94:	2300      	movs	r3, #0
 8008e96:	6013      	str	r3, [r2, #0]
 8008e98:	25a3      	movs	r5, #163	@ 0xa3
 8008e9a:	e793      	b.n	8008dc4 <__gethex+0xf8>
 8008e9c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008ea0:	2a2e      	cmp	r2, #46	@ 0x2e
 8008ea2:	d012      	beq.n	8008eca <__gethex+0x1fe>
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d104      	bne.n	8008eb2 <__gethex+0x1e6>
 8008ea8:	f845 bb04 	str.w	fp, [r5], #4
 8008eac:	f04f 0b00 	mov.w	fp, #0
 8008eb0:	465b      	mov	r3, fp
 8008eb2:	7830      	ldrb	r0, [r6, #0]
 8008eb4:	9303      	str	r3, [sp, #12]
 8008eb6:	f7ff fef3 	bl	8008ca0 <__hexdig_fun>
 8008eba:	9b03      	ldr	r3, [sp, #12]
 8008ebc:	f000 000f 	and.w	r0, r0, #15
 8008ec0:	4098      	lsls	r0, r3
 8008ec2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	e7ae      	b.n	8008e28 <__gethex+0x15c>
 8008eca:	45b1      	cmp	r9, r6
 8008ecc:	d8ea      	bhi.n	8008ea4 <__gethex+0x1d8>
 8008ece:	492b      	ldr	r1, [pc, #172]	@ (8008f7c <__gethex+0x2b0>)
 8008ed0:	9303      	str	r3, [sp, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f7ff fe45 	bl	8008b64 <strncmp>
 8008eda:	9b03      	ldr	r3, [sp, #12]
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d1e1      	bne.n	8008ea4 <__gethex+0x1d8>
 8008ee0:	e7a2      	b.n	8008e28 <__gethex+0x15c>
 8008ee2:	1ea9      	subs	r1, r5, #2
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f7fe fb9a 	bl	800761e <__any_on>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d0c2      	beq.n	8008e74 <__gethex+0x1a8>
 8008eee:	f04f 0903 	mov.w	r9, #3
 8008ef2:	e7c1      	b.n	8008e78 <__gethex+0x1ac>
 8008ef4:	da09      	bge.n	8008f0a <__gethex+0x23e>
 8008ef6:	1b75      	subs	r5, r6, r5
 8008ef8:	4621      	mov	r1, r4
 8008efa:	9801      	ldr	r0, [sp, #4]
 8008efc:	462a      	mov	r2, r5
 8008efe:	f7fe f955 	bl	80071ac <__lshift>
 8008f02:	1b7f      	subs	r7, r7, r5
 8008f04:	4604      	mov	r4, r0
 8008f06:	f100 0a14 	add.w	sl, r0, #20
 8008f0a:	f04f 0900 	mov.w	r9, #0
 8008f0e:	e7b8      	b.n	8008e82 <__gethex+0x1b6>
 8008f10:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f14:	42bd      	cmp	r5, r7
 8008f16:	dd6f      	ble.n	8008ff8 <__gethex+0x32c>
 8008f18:	1bed      	subs	r5, r5, r7
 8008f1a:	42ae      	cmp	r6, r5
 8008f1c:	dc34      	bgt.n	8008f88 <__gethex+0x2bc>
 8008f1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d022      	beq.n	8008f6c <__gethex+0x2a0>
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d024      	beq.n	8008f74 <__gethex+0x2a8>
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d115      	bne.n	8008f5a <__gethex+0x28e>
 8008f2e:	42ae      	cmp	r6, r5
 8008f30:	d113      	bne.n	8008f5a <__gethex+0x28e>
 8008f32:	2e01      	cmp	r6, #1
 8008f34:	d10b      	bne.n	8008f4e <__gethex+0x282>
 8008f36:	9a02      	ldr	r2, [sp, #8]
 8008f38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	2301      	movs	r3, #1
 8008f40:	6123      	str	r3, [r4, #16]
 8008f42:	f8ca 3000 	str.w	r3, [sl]
 8008f46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f48:	2562      	movs	r5, #98	@ 0x62
 8008f4a:	601c      	str	r4, [r3, #0]
 8008f4c:	e73a      	b.n	8008dc4 <__gethex+0xf8>
 8008f4e:	1e71      	subs	r1, r6, #1
 8008f50:	4620      	mov	r0, r4
 8008f52:	f7fe fb64 	bl	800761e <__any_on>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d1ed      	bne.n	8008f36 <__gethex+0x26a>
 8008f5a:	9801      	ldr	r0, [sp, #4]
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	f7fd ff0d 	bl	8006d7c <_Bfree>
 8008f62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f64:	2300      	movs	r3, #0
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	2550      	movs	r5, #80	@ 0x50
 8008f6a:	e72b      	b.n	8008dc4 <__gethex+0xf8>
 8008f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1f3      	bne.n	8008f5a <__gethex+0x28e>
 8008f72:	e7e0      	b.n	8008f36 <__gethex+0x26a>
 8008f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1dd      	bne.n	8008f36 <__gethex+0x26a>
 8008f7a:	e7ee      	b.n	8008f5a <__gethex+0x28e>
 8008f7c:	08009d88 	.word	0x08009d88
 8008f80:	08009c1d 	.word	0x08009c1d
 8008f84:	08009f36 	.word	0x08009f36
 8008f88:	1e6f      	subs	r7, r5, #1
 8008f8a:	f1b9 0f00 	cmp.w	r9, #0
 8008f8e:	d130      	bne.n	8008ff2 <__gethex+0x326>
 8008f90:	b127      	cbz	r7, 8008f9c <__gethex+0x2d0>
 8008f92:	4639      	mov	r1, r7
 8008f94:	4620      	mov	r0, r4
 8008f96:	f7fe fb42 	bl	800761e <__any_on>
 8008f9a:	4681      	mov	r9, r0
 8008f9c:	117a      	asrs	r2, r7, #5
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008fa4:	f007 071f 	and.w	r7, r7, #31
 8008fa8:	40bb      	lsls	r3, r7
 8008faa:	4213      	tst	r3, r2
 8008fac:	4629      	mov	r1, r5
 8008fae:	4620      	mov	r0, r4
 8008fb0:	bf18      	it	ne
 8008fb2:	f049 0902 	orrne.w	r9, r9, #2
 8008fb6:	f7ff fe21 	bl	8008bfc <rshift>
 8008fba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008fbe:	1b76      	subs	r6, r6, r5
 8008fc0:	2502      	movs	r5, #2
 8008fc2:	f1b9 0f00 	cmp.w	r9, #0
 8008fc6:	d047      	beq.n	8009058 <__gethex+0x38c>
 8008fc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d015      	beq.n	8008ffc <__gethex+0x330>
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d017      	beq.n	8009004 <__gethex+0x338>
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d109      	bne.n	8008fec <__gethex+0x320>
 8008fd8:	f019 0f02 	tst.w	r9, #2
 8008fdc:	d006      	beq.n	8008fec <__gethex+0x320>
 8008fde:	f8da 3000 	ldr.w	r3, [sl]
 8008fe2:	ea49 0903 	orr.w	r9, r9, r3
 8008fe6:	f019 0f01 	tst.w	r9, #1
 8008fea:	d10e      	bne.n	800900a <__gethex+0x33e>
 8008fec:	f045 0510 	orr.w	r5, r5, #16
 8008ff0:	e032      	b.n	8009058 <__gethex+0x38c>
 8008ff2:	f04f 0901 	mov.w	r9, #1
 8008ff6:	e7d1      	b.n	8008f9c <__gethex+0x2d0>
 8008ff8:	2501      	movs	r5, #1
 8008ffa:	e7e2      	b.n	8008fc2 <__gethex+0x2f6>
 8008ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ffe:	f1c3 0301 	rsb	r3, r3, #1
 8009002:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d0f0      	beq.n	8008fec <__gethex+0x320>
 800900a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800900e:	f104 0314 	add.w	r3, r4, #20
 8009012:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009016:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800901a:	f04f 0c00 	mov.w	ip, #0
 800901e:	4618      	mov	r0, r3
 8009020:	f853 2b04 	ldr.w	r2, [r3], #4
 8009024:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009028:	d01b      	beq.n	8009062 <__gethex+0x396>
 800902a:	3201      	adds	r2, #1
 800902c:	6002      	str	r2, [r0, #0]
 800902e:	2d02      	cmp	r5, #2
 8009030:	f104 0314 	add.w	r3, r4, #20
 8009034:	d13c      	bne.n	80090b0 <__gethex+0x3e4>
 8009036:	f8d8 2000 	ldr.w	r2, [r8]
 800903a:	3a01      	subs	r2, #1
 800903c:	42b2      	cmp	r2, r6
 800903e:	d109      	bne.n	8009054 <__gethex+0x388>
 8009040:	1171      	asrs	r1, r6, #5
 8009042:	2201      	movs	r2, #1
 8009044:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009048:	f006 061f 	and.w	r6, r6, #31
 800904c:	fa02 f606 	lsl.w	r6, r2, r6
 8009050:	421e      	tst	r6, r3
 8009052:	d13a      	bne.n	80090ca <__gethex+0x3fe>
 8009054:	f045 0520 	orr.w	r5, r5, #32
 8009058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800905a:	601c      	str	r4, [r3, #0]
 800905c:	9b02      	ldr	r3, [sp, #8]
 800905e:	601f      	str	r7, [r3, #0]
 8009060:	e6b0      	b.n	8008dc4 <__gethex+0xf8>
 8009062:	4299      	cmp	r1, r3
 8009064:	f843 cc04 	str.w	ip, [r3, #-4]
 8009068:	d8d9      	bhi.n	800901e <__gethex+0x352>
 800906a:	68a3      	ldr	r3, [r4, #8]
 800906c:	459b      	cmp	fp, r3
 800906e:	db17      	blt.n	80090a0 <__gethex+0x3d4>
 8009070:	6861      	ldr	r1, [r4, #4]
 8009072:	9801      	ldr	r0, [sp, #4]
 8009074:	3101      	adds	r1, #1
 8009076:	f7fd fe41 	bl	8006cfc <_Balloc>
 800907a:	4681      	mov	r9, r0
 800907c:	b918      	cbnz	r0, 8009086 <__gethex+0x3ba>
 800907e:	4b1a      	ldr	r3, [pc, #104]	@ (80090e8 <__gethex+0x41c>)
 8009080:	4602      	mov	r2, r0
 8009082:	2184      	movs	r1, #132	@ 0x84
 8009084:	e6c5      	b.n	8008e12 <__gethex+0x146>
 8009086:	6922      	ldr	r2, [r4, #16]
 8009088:	3202      	adds	r2, #2
 800908a:	f104 010c 	add.w	r1, r4, #12
 800908e:	0092      	lsls	r2, r2, #2
 8009090:	300c      	adds	r0, #12
 8009092:	f7fc ff86 	bl	8005fa2 <memcpy>
 8009096:	4621      	mov	r1, r4
 8009098:	9801      	ldr	r0, [sp, #4]
 800909a:	f7fd fe6f 	bl	8006d7c <_Bfree>
 800909e:	464c      	mov	r4, r9
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090a8:	6122      	str	r2, [r4, #16]
 80090aa:	2201      	movs	r2, #1
 80090ac:	615a      	str	r2, [r3, #20]
 80090ae:	e7be      	b.n	800902e <__gethex+0x362>
 80090b0:	6922      	ldr	r2, [r4, #16]
 80090b2:	455a      	cmp	r2, fp
 80090b4:	dd0b      	ble.n	80090ce <__gethex+0x402>
 80090b6:	2101      	movs	r1, #1
 80090b8:	4620      	mov	r0, r4
 80090ba:	f7ff fd9f 	bl	8008bfc <rshift>
 80090be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090c2:	3701      	adds	r7, #1
 80090c4:	42bb      	cmp	r3, r7
 80090c6:	f6ff aee0 	blt.w	8008e8a <__gethex+0x1be>
 80090ca:	2501      	movs	r5, #1
 80090cc:	e7c2      	b.n	8009054 <__gethex+0x388>
 80090ce:	f016 061f 	ands.w	r6, r6, #31
 80090d2:	d0fa      	beq.n	80090ca <__gethex+0x3fe>
 80090d4:	4453      	add	r3, sl
 80090d6:	f1c6 0620 	rsb	r6, r6, #32
 80090da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090de:	f7fd feff 	bl	8006ee0 <__hi0bits>
 80090e2:	42b0      	cmp	r0, r6
 80090e4:	dbe7      	blt.n	80090b6 <__gethex+0x3ea>
 80090e6:	e7f0      	b.n	80090ca <__gethex+0x3fe>
 80090e8:	08009c1d 	.word	0x08009c1d

080090ec <L_shift>:
 80090ec:	f1c2 0208 	rsb	r2, r2, #8
 80090f0:	0092      	lsls	r2, r2, #2
 80090f2:	b570      	push	{r4, r5, r6, lr}
 80090f4:	f1c2 0620 	rsb	r6, r2, #32
 80090f8:	6843      	ldr	r3, [r0, #4]
 80090fa:	6804      	ldr	r4, [r0, #0]
 80090fc:	fa03 f506 	lsl.w	r5, r3, r6
 8009100:	432c      	orrs	r4, r5
 8009102:	40d3      	lsrs	r3, r2
 8009104:	6004      	str	r4, [r0, #0]
 8009106:	f840 3f04 	str.w	r3, [r0, #4]!
 800910a:	4288      	cmp	r0, r1
 800910c:	d3f4      	bcc.n	80090f8 <L_shift+0xc>
 800910e:	bd70      	pop	{r4, r5, r6, pc}

08009110 <__match>:
 8009110:	b530      	push	{r4, r5, lr}
 8009112:	6803      	ldr	r3, [r0, #0]
 8009114:	3301      	adds	r3, #1
 8009116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800911a:	b914      	cbnz	r4, 8009122 <__match+0x12>
 800911c:	6003      	str	r3, [r0, #0]
 800911e:	2001      	movs	r0, #1
 8009120:	bd30      	pop	{r4, r5, pc}
 8009122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009126:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800912a:	2d19      	cmp	r5, #25
 800912c:	bf98      	it	ls
 800912e:	3220      	addls	r2, #32
 8009130:	42a2      	cmp	r2, r4
 8009132:	d0f0      	beq.n	8009116 <__match+0x6>
 8009134:	2000      	movs	r0, #0
 8009136:	e7f3      	b.n	8009120 <__match+0x10>

08009138 <__hexnan>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	680b      	ldr	r3, [r1, #0]
 800913e:	6801      	ldr	r1, [r0, #0]
 8009140:	115e      	asrs	r6, r3, #5
 8009142:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009146:	f013 031f 	ands.w	r3, r3, #31
 800914a:	b087      	sub	sp, #28
 800914c:	bf18      	it	ne
 800914e:	3604      	addne	r6, #4
 8009150:	2500      	movs	r5, #0
 8009152:	1f37      	subs	r7, r6, #4
 8009154:	4682      	mov	sl, r0
 8009156:	4690      	mov	r8, r2
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	f846 5c04 	str.w	r5, [r6, #-4]
 800915e:	46b9      	mov	r9, r7
 8009160:	463c      	mov	r4, r7
 8009162:	9502      	str	r5, [sp, #8]
 8009164:	46ab      	mov	fp, r5
 8009166:	784a      	ldrb	r2, [r1, #1]
 8009168:	1c4b      	adds	r3, r1, #1
 800916a:	9303      	str	r3, [sp, #12]
 800916c:	b342      	cbz	r2, 80091c0 <__hexnan+0x88>
 800916e:	4610      	mov	r0, r2
 8009170:	9105      	str	r1, [sp, #20]
 8009172:	9204      	str	r2, [sp, #16]
 8009174:	f7ff fd94 	bl	8008ca0 <__hexdig_fun>
 8009178:	2800      	cmp	r0, #0
 800917a:	d151      	bne.n	8009220 <__hexnan+0xe8>
 800917c:	9a04      	ldr	r2, [sp, #16]
 800917e:	9905      	ldr	r1, [sp, #20]
 8009180:	2a20      	cmp	r2, #32
 8009182:	d818      	bhi.n	80091b6 <__hexnan+0x7e>
 8009184:	9b02      	ldr	r3, [sp, #8]
 8009186:	459b      	cmp	fp, r3
 8009188:	dd13      	ble.n	80091b2 <__hexnan+0x7a>
 800918a:	454c      	cmp	r4, r9
 800918c:	d206      	bcs.n	800919c <__hexnan+0x64>
 800918e:	2d07      	cmp	r5, #7
 8009190:	dc04      	bgt.n	800919c <__hexnan+0x64>
 8009192:	462a      	mov	r2, r5
 8009194:	4649      	mov	r1, r9
 8009196:	4620      	mov	r0, r4
 8009198:	f7ff ffa8 	bl	80090ec <L_shift>
 800919c:	4544      	cmp	r4, r8
 800919e:	d952      	bls.n	8009246 <__hexnan+0x10e>
 80091a0:	2300      	movs	r3, #0
 80091a2:	f1a4 0904 	sub.w	r9, r4, #4
 80091a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80091aa:	f8cd b008 	str.w	fp, [sp, #8]
 80091ae:	464c      	mov	r4, r9
 80091b0:	461d      	mov	r5, r3
 80091b2:	9903      	ldr	r1, [sp, #12]
 80091b4:	e7d7      	b.n	8009166 <__hexnan+0x2e>
 80091b6:	2a29      	cmp	r2, #41	@ 0x29
 80091b8:	d157      	bne.n	800926a <__hexnan+0x132>
 80091ba:	3102      	adds	r1, #2
 80091bc:	f8ca 1000 	str.w	r1, [sl]
 80091c0:	f1bb 0f00 	cmp.w	fp, #0
 80091c4:	d051      	beq.n	800926a <__hexnan+0x132>
 80091c6:	454c      	cmp	r4, r9
 80091c8:	d206      	bcs.n	80091d8 <__hexnan+0xa0>
 80091ca:	2d07      	cmp	r5, #7
 80091cc:	dc04      	bgt.n	80091d8 <__hexnan+0xa0>
 80091ce:	462a      	mov	r2, r5
 80091d0:	4649      	mov	r1, r9
 80091d2:	4620      	mov	r0, r4
 80091d4:	f7ff ff8a 	bl	80090ec <L_shift>
 80091d8:	4544      	cmp	r4, r8
 80091da:	d936      	bls.n	800924a <__hexnan+0x112>
 80091dc:	f1a8 0204 	sub.w	r2, r8, #4
 80091e0:	4623      	mov	r3, r4
 80091e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80091e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80091ea:	429f      	cmp	r7, r3
 80091ec:	d2f9      	bcs.n	80091e2 <__hexnan+0xaa>
 80091ee:	1b3b      	subs	r3, r7, r4
 80091f0:	f023 0303 	bic.w	r3, r3, #3
 80091f4:	3304      	adds	r3, #4
 80091f6:	3401      	adds	r4, #1
 80091f8:	3e03      	subs	r6, #3
 80091fa:	42b4      	cmp	r4, r6
 80091fc:	bf88      	it	hi
 80091fe:	2304      	movhi	r3, #4
 8009200:	4443      	add	r3, r8
 8009202:	2200      	movs	r2, #0
 8009204:	f843 2b04 	str.w	r2, [r3], #4
 8009208:	429f      	cmp	r7, r3
 800920a:	d2fb      	bcs.n	8009204 <__hexnan+0xcc>
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	b91b      	cbnz	r3, 8009218 <__hexnan+0xe0>
 8009210:	4547      	cmp	r7, r8
 8009212:	d128      	bne.n	8009266 <__hexnan+0x12e>
 8009214:	2301      	movs	r3, #1
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	2005      	movs	r0, #5
 800921a:	b007      	add	sp, #28
 800921c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009220:	3501      	adds	r5, #1
 8009222:	2d08      	cmp	r5, #8
 8009224:	f10b 0b01 	add.w	fp, fp, #1
 8009228:	dd06      	ble.n	8009238 <__hexnan+0x100>
 800922a:	4544      	cmp	r4, r8
 800922c:	d9c1      	bls.n	80091b2 <__hexnan+0x7a>
 800922e:	2300      	movs	r3, #0
 8009230:	f844 3c04 	str.w	r3, [r4, #-4]
 8009234:	2501      	movs	r5, #1
 8009236:	3c04      	subs	r4, #4
 8009238:	6822      	ldr	r2, [r4, #0]
 800923a:	f000 000f 	and.w	r0, r0, #15
 800923e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009242:	6020      	str	r0, [r4, #0]
 8009244:	e7b5      	b.n	80091b2 <__hexnan+0x7a>
 8009246:	2508      	movs	r5, #8
 8009248:	e7b3      	b.n	80091b2 <__hexnan+0x7a>
 800924a:	9b01      	ldr	r3, [sp, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0dd      	beq.n	800920c <__hexnan+0xd4>
 8009250:	f1c3 0320 	rsb	r3, r3, #32
 8009254:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009258:	40da      	lsrs	r2, r3
 800925a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800925e:	4013      	ands	r3, r2
 8009260:	f846 3c04 	str.w	r3, [r6, #-4]
 8009264:	e7d2      	b.n	800920c <__hexnan+0xd4>
 8009266:	3f04      	subs	r7, #4
 8009268:	e7d0      	b.n	800920c <__hexnan+0xd4>
 800926a:	2004      	movs	r0, #4
 800926c:	e7d5      	b.n	800921a <__hexnan+0xe2>

0800926e <__ascii_mbtowc>:
 800926e:	b082      	sub	sp, #8
 8009270:	b901      	cbnz	r1, 8009274 <__ascii_mbtowc+0x6>
 8009272:	a901      	add	r1, sp, #4
 8009274:	b142      	cbz	r2, 8009288 <__ascii_mbtowc+0x1a>
 8009276:	b14b      	cbz	r3, 800928c <__ascii_mbtowc+0x1e>
 8009278:	7813      	ldrb	r3, [r2, #0]
 800927a:	600b      	str	r3, [r1, #0]
 800927c:	7812      	ldrb	r2, [r2, #0]
 800927e:	1e10      	subs	r0, r2, #0
 8009280:	bf18      	it	ne
 8009282:	2001      	movne	r0, #1
 8009284:	b002      	add	sp, #8
 8009286:	4770      	bx	lr
 8009288:	4610      	mov	r0, r2
 800928a:	e7fb      	b.n	8009284 <__ascii_mbtowc+0x16>
 800928c:	f06f 0001 	mvn.w	r0, #1
 8009290:	e7f8      	b.n	8009284 <__ascii_mbtowc+0x16>

08009292 <__ascii_wctomb>:
 8009292:	4603      	mov	r3, r0
 8009294:	4608      	mov	r0, r1
 8009296:	b141      	cbz	r1, 80092aa <__ascii_wctomb+0x18>
 8009298:	2aff      	cmp	r2, #255	@ 0xff
 800929a:	d904      	bls.n	80092a6 <__ascii_wctomb+0x14>
 800929c:	228a      	movs	r2, #138	@ 0x8a
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092a4:	4770      	bx	lr
 80092a6:	700a      	strb	r2, [r1, #0]
 80092a8:	2001      	movs	r0, #1
 80092aa:	4770      	bx	lr

080092ac <fiprintf>:
 80092ac:	b40e      	push	{r1, r2, r3}
 80092ae:	b503      	push	{r0, r1, lr}
 80092b0:	4601      	mov	r1, r0
 80092b2:	ab03      	add	r3, sp, #12
 80092b4:	4805      	ldr	r0, [pc, #20]	@ (80092cc <fiprintf+0x20>)
 80092b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ba:	6800      	ldr	r0, [r0, #0]
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	f7ff f9df 	bl	8008680 <_vfiprintf_r>
 80092c2:	b002      	add	sp, #8
 80092c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092c8:	b003      	add	sp, #12
 80092ca:	4770      	bx	lr
 80092cc:	200006ac 	.word	0x200006ac

080092d0 <__swhatbuf_r>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	460c      	mov	r4, r1
 80092d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d8:	2900      	cmp	r1, #0
 80092da:	b096      	sub	sp, #88	@ 0x58
 80092dc:	4615      	mov	r5, r2
 80092de:	461e      	mov	r6, r3
 80092e0:	da0d      	bge.n	80092fe <__swhatbuf_r+0x2e>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092e8:	f04f 0100 	mov.w	r1, #0
 80092ec:	bf14      	ite	ne
 80092ee:	2340      	movne	r3, #64	@ 0x40
 80092f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092f4:	2000      	movs	r0, #0
 80092f6:	6031      	str	r1, [r6, #0]
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	b016      	add	sp, #88	@ 0x58
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	466a      	mov	r2, sp
 8009300:	f000 f848 	bl	8009394 <_fstat_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	dbec      	blt.n	80092e2 <__swhatbuf_r+0x12>
 8009308:	9901      	ldr	r1, [sp, #4]
 800930a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800930e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009312:	4259      	negs	r1, r3
 8009314:	4159      	adcs	r1, r3
 8009316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800931a:	e7eb      	b.n	80092f4 <__swhatbuf_r+0x24>

0800931c <__smakebuf_r>:
 800931c:	898b      	ldrh	r3, [r1, #12]
 800931e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009320:	079d      	lsls	r5, r3, #30
 8009322:	4606      	mov	r6, r0
 8009324:	460c      	mov	r4, r1
 8009326:	d507      	bpl.n	8009338 <__smakebuf_r+0x1c>
 8009328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	6123      	str	r3, [r4, #16]
 8009330:	2301      	movs	r3, #1
 8009332:	6163      	str	r3, [r4, #20]
 8009334:	b003      	add	sp, #12
 8009336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009338:	ab01      	add	r3, sp, #4
 800933a:	466a      	mov	r2, sp
 800933c:	f7ff ffc8 	bl	80092d0 <__swhatbuf_r>
 8009340:	9f00      	ldr	r7, [sp, #0]
 8009342:	4605      	mov	r5, r0
 8009344:	4639      	mov	r1, r7
 8009346:	4630      	mov	r0, r6
 8009348:	f7fb fd3e 	bl	8004dc8 <_malloc_r>
 800934c:	b948      	cbnz	r0, 8009362 <__smakebuf_r+0x46>
 800934e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009352:	059a      	lsls	r2, r3, #22
 8009354:	d4ee      	bmi.n	8009334 <__smakebuf_r+0x18>
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	f043 0302 	orr.w	r3, r3, #2
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	e7e2      	b.n	8009328 <__smakebuf_r+0xc>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	6020      	str	r0, [r4, #0]
 8009366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	9b01      	ldr	r3, [sp, #4]
 800936e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009372:	b15b      	cbz	r3, 800938c <__smakebuf_r+0x70>
 8009374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009378:	4630      	mov	r0, r6
 800937a:	f000 f81d 	bl	80093b8 <_isatty_r>
 800937e:	b128      	cbz	r0, 800938c <__smakebuf_r+0x70>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	431d      	orrs	r5, r3
 8009390:	81a5      	strh	r5, [r4, #12]
 8009392:	e7cf      	b.n	8009334 <__smakebuf_r+0x18>

08009394 <_fstat_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	@ (80093b4 <_fstat_r+0x20>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	f000 f86d 	bl	8009480 <_fstat>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d102      	bne.n	80093b0 <_fstat_r+0x1c>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	b103      	cbz	r3, 80093b0 <_fstat_r+0x1c>
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	20000be0 	.word	0x20000be0

080093b8 <_isatty_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d06      	ldr	r5, [pc, #24]	@ (80093d4 <_isatty_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f000 f86c 	bl	80094a0 <_isatty>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_isatty_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_isatty_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20000be0 	.word	0x20000be0

080093d8 <abort>:
 80093d8:	b508      	push	{r3, lr}
 80093da:	2006      	movs	r0, #6
 80093dc:	f000 f82c 	bl	8009438 <raise>
 80093e0:	2001      	movs	r0, #1
 80093e2:	f000 f885 	bl	80094f0 <_exit>

080093e6 <_raise_r>:
 80093e6:	291f      	cmp	r1, #31
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4605      	mov	r5, r0
 80093ec:	460c      	mov	r4, r1
 80093ee:	d904      	bls.n	80093fa <_raise_r+0x14>
 80093f0:	2316      	movs	r3, #22
 80093f2:	6003      	str	r3, [r0, #0]
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093f8:	bd38      	pop	{r3, r4, r5, pc}
 80093fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093fc:	b112      	cbz	r2, 8009404 <_raise_r+0x1e>
 80093fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009402:	b94b      	cbnz	r3, 8009418 <_raise_r+0x32>
 8009404:	4628      	mov	r0, r5
 8009406:	f000 f831 	bl	800946c <_getpid_r>
 800940a:	4622      	mov	r2, r4
 800940c:	4601      	mov	r1, r0
 800940e:	4628      	mov	r0, r5
 8009410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009414:	f000 b818 	b.w	8009448 <_kill_r>
 8009418:	2b01      	cmp	r3, #1
 800941a:	d00a      	beq.n	8009432 <_raise_r+0x4c>
 800941c:	1c59      	adds	r1, r3, #1
 800941e:	d103      	bne.n	8009428 <_raise_r+0x42>
 8009420:	2316      	movs	r3, #22
 8009422:	6003      	str	r3, [r0, #0]
 8009424:	2001      	movs	r0, #1
 8009426:	e7e7      	b.n	80093f8 <_raise_r+0x12>
 8009428:	2100      	movs	r1, #0
 800942a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800942e:	4620      	mov	r0, r4
 8009430:	4798      	blx	r3
 8009432:	2000      	movs	r0, #0
 8009434:	e7e0      	b.n	80093f8 <_raise_r+0x12>
	...

08009438 <raise>:
 8009438:	4b02      	ldr	r3, [pc, #8]	@ (8009444 <raise+0xc>)
 800943a:	4601      	mov	r1, r0
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	f7ff bfd2 	b.w	80093e6 <_raise_r>
 8009442:	bf00      	nop
 8009444:	200006ac 	.word	0x200006ac

08009448 <_kill_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d07      	ldr	r5, [pc, #28]	@ (8009468 <_kill_r+0x20>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	4611      	mov	r1, r2
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	f000 f82b 	bl	80094b0 <_kill>
 800945a:	1c43      	adds	r3, r0, #1
 800945c:	d102      	bne.n	8009464 <_kill_r+0x1c>
 800945e:	682b      	ldr	r3, [r5, #0]
 8009460:	b103      	cbz	r3, 8009464 <_kill_r+0x1c>
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	bf00      	nop
 8009468:	20000be0 	.word	0x20000be0

0800946c <_getpid_r>:
 800946c:	f000 b810 	b.w	8009490 <_getpid>

08009470 <_close>:
 8009470:	4b02      	ldr	r3, [pc, #8]	@ (800947c <_close+0xc>)
 8009472:	2258      	movs	r2, #88	@ 0x58
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800947a:	4770      	bx	lr
 800947c:	20000be0 	.word	0x20000be0

08009480 <_fstat>:
 8009480:	4b02      	ldr	r3, [pc, #8]	@ (800948c <_fstat+0xc>)
 8009482:	2258      	movs	r2, #88	@ 0x58
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800948a:	4770      	bx	lr
 800948c:	20000be0 	.word	0x20000be0

08009490 <_getpid>:
 8009490:	4b02      	ldr	r3, [pc, #8]	@ (800949c <_getpid+0xc>)
 8009492:	2258      	movs	r2, #88	@ 0x58
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800949a:	4770      	bx	lr
 800949c:	20000be0 	.word	0x20000be0

080094a0 <_isatty>:
 80094a0:	4b02      	ldr	r3, [pc, #8]	@ (80094ac <_isatty+0xc>)
 80094a2:	2258      	movs	r2, #88	@ 0x58
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	2000      	movs	r0, #0
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20000be0 	.word	0x20000be0

080094b0 <_kill>:
 80094b0:	4b02      	ldr	r3, [pc, #8]	@ (80094bc <_kill+0xc>)
 80094b2:	2258      	movs	r2, #88	@ 0x58
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094ba:	4770      	bx	lr
 80094bc:	20000be0 	.word	0x20000be0

080094c0 <_lseek>:
 80094c0:	4b02      	ldr	r3, [pc, #8]	@ (80094cc <_lseek+0xc>)
 80094c2:	2258      	movs	r2, #88	@ 0x58
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094ca:	4770      	bx	lr
 80094cc:	20000be0 	.word	0x20000be0

080094d0 <_read>:
 80094d0:	4b02      	ldr	r3, [pc, #8]	@ (80094dc <_read+0xc>)
 80094d2:	2258      	movs	r2, #88	@ 0x58
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094da:	4770      	bx	lr
 80094dc:	20000be0 	.word	0x20000be0

080094e0 <_write>:
 80094e0:	4b02      	ldr	r3, [pc, #8]	@ (80094ec <_write+0xc>)
 80094e2:	2258      	movs	r2, #88	@ 0x58
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094ea:	4770      	bx	lr
 80094ec:	20000be0 	.word	0x20000be0

080094f0 <_exit>:
 80094f0:	e7fe      	b.n	80094f0 <_exit>
	...

080094f4 <_init>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr

08009500 <_fini>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr
